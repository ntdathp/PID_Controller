
Turning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fcc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800a0e0  0800a0e0  0001a0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a59c  0800a59c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a59c  0800a59c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a59c  0800a59c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a59c  0800a59c  0001a59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200001d4  0800a778  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  0800a778  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e083  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002649  00000000  00000000  0002e2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00030910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aaf  00000000  00000000  000316e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019735  00000000  00000000  00032197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011250  00000000  00000000  0004b8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cd98  00000000  00000000  0005cb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005188  00000000  00000000  000e98b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000eea3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a0c4 	.word	0x0800a0c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800a0c4 	.word	0x0800a0c4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_GPIO_Init+0x58>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <MX_GPIO_Init+0x58>)
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	6193      	str	r3, [r2, #24]
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_GPIO_Init+0x58>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_GPIO_Init+0x58>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <MX_GPIO_Init+0x58>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6193      	str	r3, [r2, #24]
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_GPIO_Init+0x58>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_GPIO_Init+0x58>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a07      	ldr	r2, [pc, #28]	; (8001238 <MX_GPIO_Init+0x58>)
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <MX_GPIO_Init+0x58>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	40021000 	.word	0x40021000

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001242:	f001 f853 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001246:	f000 f8c3 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124a:	f7ff ffc9 	bl	80011e0 <MX_GPIO_Init>
  MX_TIM4_Init();
 800124e:	f000 fb45 	bl	80018dc <MX_TIM4_Init>
  MX_TIM3_Init();
 8001252:	f000 faf5 	bl	8001840 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001256:	f000 fa8f 	bl	8001778 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800125a:	f000 fc43 	bl	8001ae4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  motor_init(&tmotor, PPR);
 800125e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001262:	484b      	ldr	r0, [pc, #300]	; (8001390 <main+0x154>)
 8001264:	f000 fce2 	bl	8001c2c <motor_init>
  pid_init(&tpid, ZERO, ZERO, ZERO, PID_CONTROLLER_LIMIT_MAX, PID_CONTROLLER_LIMIT_MIN, SAMPLING_TIME);
 8001268:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <main+0x158>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fd3b 	bl	8000ce8 <__aeabi_ui2f>
 8001272:	4604      	mov	r4, r0
 8001274:	4b47      	ldr	r3, [pc, #284]	; (8001394 <main+0x158>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	425b      	negs	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fd34 	bl	8000ce8 <__aeabi_ui2f>
 8001280:	4603      	mov	r3, r0
 8001282:	4a45      	ldr	r2, [pc, #276]	; (8001398 <main+0x15c>)
 8001284:	9202      	str	r2, [sp, #8]
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	9400      	str	r4, [sp, #0]
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 0100 	mov.w	r1, #0
 8001296:	4841      	ldr	r0, [pc, #260]	; (800139c <main+0x160>)
 8001298:	f000 fde5 	bl	8001e66 <pid_init>
  serial_init();
 800129c:	f000 ff52 	bl	8002144 <serial_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  	        if(!strcmp(scmd,"SPID"))
 80012a0:	493f      	ldr	r1, [pc, #252]	; (80013a0 <main+0x164>)
 80012a2:	4840      	ldr	r0, [pc, #256]	; (80013a4 <main+0x168>)
 80012a4:	f7fe ff54 	bl	8000150 <strcmp>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <main+0x7a>
		  	        {
		  	          tprocess = SPID;
 80012ae:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <main+0x16c>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e023      	b.n	80012fe <main+0xc2>
		  	        }
		  	        else if(!strcmp(scmd,"VTUN"))
 80012b6:	493d      	ldr	r1, [pc, #244]	; (80013ac <main+0x170>)
 80012b8:	483a      	ldr	r0, [pc, #232]	; (80013a4 <main+0x168>)
 80012ba:	f7fe ff49 	bl	8000150 <strcmp>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <main+0x90>
		  	        {
		  	          tprocess = VTUN;
 80012c4:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <main+0x16c>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e018      	b.n	80012fe <main+0xc2>
		  	        }
		  	        else if(!strcmp(scmd,"PTUN"))
 80012cc:	4938      	ldr	r1, [pc, #224]	; (80013b0 <main+0x174>)
 80012ce:	4835      	ldr	r0, [pc, #212]	; (80013a4 <main+0x168>)
 80012d0:	f7fe ff3e 	bl	8000150 <strcmp>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <main+0xa6>
		  	        {
		  	          tprocess = PTUN;
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <main+0x16c>)
 80012dc:	2203      	movs	r2, #3
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	e00d      	b.n	80012fe <main+0xc2>
		  	        }
		  	      else if(!strcmp(scmd,"STOP"))
 80012e2:	4934      	ldr	r1, [pc, #208]	; (80013b4 <main+0x178>)
 80012e4:	482f      	ldr	r0, [pc, #188]	; (80013a4 <main+0x168>)
 80012e6:	f7fe ff33 	bl	8000150 <strcmp>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d103      	bne.n	80012f8 <main+0xbc>
		  	       {
		  	      	 tprocess = STOP;
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <main+0x16c>)
 80012f2:	2204      	movs	r2, #4
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	e002      	b.n	80012fe <main+0xc2>
		  	       }
		  	        else
		  	        {
		  	          tprocess = NONE;
 80012f8:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <main+0x16c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
		  	        }
	  switch(tprocess)
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <main+0x16c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b04      	cmp	r3, #4
 8001304:	d8cc      	bhi.n	80012a0 <main+0x64>
 8001306:	a201      	add	r2, pc, #4	; (adr r2, 800130c <main+0xd0>)
 8001308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130c:	08001321 	.word	0x08001321
 8001310:	08001357 	.word	0x08001357
 8001314:	080012a1 	.word	0x080012a1
 8001318:	080012a1 	.word	0x080012a1
 800131c:	08001371 	.word	0x08001371
	 	  	      {
	 	  	        case NONE:
	 	  	        	itick = HAL_GetTick();
 8001320:	f001 f83c 	bl	800239c <HAL_GetTick>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <main+0x17c>)
 800132a:	601a      	str	r2, [r3, #0]
	 	  	        	if(!(itick % THOUSAND) )
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <main+0x17c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <main+0x180>)
 8001332:	fb83 1302 	smull	r1, r3, r3, r2
 8001336:	1199      	asrs	r1, r3, #6
 8001338:	17d3      	asrs	r3, r2, #31
 800133a:	1acb      	subs	r3, r1, r3
 800133c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001340:	fb01 f303 	mul.w	r3, r1, r3
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d11f      	bne.n	800138a <main+0x14e>
	 	  	        	serial_write_com("NONE", ZERO);
 800134a:	f04f 0100 	mov.w	r1, #0
 800134e:	481c      	ldr	r0, [pc, #112]	; (80013c0 <main+0x184>)
 8001350:	f000 ff06 	bl	8002160 <serial_write_com>
	 	  	          break;
 8001354:	e019      	b.n	800138a <main+0x14e>
	 	  	        case SPID:
	 	  	        	pid_tunning_set(&tpid, dkp, dki, dkd);
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <main+0x188>)
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <main+0x18c>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <main+0x190>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	480e      	ldr	r0, [pc, #56]	; (800139c <main+0x160>)
 8001364:	f000 fdc0 	bl	8001ee8 <pid_tunning_set>
	 	  	        	tprocess = NONE;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <main+0x16c>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
	 	  	          break;
 800136e:	e00e      	b.n	800138e <main+0x152>
	 	  	        case VTUN:
	 	  	        	break;
	 	  	        case PTUN:
	 	  	        	break;
	 	  	        case STOP:
	 	  	        	motor_reset(&tmotor);
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <main+0x154>)
 8001372:	f000 fc83 	bl	8001c7c <motor_reset>
	 	  	        	motor_set_duty(0);
 8001376:	2000      	movs	r0, #0
 8001378:	f000 fc9c 	bl	8001cb4 <motor_set_duty>
	 	  	        	pid_reset(&tpid);
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <main+0x160>)
 800137e:	f000 fd49 	bl	8001e14 <pid_reset>
	 	  	        	tprocess = NONE;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <main+0x16c>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
	 	  	        	break;
 8001388:	e001      	b.n	800138e <main+0x152>
	 	  	          break;
 800138a:	bf00      	nop
 800138c:	e788      	b.n	80012a0 <main+0x64>
		  	        if(!strcmp(scmd,"SPID"))
 800138e:	e787      	b.n	80012a0 <main+0x64>
 8001390:	200001f0 	.word	0x200001f0
 8001394:	2000024c 	.word	0x2000024c
 8001398:	3c23d70a 	.word	0x3c23d70a
 800139c:	20000208 	.word	0x20000208
 80013a0:	0800a0e0 	.word	0x0800a0e0
 80013a4:	20000434 	.word	0x20000434
 80013a8:	20000240 	.word	0x20000240
 80013ac:	0800a0e8 	.word	0x0800a0e8
 80013b0:	0800a0f0 	.word	0x0800a0f0
 80013b4:	0800a0f8 	.word	0x0800a0f8
 80013b8:	20000244 	.word	0x20000244
 80013bc:	10624dd3 	.word	0x10624dd3
 80013c0:	0800a100 	.word	0x0800a100
 80013c4:	20000438 	.word	0x20000438
 80013c8:	2000043c 	.word	0x2000043c
 80013cc:	20000440 	.word	0x20000440

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b090      	sub	sp, #64	; 0x40
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	2228      	movs	r2, #40	; 0x28
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 fe31 	bl	8006046 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001400:	2301      	movs	r3, #1
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001404:	2302      	movs	r3, #2
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800140e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f107 0318 	add.w	r3, r7, #24
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fb0d 	bl	8002a38 <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001424:	f000 f86e 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001428:	230f      	movs	r3, #15
 800142a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142c:	2302      	movs	r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001438:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2102      	movs	r1, #2
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fd7a 	bl	8002f3c <HAL_RCC_ClockConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800144e:	f000 f859 	bl	8001504 <Error_Handler>
  }
}
 8001452:	bf00      	nop
 8001454:	3740      	adds	r7, #64	; 0x40
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	  if(htim->Instance == INTERUPT_TIMER_INSTANCE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d136      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0x82>
	  {
		  switch(tprocess)
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d832      	bhi.n	80014de <HAL_TIM_PeriodElapsedCallback+0x82>
 8001478:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800147a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147e:	bf00      	nop
 8001480:	080014dd 	.word	0x080014dd
 8001484:	080014dd 	.word	0x080014dd
 8001488:	08001495 	.word	0x08001495
 800148c:	080014b9 	.word	0x080014b9
 8001490:	080014dd 	.word	0x080014dd
		  	 	  	        case NONE:
		  	 	  	          break;
		  	 	  	        case SPID:
		  	 	  	          break;
		  	 	  	        case VTUN:
		  	 	  	        	motor_read_encoder(&tmotor, &htim4);
 8001494:	4916      	ldr	r1, [pc, #88]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001496:	4817      	ldr	r0, [pc, #92]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001498:	f000 fc2c 	bl	8001cf4 <motor_read_encoder>
		  	 	  	        	motor_set_velocity(&tmotor, &tpid, dset_point);
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4916      	ldr	r1, [pc, #88]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80014a6:	f000 fc7b 	bl	8001da0 <motor_set_velocity>
		  	 	  	        	serial_write_com(scmd, tmotor.dvelocity);
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4813      	ldr	r0, [pc, #76]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80014b2:	f000 fe55 	bl	8002160 <serial_write_com>
		  	 	  	        	break;
 80014b6:	e012      	b.n	80014de <HAL_TIM_PeriodElapsedCallback+0x82>
		  	 	  	        case PTUN:
		  	 	  	        	motor_read_encoder(&tmotor, &htim4);
 80014b8:	490d      	ldr	r1, [pc, #52]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80014bc:	f000 fc1a 	bl	8001cf4 <motor_read_encoder>
		  	 	  	        	motor_set_position(&tmotor, &tpid, dset_point);
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	490d      	ldr	r1, [pc, #52]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80014ca:	f000 fc86 	bl	8001dda <motor_set_position>
		  	 	  	        	serial_write_com(scmd, tmotor.dposition);
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	4619      	mov	r1, r3
 80014d4:	480a      	ldr	r0, [pc, #40]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80014d6:	f000 fe43 	bl	8002160 <serial_write_com>
		  	 	  	        	break;
 80014da:	e000      	b.n	80014de <HAL_TIM_PeriodElapsedCallback+0x82>
		  	 	  	          break;
 80014dc:	bf00      	nop
		  	 	  	        case STOP:
		  	 	  	        	break;
		  	 	  	      }
	  }
	  }
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000294 	.word	0x20000294
 80014ec:	20000240 	.word	0x20000240
 80014f0:	200002dc 	.word	0x200002dc
 80014f4:	200001f0 	.word	0x200001f0
 80014f8:	20000444 	.word	0x20000444
 80014fc:	20000208 	.word	0x20000208
 8001500:	20000434 	.word	0x20000434

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <HAL_MspInit+0x5c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_MspInit+0x5c>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_MspInit+0x5c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_MspInit+0x5c>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_MspInit+0x60>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_MspInit+0x60>)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ba:	f000 fedd 	bl	8002378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <TIM3_IRQHandler+0x10>)
 80015ca:	f002 f909 	bl	80037e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000294 	.word	0x20000294

080015d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <USART3_IRQHandler+0x10>)
 80015de:	f002 ffc1 	bl	8004564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000324 	.word	0x20000324

080015ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	return 1;
 80015f0:	2301      	movs	r3, #1
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <_kill>:

int _kill(int pid, int sig)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001604:	f004 fd80 	bl	8006108 <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	2216      	movs	r2, #22
 800160c:	601a      	str	r2, [r3, #0]
	return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_exit>:

void _exit (int status)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001622:	f04f 31ff 	mov.w	r1, #4294967295
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffe7 	bl	80015fa <_kill>
	while (1) {}		/* Make sure we hang here */
 800162c:	e7fe      	b.n	800162c <_exit+0x12>

0800162e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e00a      	b.n	8001656 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001640:	f3af 8000 	nop.w
 8001644:	4601      	mov	r1, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	60ba      	str	r2, [r7, #8]
 800164c:	b2ca      	uxtb	r2, r1
 800164e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	dbf0      	blt.n	8001640 <_read+0x12>
	}

return len;
 800165e:	687b      	ldr	r3, [r7, #4]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e009      	b.n	800168e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	60ba      	str	r2, [r7, #8]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	dbf1      	blt.n	800167a <_write+0x12>
	}
	return len;
 8001696:	687b      	ldr	r3, [r7, #4]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_close>:

int _close(int file)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c6:	605a      	str	r2, [r3, #4]
	return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <_isatty>:

int _isatty(int file)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	return 0;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f004 fcea 	bl	8006108 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20005000 	.word	0x20005000
 8001760:	00000400 	.word	0x00000400
 8001764:	20000248 	.word	0x20000248
 8001768:	200005a0 	.word	0x200005a0

0800176c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	615a      	str	r2, [r3, #20]
 8001798:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800179a:	4b28      	ldr	r3, [pc, #160]	; (800183c <MX_TIM2_Init+0xc4>)
 800179c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <MX_TIM2_Init+0xc4>)
 80017a4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80017a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80017aa:	4b24      	ldr	r3, [pc, #144]	; (800183c <MX_TIM2_Init+0xc4>)
 80017ac:	2260      	movs	r2, #96	; 0x60
 80017ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80017b0:	4b22      	ldr	r3, [pc, #136]	; (800183c <MX_TIM2_Init+0xc4>)
 80017b2:	2263      	movs	r2, #99	; 0x63
 80017b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <MX_TIM2_Init+0xc4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <MX_TIM2_Init+0xc4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017c2:	481e      	ldr	r0, [pc, #120]	; (800183c <MX_TIM2_Init+0xc4>)
 80017c4:	f001 fdea 	bl	800339c <HAL_TIM_PWM_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017ce:	f7ff fe99 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017da:	f107 0320 	add.w	r3, r7, #32
 80017de:	4619      	mov	r1, r3
 80017e0:	4816      	ldr	r0, [pc, #88]	; (800183c <MX_TIM2_Init+0xc4>)
 80017e2:	f002 fd57 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017ec:	f7ff fe8a 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f0:	2360      	movs	r3, #96	; 0x60
 80017f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2200      	movs	r2, #0
 8001804:	4619      	mov	r1, r3
 8001806:	480d      	ldr	r0, [pc, #52]	; (800183c <MX_TIM2_Init+0xc4>)
 8001808:	f002 f8f2 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001812:	f7ff fe77 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2204      	movs	r2, #4
 800181a:	4619      	mov	r1, r3
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <MX_TIM2_Init+0xc4>)
 800181e:	f002 f8e7 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001828:	f7ff fe6c 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <MX_TIM2_Init+0xc4>)
 800182e:	f000 f929 	bl	8001a84 <HAL_TIM_MspPostInit>

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000024c 	.word	0x2000024c

08001840 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <MX_TIM3_Init+0x94>)
 800185e:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <MX_TIM3_Init+0x98>)
 8001860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_TIM3_Init+0x94>)
 8001864:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001868:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_TIM3_Init+0x94>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_TIM3_Init+0x94>)
 8001872:	2263      	movs	r2, #99	; 0x63
 8001874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_TIM3_Init+0x94>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_TIM3_Init+0x94>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001882:	4814      	ldr	r0, [pc, #80]	; (80018d4 <MX_TIM3_Init+0x94>)
 8001884:	f001 fce8 	bl	8003258 <HAL_TIM_Base_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800188e:	f7ff fe39 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_TIM3_Init+0x94>)
 80018a0:	f002 f968 	bl	8003b74 <HAL_TIM_ConfigClockSource>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018aa:	f7ff fe2b 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <MX_TIM3_Init+0x94>)
 80018bc:	f002 fcea 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018c6:	f7ff fe1d 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000294 	.word	0x20000294
 80018d8:	40000400 	.word	0x40000400

080018dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	2224      	movs	r2, #36	; 0x24
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 fbab 	bl	8006046 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018f8:	4b20      	ldr	r3, [pc, #128]	; (800197c <MX_TIM4_Init+0xa0>)
 80018fa:	4a21      	ldr	r2, [pc, #132]	; (8001980 <MX_TIM4_Init+0xa4>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <MX_TIM4_Init+0xa0>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <MX_TIM4_Init+0xa0>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800190a:	4b1c      	ldr	r3, [pc, #112]	; (800197c <MX_TIM4_Init+0xa0>)
 800190c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001910:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <MX_TIM4_Init+0xa0>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_TIM4_Init+0xa0>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800191e:	2303      	movs	r3, #3
 8001920:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001926:	2301      	movs	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001936:	2301      	movs	r3, #1
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800193a:	2300      	movs	r3, #0
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <MX_TIM4_Init+0xa0>)
 800194a:	f001 fe19 	bl	8003580 <HAL_TIM_Encoder_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001954:	f7ff fdd6 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_TIM4_Init+0xa0>)
 8001966:	f002 fc95 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001970:	f7ff fdc8 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3730      	adds	r7, #48	; 0x30
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200002dc 	.word	0x200002dc
 8001980:	40000800 	.word	0x40000800

08001984 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001994:	d10b      	bne.n	80019ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_TIM_PWM_MspInit+0x34>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_TIM_PWM_MspInit+0x34>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_TIM_PWM_MspInit+0x34>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000

080019bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <HAL_TIM_Base_MspInit+0x44>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d113      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_TIM_Base_MspInit+0x48>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a0c      	ldr	r2, [pc, #48]	; (8001a04 <HAL_TIM_Base_MspInit+0x48>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_TIM_Base_MspInit+0x48>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2102      	movs	r1, #2
 80019ea:	201d      	movs	r0, #29
 80019ec:	f000 fdb7 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019f0:	201d      	movs	r0, #29
 80019f2:	f000 fdd0 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40000400 	.word	0x40000400
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <HAL_TIM_Encoder_MspInit+0x70>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d123      	bne.n	8001a70 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	61d3      	str	r3, [r2, #28]
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a58:	23c0      	movs	r3, #192	; 0xc0
 8001a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x78>)
 8001a6c:	f000 fe60 	bl	8002730 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a70:	bf00      	nop
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40000800 	.word	0x40000800
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010c00 	.word	0x40010c00

08001a84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa2:	d117      	bne.n	8001ad4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_TIM_MspPostInit+0x58>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <HAL_TIM_MspPostInit+0x58>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_TIM_MspPostInit+0x58>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001abc:	2303      	movs	r3, #3
 8001abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <HAL_TIM_MspPostInit+0x5c>)
 8001ad0:	f000 fe2e 	bl	8002730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010800 	.word	0x40010800

08001ae4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_USART3_UART_Init+0x4c>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <MX_USART3_UART_Init+0x50>)
 8001aec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_USART3_UART_Init+0x4c>)
 8001af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_USART3_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_USART3_UART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <MX_USART3_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_USART3_UART_Init+0x4c>)
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <MX_USART3_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_USART3_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_USART3_UART_Init+0x4c>)
 8001b1c:	f002 fc2a 	bl	8004374 <HAL_UART_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b26:	f7ff fced 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000324 	.word	0x20000324
 8001b34:	40004800 	.word	0x40004800

08001b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <HAL_UART_MspInit+0x9c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d139      	bne.n	8001bcc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b62:	61d3      	str	r3, [r2, #28]
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b76:	f043 0308 	orr.w	r3, r3, #8
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480f      	ldr	r0, [pc, #60]	; (8001bdc <HAL_UART_MspInit+0xa4>)
 8001b9e:	f000 fdc7 	bl	8002730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4809      	ldr	r0, [pc, #36]	; (8001bdc <HAL_UART_MspInit+0xa4>)
 8001bb8:	f000 fdba 	bl	8002730 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2027      	movs	r0, #39	; 0x27
 8001bc2:	f000 fccc 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bc6:	2027      	movs	r0, #39	; 0x27
 8001bc8:	f000 fce5 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bcc:	bf00      	nop
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40004800 	.word	0x40004800
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010c00 	.word	0x40010c00

08001be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001be2:	490d      	ldr	r1, [pc, #52]	; (8001c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bf8:	4c0a      	ldr	r4, [pc, #40]	; (8001c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c06:	f7ff fdb1 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f004 fa83 	bl	8006114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c0e:	f7ff fb15 	bl	800123c <main>
  bx lr
 8001c12:	4770      	bx	lr
  ldr r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c18:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c1c:	0800a5a4 	.word	0x0800a5a4
  ldr r2, =_sbss
 8001c20:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c24:	2000059c 	.word	0x2000059c

08001c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC1_2_IRQHandler>
	...

08001c2c <motor_init>:
#include "motor.h"


void motor_init(Motor_t *tmotor, uint32_t ipulse)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
    motor_reset(tmotor);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f820 	bl	8001c7c <motor_reset>
    tmotor->ipulse_per_round = ipulse;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&INTERUPT_TIMER);
 8001c42:	480b      	ldr	r0, [pc, #44]	; (8001c70 <motor_init+0x44>)
 8001c44:	f001 fb58 	bl	80032f8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(&ECODER_TIMER, TIM_CHANNEL_1);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	480a      	ldr	r0, [pc, #40]	; (8001c74 <motor_init+0x48>)
 8001c4c:	f001 fd3a 	bl	80036c4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&ECODER_TIMER, TIM_CHANNEL_2);
 8001c50:	2104      	movs	r1, #4
 8001c52:	4808      	ldr	r0, [pc, #32]	; (8001c74 <motor_init+0x48>)
 8001c54:	f001 fd36 	bl	80036c4 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&PWM_TIMER, TIM_CHANNEL_1);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4807      	ldr	r0, [pc, #28]	; (8001c78 <motor_init+0x4c>)
 8001c5c:	f001 fbee 	bl	800343c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&PWM_TIMER, TIM_CHANNEL_2);
 8001c60:	2104      	movs	r1, #4
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <motor_init+0x4c>)
 8001c64:	f001 fbea 	bl	800343c <HAL_TIM_PWM_Start>

}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000294 	.word	0x20000294
 8001c74:	200002dc 	.word	0x200002dc
 8001c78:	2000024c 	.word	0x2000024c

08001c7c <motor_reset>:
void motor_reset(Motor_t *tmotor)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    tmotor->icounter = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
    tmotor->dvelocity = 0.0f;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
    tmotor->dposition = 0.0f;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
    tmotor->dreference_velocity = 0.0f;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
    tmotor->dreference_position = 0.0f;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <motor_set_duty>:
void motor_set_duty(int32_t iduty)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    if (iduty >= 0)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db08      	blt.n	8001cd4 <motor_set_duty+0x20>
    {
    	MOTOR1_FORWARD_DUTY_CYCLE_REGISTER = iduty;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <motor_set_duty+0x3c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34
    	MOTOR1_BACKWARD_DUTY_CYCLE_REGISTER = 0;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <motor_set_duty+0x3c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	639a      	str	r2, [r3, #56]	; 0x38
    else
    {
    	MOTOR1_FORWARD_DUTY_CYCLE_REGISTER = 0;
    	MOTOR1_BACKWARD_DUTY_CYCLE_REGISTER = iduty;
    }
}
 8001cd2:	e007      	b.n	8001ce4 <motor_set_duty+0x30>
    	MOTOR1_FORWARD_DUTY_CYCLE_REGISTER = 0;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <motor_set_duty+0x3c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34
    	MOTOR1_BACKWARD_DUTY_CYCLE_REGISTER = iduty;
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <motor_set_duty+0x3c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2000024c 	.word	0x2000024c

08001cf4 <motor_read_encoder>:
void motor_read_encoder(Motor_t *tmotor, TIM_HandleTypeDef *htim)
{
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
    tmotor->icounter = htim->Instance->CNT;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	461a      	mov	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	605a      	str	r2, [r3, #4]
    tmotor->dvelocity = (float)tmotor->icounter / (float)tmotor->ipulse_per_round * NUMBER_OF_DEGREES_ON_A_CIRCLE / SAMPLING_TIME;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe ffee 	bl	8000cf0 <__aeabi_i2f>
 8001d14:	4604      	mov	r4, r0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ffe4 	bl	8000ce8 <__aeabi_ui2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4619      	mov	r1, r3
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff f8eb 	bl	8000f00 <__aeabi_fdiv>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	491a      	ldr	r1, [pc, #104]	; (8001d98 <motor_read_encoder+0xa4>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f832 	bl	8000d98 <__aeabi_fmul>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4919      	ldr	r1, [pc, #100]	; (8001d9c <motor_read_encoder+0xa8>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f8e1 	bl	8000f00 <__aeabi_fdiv>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	609a      	str	r2, [r3, #8]
    tmotor->dposition += (float)tmotor->icounter / (float)tmotor->ipulse_per_round * NUMBER_OF_DEGREES_ON_A_CIRCLE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68dc      	ldr	r4, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ffce 	bl	8000cf0 <__aeabi_i2f>
 8001d54:	4605      	mov	r5, r0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ffc4 	bl	8000ce8 <__aeabi_ui2f>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4619      	mov	r1, r3
 8001d64:	4628      	mov	r0, r5
 8001d66:	f7ff f8cb 	bl	8000f00 <__aeabi_fdiv>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	490a      	ldr	r1, [pc, #40]	; (8001d98 <motor_read_encoder+0xa4>)
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f812 	bl	8000d98 <__aeabi_fmul>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4619      	mov	r1, r3
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7fe ff05 	bl	8000b88 <__addsf3>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60da      	str	r2, [r3, #12]
    htim->Instance->CNT = 0;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bdb0      	pop	{r4, r5, r7, pc}
 8001d96:	bf00      	nop
 8001d98:	43b40000 	.word	0x43b40000
 8001d9c:	3c23d70a 	.word	0x3c23d70a

08001da0 <motor_set_velocity>:
void motor_set_velocity(Motor_t *tmotor, PID_CONTROL_t *tpid_ctrl, float dvelocity)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
    tmotor->dreference_velocity = dvelocity;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	611a      	str	r2, [r3, #16]
    motor_set_duty((int)pid_compute(tpid_ctrl, tmotor->dreference_velocity, tmotor->dvelocity));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6919      	ldr	r1, [r3, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68b8      	ldr	r0, [r7, #8]
 8001dbe:	f000 f8c0 	bl	8001f42 <pid_compute>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f9ad 	bl	8001124 <__aeabi_f2iz>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff71 	bl	8001cb4 <motor_set_duty>
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <motor_set_position>:
void motor_set_position(Motor_t *tmotor, PID_CONTROL_t *tpid_ctrl, float dposition)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
    tmotor->dreference_position = dposition;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	615a      	str	r2, [r3, #20]
    motor_set_duty((int)pid_compute(tpid_ctrl, tmotor->dreference_position, tmotor->dposition));
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6959      	ldr	r1, [r3, #20]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	461a      	mov	r2, r3
 8001df6:	68b8      	ldr	r0, [r7, #8]
 8001df8:	f000 f8a3 	bl	8001f42 <pid_compute>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f990 	bl	8001124 <__aeabi_f2iz>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff54 	bl	8001cb4 <motor_set_duty>
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <pid_reset>:
#include "pid.h"

// reset PID params
void pid_reset(PID_CONTROL_t *tpid_ctrl)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    tpid_ctrl->dlim_max_int = 0.0f;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	615a      	str	r2, [r3, #20]
    tpid_ctrl->dlim_min_int = 0.0f;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]

    tpid_ctrl->derror = 0.0f;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
    tpid_ctrl->dpre_error = 0.0f;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

    tpid_ctrl->dproportional = 0.0f;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
    tpid_ctrl->dintergral = 0.0f;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    tpid_ctrl->dderivative = 0.0f;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30

    tpid_ctrl->dresult = 0.0f;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <pid_init>:

// init PID
void pid_init(PID_CONTROL_t *tpid_ctrl, float dkp, float dki, float dkd, float dlimit_max, float dlimit_min, float dts)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	603b      	str	r3, [r7, #0]
    if (dkp < 0.0f || dki < 0.0f || dkp < 0.0f || dts < 0.0f)
 8001e74:	f04f 0100 	mov.w	r1, #0
 8001e78:	68b8      	ldr	r0, [r7, #8]
 8001e7a:	f7ff f92b 	bl	80010d4 <__aeabi_fcmplt>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d12d      	bne.n	8001ee0 <pid_init+0x7a>
 8001e84:	f04f 0100 	mov.w	r1, #0
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff f923 	bl	80010d4 <__aeabi_fcmplt>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d125      	bne.n	8001ee0 <pid_init+0x7a>
 8001e94:	f04f 0100 	mov.w	r1, #0
 8001e98:	68b8      	ldr	r0, [r7, #8]
 8001e9a:	f7ff f91b 	bl	80010d4 <__aeabi_fcmplt>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d11d      	bne.n	8001ee0 <pid_init+0x7a>
 8001ea4:	f04f 0100 	mov.w	r1, #0
 8001ea8:	6a38      	ldr	r0, [r7, #32]
 8001eaa:	f7ff f913 	bl	80010d4 <__aeabi_fcmplt>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d115      	bne.n	8001ee0 <pid_init+0x7a>
    {
        return;
    }

    pid_reset(tpid_ctrl);
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff ffad 	bl	8001e14 <pid_reset>
    tpid_ctrl->dkp = dkp;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	601a      	str	r2, [r3, #0]
    tpid_ctrl->dki = dki;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	605a      	str	r2, [r3, #4]
    tpid_ctrl->dkd = dkd;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	609a      	str	r2, [r3, #8]

    tpid_ctrl->dlim_max = dlimit_max;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	611a      	str	r2, [r3, #16]
    tpid_ctrl->dlim_min = dlimit_min;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	60da      	str	r2, [r3, #12]

    tpid_ctrl->dts = dts;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a3a      	ldr	r2, [r7, #32]
 8001edc:	61da      	str	r2, [r3, #28]
 8001ede:	e000      	b.n	8001ee2 <pid_init+0x7c>
        return;
 8001ee0:	bf00      	nop
}
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <pid_tunning_set>:

// set new PID params
void pid_tunning_set(PID_CONTROL_t *tpid_ctrl, float dkp, float dki, float dkd)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
    if (dkp < 0.0f || dki < 0.0f || dkp < 0.0f)
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	68b8      	ldr	r0, [r7, #8]
 8001efc:	f7ff f8ea 	bl	80010d4 <__aeabi_fcmplt>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d119      	bne.n	8001f3a <pid_tunning_set+0x52>
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff f8e2 	bl	80010d4 <__aeabi_fcmplt>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d111      	bne.n	8001f3a <pid_tunning_set+0x52>
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	68b8      	ldr	r0, [r7, #8]
 8001f1c:	f7ff f8da 	bl	80010d4 <__aeabi_fcmplt>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <pid_tunning_set+0x52>
    {
        return;
    }

    tpid_ctrl->dkp = dkp;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	601a      	str	r2, [r3, #0]
    tpid_ctrl->dki = dki;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	605a      	str	r2, [r3, #4]
    tpid_ctrl->dkd = dkd;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e000      	b.n	8001f3c <pid_tunning_set+0x54>
        return;
 8001f3a:	bf00      	nop
}
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <pid_compute>:

// Compute PID Controllers
float pid_compute(PID_CONTROL_t *tpid_ctrl, float dcmd_value, float dact_value)
{
 8001f42:	b5b0      	push	{r4, r5, r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
    // Calculate error value
    tpid_ctrl->derror = dcmd_value - dact_value;
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	68b8      	ldr	r0, [r7, #8]
 8001f52:	f7fe fe17 	bl	8000b84 <__aeabi_fsub>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	621a      	str	r2, [r3, #32]

    // P part
    tpid_ctrl->dproportional = tpid_ctrl->dkp * tpid_ctrl->derror;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4619      	mov	r1, r3
 8001f68:	4610      	mov	r0, r2
 8001f6a:	f7fe ff15 	bl	8000d98 <__aeabi_fmul>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28

    // I part
    tpid_ctrl->dintergral += 0.5f * tpid_ctrl->dki * tpid_ctrl->dts * (tpid_ctrl->derror + tpid_ctrl->dpre_error);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe ff08 	bl	8000d98 <__aeabi_fmul>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f7fe ff00 	bl	8000d98 <__aeabi_fmul>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461d      	mov	r5, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a1a      	ldr	r2, [r3, #32]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f7fe fdee 	bl	8000b88 <__addsf3>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f7fe fef1 	bl	8000d98 <__aeabi_fmul>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f7fe fde4 	bl	8000b88 <__addsf3>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c

    // Intergrator anti-wireup

    // Update intergral Limits
    if (tpid_ctrl->dlim_max > tpid_ctrl->dproportional)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f7ff f89c 	bl	8001110 <__aeabi_fcmpgt>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <pid_compute+0xb6>
    {
        tpid_ctrl->dlim_max_int = tpid_ctrl->dlim_max - tpid_ctrl->dproportional;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4610      	mov	r0, r2
 8001fea:	f7fe fdcb 	bl	8000b84 <__aeabi_fsub>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	615a      	str	r2, [r3, #20]
 8001ff6:	e003      	b.n	8002000 <pid_compute+0xbe>
    }
    else
    {
        tpid_ctrl->dlim_max_int = 0.0f;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
    }
    if (tpid_ctrl->dlim_min < tpid_ctrl->dproportional)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	4619      	mov	r1, r3
 800200a:	4610      	mov	r0, r2
 800200c:	f7ff f862 	bl	80010d4 <__aeabi_fcmplt>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <pid_compute+0xee>
    {
        tpid_ctrl->dlim_min_int = tpid_ctrl->dlim_min - tpid_ctrl->dproportional;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	4619      	mov	r1, r3
 8002020:	4610      	mov	r0, r2
 8002022:	f7fe fdaf 	bl	8000b84 <__aeabi_fsub>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	619a      	str	r2, [r3, #24]
 800202e:	e003      	b.n	8002038 <pid_compute+0xf6>
    }
    else
    {
        tpid_ctrl->dlim_min_int = 0.0f;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
    }
    // Apply intergral limits
    if (tpid_ctrl->dintergral > tpid_ctrl->dlim_max_int)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f7ff f864 	bl	8001110 <__aeabi_fcmpgt>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <pid_compute+0x116>
    {
        tpid_ctrl->dintergral = tpid_ctrl->dlim_max_int;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c
 8002056:	e00e      	b.n	8002076 <pid_compute+0x134>
    }
    else if (tpid_ctrl->dintergral < tpid_ctrl->dlim_min_int)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f7ff f836 	bl	80010d4 <__aeabi_fcmplt>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <pid_compute+0x134>
    {
        tpid_ctrl->dintergral = tpid_ctrl->dlim_min_int;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	699a      	ldr	r2, [r3, #24]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    // D part
    tpid_ctrl->dderivative = 2.0f * tpid_ctrl->dkd / tpid_ctrl->dts * (tpid_ctrl->derror - tpid_ctrl->dpre_error) - tpid_ctrl->dderivative;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	4619      	mov	r1, r3
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fd83 	bl	8000b88 <__addsf3>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f7fe ff37 	bl	8000f00 <__aeabi_fdiv>
 8002092:	4603      	mov	r3, r0
 8002094:	461c      	mov	r4, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	4619      	mov	r1, r3
 80020a0:	4610      	mov	r0, r2
 80020a2:	f7fe fd6f 	bl	8000b84 <__aeabi_fsub>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4619      	mov	r1, r3
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7fe fe74 	bl	8000d98 <__aeabi_fmul>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f7fe fd62 	bl	8000b84 <__aeabi_fsub>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30

    // Compute output and apply limits
    tpid_ctrl->dresult = tpid_ctrl->dproportional + tpid_ctrl->dintergral + tpid_ctrl->dderivative;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f7fe fd58 	bl	8000b88 <__addsf3>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	4619      	mov	r1, r3
 80020e2:	4610      	mov	r0, r2
 80020e4:	f7fe fd50 	bl	8000b88 <__addsf3>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34

    if (tpid_ctrl->dresult > tpid_ctrl->dlim_max)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f7ff f808 	bl	8001110 <__aeabi_fcmpgt>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <pid_compute+0x1ce>
    {
        tpid_ctrl->dresult = tpid_ctrl->dlim_max;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	635a      	str	r2, [r3, #52]	; 0x34
 800210e:	e00e      	b.n	800212e <pid_compute+0x1ec>
    }
    else if (tpid_ctrl->dresult < tpid_ctrl->dlim_min)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f7fe ffda 	bl	80010d4 <__aeabi_fcmplt>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <pid_compute+0x1ec>
    {
        tpid_ctrl->dresult = tpid_ctrl->dlim_min;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	635a      	str	r2, [r3, #52]	; 0x34
    }

    // Update pre-error
    tpid_ctrl->dpre_error = tpid_ctrl->derror;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a1a      	ldr	r2, [r3, #32]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

    return tpid_ctrl->dresult;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002144 <serial_init>:




void serial_init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&UART_COM, &urx, 1);
 8002148:	2201      	movs	r2, #1
 800214a:	4903      	ldr	r1, [pc, #12]	; (8002158 <serial_init+0x14>)
 800214c:	4803      	ldr	r0, [pc, #12]	; (800215c <serial_init+0x18>)
 800214e:	f002 f9e4 	bl	800451a <HAL_UART_Receive_IT>
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000449 	.word	0x20000449
 800215c:	20000324 	.word	0x20000324

08002160 <serial_write_com>:
void serial_write_com(char *scmd, float dvalue)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0b6      	sub	sp, #216	; 0xd8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
	 char str[MAX_LEN];
	 strcpy(str, scmd);
 800216a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fff6 	bl	8006162 <strcpy>

	 char str_value[MAX_LEN];
	 sprintf(str_value, " %.2f\r\n", dvalue);
 8002176:	6838      	ldr	r0, [r7, #0]
 8002178:	f7fe f960 	bl	800043c <__aeabi_f2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	f107 000c 	add.w	r0, r7, #12
 8002184:	491a      	ldr	r1, [pc, #104]	; (80021f0 <serial_write_com+0x90>)
 8002186:	f003 fecf 	bl	8005f28 <siprintf>

	 strcat(str, str_value);
 800218a:	f107 020c 	add.w	r2, r7, #12
 800218e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f003 ff5e 	bl	8006056 <strcat>

	 for (int i = 0; i < strlen(str); i++) {
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80021a0:	e010      	b.n	80021c4 <serial_write_com+0x64>
		 utx_buff[i] = (uint8_t)str[i];
 80021a2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80021a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021aa:	4413      	add	r3, r2
 80021ac:	7819      	ldrb	r1, [r3, #0]
 80021ae:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <serial_write_com+0x94>)
 80021b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021b4:	4413      	add	r3, r2
 80021b6:	460a      	mov	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
	 for (int i = 0; i < strlen(str); i++) {
 80021ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021be:	3301      	adds	r3, #1
 80021c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80021c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fd ffcb 	bl	8000164 <strlen>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d8e4      	bhi.n	80021a2 <serial_write_com+0x42>
	    }
	 HAL_UART_Transmit(&UART_COM, utx_buff, sizeof(utx_buff), HAL_MAX_DELAY);
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295
 80021dc:	2264      	movs	r2, #100	; 0x64
 80021de:	4905      	ldr	r1, [pc, #20]	; (80021f4 <serial_write_com+0x94>)
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <serial_write_com+0x98>)
 80021e2:	f002 f917 	bl	8004414 <HAL_UART_Transmit>

}
 80021e6:	bf00      	nop
 80021e8:	37d8      	adds	r7, #216	; 0xd8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	0800a108 	.word	0x0800a108
 80021f4:	200003d0 	.word	0x200003d0
 80021f8:	20000324 	.word	0x20000324

080021fc <serial_handle>:
void serial_handle(uint8_t *ubuff)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b0a0      	sub	sp, #128	; 0x80
 8002200:	af04      	add	r7, sp, #16
 8002202:	6078      	str	r0, [r7, #4]
	char str[MAX_LEN];
	snprintf(str, sizeof(str), "%s", ubuff);
 8002204:	f107 000c 	add.w	r0, r7, #12
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a10      	ldr	r2, [pc, #64]	; (800224c <serial_handle+0x50>)
 800220c:	2164      	movs	r1, #100	; 0x64
 800220e:	f003 fe57 	bl	8005ec0 <sniprintf>
	sscanf(str, "%s %f %f %f %f", scmd, &dkp, &dki, &dkd, &dset_point);
 8002212:	f107 000c 	add.w	r0, r7, #12
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <serial_handle+0x54>)
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <serial_handle+0x58>)
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <serial_handle+0x5c>)
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <serial_handle+0x60>)
 8002224:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <serial_handle+0x64>)
 8002226:	490f      	ldr	r1, [pc, #60]	; (8002264 <serial_handle+0x68>)
 8002228:	f003 fe9e 	bl	8005f68 <siscanf>
	HAL_UART_Transmit(&UART_COM, ubuff, urx_index, HAL_MAX_DELAY);
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <serial_handle+0x6c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b29a      	uxth	r2, r3
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	480c      	ldr	r0, [pc, #48]	; (800226c <serial_handle+0x70>)
 800223a:	f002 f8eb 	bl	8004414 <HAL_UART_Transmit>
	urx_index = 0;
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <serial_handle+0x6c>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
}
 8002244:	bf00      	nop
 8002246:	3770      	adds	r7, #112	; 0x70
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	0800a110 	.word	0x0800a110
 8002250:	20000444 	.word	0x20000444
 8002254:	20000440 	.word	0x20000440
 8002258:	2000043c 	.word	0x2000043c
 800225c:	20000438 	.word	0x20000438
 8002260:	20000434 	.word	0x20000434
 8002264:	0800a114 	.word	0x0800a114
 8002268:	20000448 	.word	0x20000448
 800226c:	20000324 	.word	0x20000324

08002270 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
    if(huart->Instance == UART_COM_INSTANCE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_UART_RxCpltCallback+0x6c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d121      	bne.n	80022c8 <HAL_UART_RxCpltCallback+0x58>
    {
    	if(urx != '\n')
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_UART_RxCpltCallback+0x70>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b0a      	cmp	r3, #10
 800228a:	d00d      	beq.n	80022a8 <HAL_UART_RxCpltCallback+0x38>
    	{
    		urx_buff[urx_index] = urx;
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_UART_RxCpltCallback+0x74>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_UART_RxCpltCallback+0x70>)
 8002294:	7819      	ldrb	r1, [r3, #0]
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_UART_RxCpltCallback+0x78>)
 8002298:	5499      	strb	r1, [r3, r2]
    		urx_index++;
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_UART_RxCpltCallback+0x74>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_UART_RxCpltCallback+0x74>)
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e00f      	b.n	80022c8 <HAL_UART_RxCpltCallback+0x58>
    	}
    	else
    	{
    		urx_buff[urx_index] = urx;
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_UART_RxCpltCallback+0x74>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_UART_RxCpltCallback+0x70>)
 80022b0:	7819      	ldrb	r1, [r3, #0]
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_UART_RxCpltCallback+0x78>)
 80022b4:	5499      	strb	r1, [r3, r2]
    		urx_index++;
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_UART_RxCpltCallback+0x74>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_UART_RxCpltCallback+0x74>)
 80022c0:	701a      	strb	r2, [r3, #0]
    		serial_handle(urx_buff);
 80022c2:	4809      	ldr	r0, [pc, #36]	; (80022e8 <HAL_UART_RxCpltCallback+0x78>)
 80022c4:	f7ff ff9a 	bl	80021fc <serial_handle>
    	}
    	}
    HAL_UART_Receive_IT(&UART_COM,&urx, 1);
 80022c8:	2201      	movs	r2, #1
 80022ca:	4905      	ldr	r1, [pc, #20]	; (80022e0 <HAL_UART_RxCpltCallback+0x70>)
 80022cc:	4803      	ldr	r0, [pc, #12]	; (80022dc <HAL_UART_RxCpltCallback+0x6c>)
 80022ce:	f002 f924 	bl	800451a <HAL_UART_Receive_IT>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000324 	.word	0x20000324
 80022e0:	20000449 	.word	0x20000449
 80022e4:	20000448 	.word	0x20000448
 80022e8:	2000036c 	.word	0x2000036c

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_Init+0x28>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_Init+0x28>)
 80022f6:	f043 0310 	orr.w	r3, r3, #16
 80022fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fc:	2003      	movs	r0, #3
 80022fe:	f000 f923 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002302:	200f      	movs	r0, #15
 8002304:	f000 f808 	bl	8002318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002308:	f7ff f902 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40022000 	.word	0x40022000

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_InitTick+0x54>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_InitTick+0x58>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f93b 	bl	80025b2 <HAL_SYSTICK_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e00e      	b.n	8002364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b0f      	cmp	r3, #15
 800234a:	d80a      	bhi.n	8002362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800234c:	2200      	movs	r2, #0
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f000 f903 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002358:	4a06      	ldr	r2, [pc, #24]	; (8002374 <HAL_InitTick+0x5c>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000000 	.word	0x20000000
 8002370:	20000008 	.word	0x20000008
 8002374:	20000004 	.word	0x20000004

08002378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_IncTick+0x1c>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_IncTick+0x20>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_IncTick+0x20>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	20000008 	.word	0x20000008
 8002398:	2000044c 	.word	0x2000044c

0800239c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b02      	ldr	r3, [pc, #8]	; (80023ac <HAL_GetTick+0x10>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	2000044c 	.word	0x2000044c

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4906      	ldr	r1, [pc, #24]	; (8002448 <__NVIC_EnableIRQ+0x34>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f7ff ff90 	bl	800244c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff2d 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff42 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff90 	bl	80024a0 <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5f 	bl	800244c <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff35 	bl	8002414 <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d008      	beq.n	80025f4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e020      	b.n	8002636 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 020e 	bic.w	r2, r2, #14
 8002602:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f202 	lsl.w	r2, r1, r2
 8002622:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d005      	beq.n	8002664 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2204      	movs	r2, #4
 800265c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e051      	b.n	8002708 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 020e 	bic.w	r2, r2, #14
 8002672:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a22      	ldr	r2, [pc, #136]	; (8002714 <HAL_DMA_Abort_IT+0xd4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d029      	beq.n	80026e2 <HAL_DMA_Abort_IT+0xa2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a21      	ldr	r2, [pc, #132]	; (8002718 <HAL_DMA_Abort_IT+0xd8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d022      	beq.n	80026de <HAL_DMA_Abort_IT+0x9e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1f      	ldr	r2, [pc, #124]	; (800271c <HAL_DMA_Abort_IT+0xdc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01a      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x98>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <HAL_DMA_Abort_IT+0xe0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d012      	beq.n	80026d2 <HAL_DMA_Abort_IT+0x92>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <HAL_DMA_Abort_IT+0xe4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00a      	beq.n	80026cc <HAL_DMA_Abort_IT+0x8c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <HAL_DMA_Abort_IT+0xe8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d102      	bne.n	80026c6 <HAL_DMA_Abort_IT+0x86>
 80026c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026c4:	e00e      	b.n	80026e4 <HAL_DMA_Abort_IT+0xa4>
 80026c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ca:	e00b      	b.n	80026e4 <HAL_DMA_Abort_IT+0xa4>
 80026cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d0:	e008      	b.n	80026e4 <HAL_DMA_Abort_IT+0xa4>
 80026d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d6:	e005      	b.n	80026e4 <HAL_DMA_Abort_IT+0xa4>
 80026d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026dc:	e002      	b.n	80026e4 <HAL_DMA_Abort_IT+0xa4>
 80026de:	2310      	movs	r3, #16
 80026e0:	e000      	b.n	80026e4 <HAL_DMA_Abort_IT+0xa4>
 80026e2:	2301      	movs	r3, #1
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_DMA_Abort_IT+0xec>)
 80026e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
    } 
  }
  return status;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40020008 	.word	0x40020008
 8002718:	4002001c 	.word	0x4002001c
 800271c:	40020030 	.word	0x40020030
 8002720:	40020044 	.word	0x40020044
 8002724:	40020058 	.word	0x40020058
 8002728:	4002006c 	.word	0x4002006c
 800272c:	40020000 	.word	0x40020000

08002730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002730:	b480      	push	{r7}
 8002732:	b08b      	sub	sp, #44	; 0x2c
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002742:	e169      	b.n	8002a18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002744:	2201      	movs	r2, #1
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	429a      	cmp	r2, r3
 800275e:	f040 8158 	bne.w	8002a12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4a9a      	ldr	r2, [pc, #616]	; (80029d0 <HAL_GPIO_Init+0x2a0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d05e      	beq.n	800282a <HAL_GPIO_Init+0xfa>
 800276c:	4a98      	ldr	r2, [pc, #608]	; (80029d0 <HAL_GPIO_Init+0x2a0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d875      	bhi.n	800285e <HAL_GPIO_Init+0x12e>
 8002772:	4a98      	ldr	r2, [pc, #608]	; (80029d4 <HAL_GPIO_Init+0x2a4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d058      	beq.n	800282a <HAL_GPIO_Init+0xfa>
 8002778:	4a96      	ldr	r2, [pc, #600]	; (80029d4 <HAL_GPIO_Init+0x2a4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d86f      	bhi.n	800285e <HAL_GPIO_Init+0x12e>
 800277e:	4a96      	ldr	r2, [pc, #600]	; (80029d8 <HAL_GPIO_Init+0x2a8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d052      	beq.n	800282a <HAL_GPIO_Init+0xfa>
 8002784:	4a94      	ldr	r2, [pc, #592]	; (80029d8 <HAL_GPIO_Init+0x2a8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d869      	bhi.n	800285e <HAL_GPIO_Init+0x12e>
 800278a:	4a94      	ldr	r2, [pc, #592]	; (80029dc <HAL_GPIO_Init+0x2ac>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04c      	beq.n	800282a <HAL_GPIO_Init+0xfa>
 8002790:	4a92      	ldr	r2, [pc, #584]	; (80029dc <HAL_GPIO_Init+0x2ac>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d863      	bhi.n	800285e <HAL_GPIO_Init+0x12e>
 8002796:	4a92      	ldr	r2, [pc, #584]	; (80029e0 <HAL_GPIO_Init+0x2b0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d046      	beq.n	800282a <HAL_GPIO_Init+0xfa>
 800279c:	4a90      	ldr	r2, [pc, #576]	; (80029e0 <HAL_GPIO_Init+0x2b0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d85d      	bhi.n	800285e <HAL_GPIO_Init+0x12e>
 80027a2:	2b12      	cmp	r3, #18
 80027a4:	d82a      	bhi.n	80027fc <HAL_GPIO_Init+0xcc>
 80027a6:	2b12      	cmp	r3, #18
 80027a8:	d859      	bhi.n	800285e <HAL_GPIO_Init+0x12e>
 80027aa:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <HAL_GPIO_Init+0x80>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	0800282b 	.word	0x0800282b
 80027b4:	08002805 	.word	0x08002805
 80027b8:	08002817 	.word	0x08002817
 80027bc:	08002859 	.word	0x08002859
 80027c0:	0800285f 	.word	0x0800285f
 80027c4:	0800285f 	.word	0x0800285f
 80027c8:	0800285f 	.word	0x0800285f
 80027cc:	0800285f 	.word	0x0800285f
 80027d0:	0800285f 	.word	0x0800285f
 80027d4:	0800285f 	.word	0x0800285f
 80027d8:	0800285f 	.word	0x0800285f
 80027dc:	0800285f 	.word	0x0800285f
 80027e0:	0800285f 	.word	0x0800285f
 80027e4:	0800285f 	.word	0x0800285f
 80027e8:	0800285f 	.word	0x0800285f
 80027ec:	0800285f 	.word	0x0800285f
 80027f0:	0800285f 	.word	0x0800285f
 80027f4:	0800280d 	.word	0x0800280d
 80027f8:	08002821 	.word	0x08002821
 80027fc:	4a79      	ldr	r2, [pc, #484]	; (80029e4 <HAL_GPIO_Init+0x2b4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002802:	e02c      	b.n	800285e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	623b      	str	r3, [r7, #32]
          break;
 800280a:	e029      	b.n	8002860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	3304      	adds	r3, #4
 8002812:	623b      	str	r3, [r7, #32]
          break;
 8002814:	e024      	b.n	8002860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	3308      	adds	r3, #8
 800281c:	623b      	str	r3, [r7, #32]
          break;
 800281e:	e01f      	b.n	8002860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	330c      	adds	r3, #12
 8002826:	623b      	str	r3, [r7, #32]
          break;
 8002828:	e01a      	b.n	8002860 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002832:	2304      	movs	r3, #4
 8002834:	623b      	str	r3, [r7, #32]
          break;
 8002836:	e013      	b.n	8002860 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002840:	2308      	movs	r3, #8
 8002842:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	611a      	str	r2, [r3, #16]
          break;
 800284a:	e009      	b.n	8002860 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800284c:	2308      	movs	r3, #8
 800284e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	615a      	str	r2, [r3, #20]
          break;
 8002856:	e003      	b.n	8002860 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002858:	2300      	movs	r3, #0
 800285a:	623b      	str	r3, [r7, #32]
          break;
 800285c:	e000      	b.n	8002860 <HAL_GPIO_Init+0x130>
          break;
 800285e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2bff      	cmp	r3, #255	; 0xff
 8002864:	d801      	bhi.n	800286a <HAL_GPIO_Init+0x13a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	e001      	b.n	800286e <HAL_GPIO_Init+0x13e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3304      	adds	r3, #4
 800286e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2bff      	cmp	r3, #255	; 0xff
 8002874:	d802      	bhi.n	800287c <HAL_GPIO_Init+0x14c>
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	e002      	b.n	8002882 <HAL_GPIO_Init+0x152>
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	3b08      	subs	r3, #8
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	210f      	movs	r1, #15
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	401a      	ands	r2, r3
 8002894:	6a39      	ldr	r1, [r7, #32]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	431a      	orrs	r2, r3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80b1 	beq.w	8002a12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028b0:	4b4d      	ldr	r3, [pc, #308]	; (80029e8 <HAL_GPIO_Init+0x2b8>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	4a4c      	ldr	r2, [pc, #304]	; (80029e8 <HAL_GPIO_Init+0x2b8>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6193      	str	r3, [r2, #24]
 80028bc:	4b4a      	ldr	r3, [pc, #296]	; (80029e8 <HAL_GPIO_Init+0x2b8>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028c8:	4a48      	ldr	r2, [pc, #288]	; (80029ec <HAL_GPIO_Init+0x2bc>)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	220f      	movs	r2, #15
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a40      	ldr	r2, [pc, #256]	; (80029f0 <HAL_GPIO_Init+0x2c0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d013      	beq.n	800291c <HAL_GPIO_Init+0x1ec>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3f      	ldr	r2, [pc, #252]	; (80029f4 <HAL_GPIO_Init+0x2c4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00d      	beq.n	8002918 <HAL_GPIO_Init+0x1e8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3e      	ldr	r2, [pc, #248]	; (80029f8 <HAL_GPIO_Init+0x2c8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d007      	beq.n	8002914 <HAL_GPIO_Init+0x1e4>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a3d      	ldr	r2, [pc, #244]	; (80029fc <HAL_GPIO_Init+0x2cc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d101      	bne.n	8002910 <HAL_GPIO_Init+0x1e0>
 800290c:	2303      	movs	r3, #3
 800290e:	e006      	b.n	800291e <HAL_GPIO_Init+0x1ee>
 8002910:	2304      	movs	r3, #4
 8002912:	e004      	b.n	800291e <HAL_GPIO_Init+0x1ee>
 8002914:	2302      	movs	r3, #2
 8002916:	e002      	b.n	800291e <HAL_GPIO_Init+0x1ee>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_GPIO_Init+0x1ee>
 800291c:	2300      	movs	r3, #0
 800291e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002920:	f002 0203 	and.w	r2, r2, #3
 8002924:	0092      	lsls	r2, r2, #2
 8002926:	4093      	lsls	r3, r2
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800292e:	492f      	ldr	r1, [pc, #188]	; (80029ec <HAL_GPIO_Init+0x2bc>)
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	3302      	adds	r3, #2
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002948:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	492c      	ldr	r1, [pc, #176]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	43db      	mvns	r3, r3
 800295e:	4928      	ldr	r1, [pc, #160]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 8002960:	4013      	ands	r3, r2
 8002962:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d006      	beq.n	800297e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002970:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	4922      	ldr	r1, [pc, #136]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	60cb      	str	r3, [r1, #12]
 800297c:	e006      	b.n	800298c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	43db      	mvns	r3, r3
 8002986:	491e      	ldr	r1, [pc, #120]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 8002988:	4013      	ands	r3, r2
 800298a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4918      	ldr	r1, [pc, #96]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
 80029a4:	e006      	b.n	80029b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	4914      	ldr	r1, [pc, #80]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d021      	beq.n	8002a04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	490e      	ldr	r1, [pc, #56]	; (8002a00 <HAL_GPIO_Init+0x2d0>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
 80029cc:	e021      	b.n	8002a12 <HAL_GPIO_Init+0x2e2>
 80029ce:	bf00      	nop
 80029d0:	10320000 	.word	0x10320000
 80029d4:	10310000 	.word	0x10310000
 80029d8:	10220000 	.word	0x10220000
 80029dc:	10210000 	.word	0x10210000
 80029e0:	10120000 	.word	0x10120000
 80029e4:	10110000 	.word	0x10110000
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40010000 	.word	0x40010000
 80029f0:	40010800 	.word	0x40010800
 80029f4:	40010c00 	.word	0x40010c00
 80029f8:	40011000 	.word	0x40011000
 80029fc:	40011400 	.word	0x40011400
 8002a00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_GPIO_Init+0x304>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	4909      	ldr	r1, [pc, #36]	; (8002a34 <HAL_GPIO_Init+0x304>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	3301      	adds	r3, #1
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f47f ae8e 	bne.w	8002744 <HAL_GPIO_Init+0x14>
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	372c      	adds	r7, #44	; 0x2c
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	40010400 	.word	0x40010400

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e272      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8087 	beq.w	8002b66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a58:	4b92      	ldr	r3, [pc, #584]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d00c      	beq.n	8002a7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a64:	4b8f      	ldr	r3, [pc, #572]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d112      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5e>
 8002a70:	4b8c      	ldr	r3, [pc, #560]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d10b      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7e:	4b89      	ldr	r3, [pc, #548]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d06c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x12c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d168      	bne.n	8002b64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e24c      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x76>
 8002aa0:	4b80      	ldr	r3, [pc, #512]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a7f      	ldr	r2, [pc, #508]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	e02e      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x98>
 8002ab6:	4b7b      	ldr	r3, [pc, #492]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7a      	ldr	r2, [pc, #488]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b78      	ldr	r3, [pc, #480]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a77      	ldr	r2, [pc, #476]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e01d      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0xbc>
 8002ada:	4b72      	ldr	r3, [pc, #456]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a71      	ldr	r2, [pc, #452]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b6f      	ldr	r3, [pc, #444]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6e      	ldr	r2, [pc, #440]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002af4:	4b6b      	ldr	r3, [pc, #428]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6a      	ldr	r2, [pc, #424]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a67      	ldr	r2, [pc, #412]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff fc42 	bl	800239c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff fc3e 	bl	800239c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e200      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0xe4>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff fc2e 	bl	800239c <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7ff fc2a 	bl	800239c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e1ec      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x10c>
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d063      	beq.n	8002c3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b72:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b7e:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d11c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x18c>
 8002b8a:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d116      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_RCC_OscConfig+0x176>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e1c0      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4939      	ldr	r1, [pc, #228]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc2:	e03a      	b.n	8002c3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bcc:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_RCC_OscConfig+0x270>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7ff fbe3 	bl	800239c <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bda:	f7ff fbdf 	bl	800239c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e1a1      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4927      	ldr	r1, [pc, #156]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
 8002c0c:	e015      	b.n	8002c3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0e:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <HAL_RCC_OscConfig+0x270>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fbc2 	bl	800239c <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1c:	f7ff fbbe 	bl	800239c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e180      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d03a      	beq.n	8002cbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d019      	beq.n	8002c82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_RCC_OscConfig+0x274>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c54:	f7ff fba2 	bl	800239c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7ff fb9e 	bl	800239c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e160      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f000 face 	bl	800321c <RCC_Delay>
 8002c80:	e01c      	b.n	8002cbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_RCC_OscConfig+0x274>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c88:	f7ff fb88 	bl	800239c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8e:	e00f      	b.n	8002cb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c90:	f7ff fb84 	bl	800239c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d908      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e146      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	42420000 	.word	0x42420000
 8002cac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	4b92      	ldr	r3, [pc, #584]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e9      	bne.n	8002c90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80a6 	beq.w	8002e16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cce:	4b8b      	ldr	r3, [pc, #556]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10d      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4a87      	ldr	r2, [pc, #540]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	61d3      	str	r3, [r2, #28]
 8002ce6:	4b85      	ldr	r3, [pc, #532]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <HAL_RCC_OscConfig+0x4c8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d118      	bne.n	8002d34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d02:	4b7f      	ldr	r3, [pc, #508]	; (8002f00 <HAL_RCC_OscConfig+0x4c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a7e      	ldr	r2, [pc, #504]	; (8002f00 <HAL_RCC_OscConfig+0x4c8>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff fb45 	bl	800239c <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d16:	f7ff fb41 	bl	800239c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b64      	cmp	r3, #100	; 0x64
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e103      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	4b75      	ldr	r3, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x4c8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x312>
 8002d3c:	4b6f      	ldr	r3, [pc, #444]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4a6e      	ldr	r2, [pc, #440]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6213      	str	r3, [r2, #32]
 8002d48:	e02d      	b.n	8002da6 <HAL_RCC_OscConfig+0x36e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x334>
 8002d52:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a69      	ldr	r2, [pc, #420]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	6213      	str	r3, [r2, #32]
 8002d5e:	4b67      	ldr	r3, [pc, #412]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a66      	ldr	r2, [pc, #408]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	f023 0304 	bic.w	r3, r3, #4
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	e01c      	b.n	8002da6 <HAL_RCC_OscConfig+0x36e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d10c      	bne.n	8002d8e <HAL_RCC_OscConfig+0x356>
 8002d74:	4b61      	ldr	r3, [pc, #388]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a60      	ldr	r2, [pc, #384]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	f043 0304 	orr.w	r3, r3, #4
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	4b5e      	ldr	r3, [pc, #376]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4a5d      	ldr	r2, [pc, #372]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6213      	str	r3, [r2, #32]
 8002d8c:	e00b      	b.n	8002da6 <HAL_RCC_OscConfig+0x36e>
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a5a      	ldr	r2, [pc, #360]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	6213      	str	r3, [r2, #32]
 8002d9a:	4b58      	ldr	r3, [pc, #352]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a57      	ldr	r2, [pc, #348]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d015      	beq.n	8002dda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7ff faf5 	bl	800239c <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7ff faf1 	bl	800239c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0b1      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ee      	beq.n	8002db6 <HAL_RCC_OscConfig+0x37e>
 8002dd8:	e014      	b.n	8002e04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7ff fadf 	bl	800239c <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7ff fadb 	bl	800239c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e09b      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df8:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ee      	bne.n	8002de2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d105      	bne.n	8002e16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0a:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4a3b      	ldr	r2, [pc, #236]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8087 	beq.w	8002f2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e20:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d061      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d146      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e34:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <HAL_RCC_OscConfig+0x4cc>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7ff faaf 	bl	800239c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7ff faab 	bl	800239c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e06d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f0      	bne.n	8002e42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e68:	d108      	bne.n	8002e7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	4921      	ldr	r1, [pc, #132]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a19      	ldr	r1, [r3, #32]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	491b      	ldr	r1, [pc, #108]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x4cc>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7ff fa7f 	bl	800239c <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7ff fa7b 	bl	800239c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e03d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x46a>
 8002ec0:	e035      	b.n	8002f2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7ff fa68 	bl	800239c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7ff fa64 	bl	800239c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e026      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x498>
 8002eee:	e01e      	b.n	8002f2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e019      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_OscConfig+0x500>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000

08002f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0d0      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b6a      	ldr	r3, [pc, #424]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d910      	bls.n	8002f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b67      	ldr	r3, [pc, #412]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 0207 	bic.w	r2, r3, #7
 8002f66:	4965      	ldr	r1, [pc, #404]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b63      	ldr	r3, [pc, #396]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0b8      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f98:	4b59      	ldr	r3, [pc, #356]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a58      	ldr	r2, [pc, #352]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb0:	4b53      	ldr	r3, [pc, #332]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b50      	ldr	r3, [pc, #320]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	494d      	ldr	r1, [pc, #308]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d040      	beq.n	800305c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b47      	ldr	r3, [pc, #284]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d115      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e07f      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	4b41      	ldr	r3, [pc, #260]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e073      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06b      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301a:	4b39      	ldr	r3, [pc, #228]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4936      	ldr	r1, [pc, #216]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800302c:	f7ff f9b6 	bl	800239c <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	e00a      	b.n	800304a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003034:	f7ff f9b2 	bl	800239c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e053      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 020c 	and.w	r2, r3, #12
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	429a      	cmp	r2, r3
 800305a:	d1eb      	bne.n	8003034 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800305c:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d210      	bcs.n	800308c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b24      	ldr	r3, [pc, #144]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 0207 	bic.w	r2, r3, #7
 8003072:	4922      	ldr	r1, [pc, #136]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e032      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4916      	ldr	r1, [pc, #88]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	490e      	ldr	r1, [pc, #56]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ca:	f000 f821 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	490a      	ldr	r1, [pc, #40]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 80030dc:	5ccb      	ldrb	r3, [r1, r3]
 80030de:	fa22 f303 	lsr.w	r3, r2, r3
 80030e2:	4a09      	ldr	r2, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1cc>)
 80030e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_RCC_ClockConfig+0x1d0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff f914 	bl	8002318 <HAL_InitTick>

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40022000 	.word	0x40022000
 8003100:	40021000 	.word	0x40021000
 8003104:	0800a130 	.word	0x0800a130
 8003108:	20000000 	.word	0x20000000
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800312a:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b04      	cmp	r3, #4
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x30>
 800313a:	2b08      	cmp	r3, #8
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x36>
 800313e:	e027      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003142:	613b      	str	r3, [r7, #16]
      break;
 8003144:	e027      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	0c9b      	lsrs	r3, r3, #18
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003150:	5cd3      	ldrb	r3, [r2, r3]
 8003152:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d010      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0c5b      	lsrs	r3, r3, #17
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	4a11      	ldr	r2, [pc, #68]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800316a:	5cd3      	ldrb	r3, [r2, r3]
 800316c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003172:	fb03 f202 	mul.w	r2, r3, r2
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e004      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a0c      	ldr	r2, [pc, #48]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003184:	fb02 f303 	mul.w	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	613b      	str	r3, [r7, #16]
      break;
 800318e:	e002      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003192:	613b      	str	r3, [r7, #16]
      break;
 8003194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003196:	693b      	ldr	r3, [r7, #16]
}
 8003198:	4618      	mov	r0, r3
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	007a1200 	.word	0x007a1200
 80031ac:	0800a148 	.word	0x0800a148
 80031b0:	0800a158 	.word	0x0800a158
 80031b4:	003d0900 	.word	0x003d0900

080031b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031bc:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	20000000 	.word	0x20000000

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d0:	f7ff fff2 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4903      	ldr	r1, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	0800a140 	.word	0x0800a140

080031f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f8:	f7ff ffde 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	0adb      	lsrs	r3, r3, #11
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4903      	ldr	r1, [pc, #12]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	0800a140 	.word	0x0800a140

0800321c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <RCC_Delay+0x34>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <RCC_Delay+0x38>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0a5b      	lsrs	r3, r3, #9
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003238:	bf00      	nop
  }
  while (Delay --);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1e5a      	subs	r2, r3, #1
 800323e:	60fa      	str	r2, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f9      	bne.n	8003238 <RCC_Delay+0x1c>
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	20000000 	.word	0x20000000
 8003254:	10624dd3 	.word	0x10624dd3

08003258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e041      	b.n	80032ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fb9c 	bl	80019bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f000 fd58 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d001      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e03a      	b.n	8003386 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a18      	ldr	r2, [pc, #96]	; (8003390 <HAL_TIM_Base_Start_IT+0x98>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00e      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x58>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333a:	d009      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x58>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a14      	ldr	r2, [pc, #80]	; (8003394 <HAL_TIM_Base_Start_IT+0x9c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x58>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a13      	ldr	r2, [pc, #76]	; (8003398 <HAL_TIM_Base_Start_IT+0xa0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d111      	bne.n	8003374 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d010      	beq.n	8003384 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003372:	e007      	b.n	8003384 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800

0800339c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e041      	b.n	8003432 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fe fade 	bl	8001984 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f000 fcb6 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <HAL_TIM_PWM_Start+0x24>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	bf14      	ite	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2300      	moveq	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e022      	b.n	80034a6 <HAL_TIM_PWM_Start+0x6a>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b04      	cmp	r3, #4
 8003464:	d109      	bne.n	800347a <HAL_TIM_PWM_Start+0x3e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	e015      	b.n	80034a6 <HAL_TIM_PWM_Start+0x6a>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b08      	cmp	r3, #8
 800347e:	d109      	bne.n	8003494 <HAL_TIM_PWM_Start+0x58>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e008      	b.n	80034a6 <HAL_TIM_PWM_Start+0x6a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e05e      	b.n	800356c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d104      	bne.n	80034be <HAL_TIM_PWM_Start+0x82>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034bc:	e013      	b.n	80034e6 <HAL_TIM_PWM_Start+0xaa>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d104      	bne.n	80034ce <HAL_TIM_PWM_Start+0x92>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034cc:	e00b      	b.n	80034e6 <HAL_TIM_PWM_Start+0xaa>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d104      	bne.n	80034de <HAL_TIM_PWM_Start+0xa2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034dc:	e003      	b.n	80034e6 <HAL_TIM_PWM_Start+0xaa>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2201      	movs	r2, #1
 80034ec:	6839      	ldr	r1, [r7, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 feac 	bl	800424c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <HAL_TIM_PWM_Start+0x138>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d107      	bne.n	800350e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a18      	ldr	r2, [pc, #96]	; (8003574 <HAL_TIM_PWM_Start+0x138>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00e      	beq.n	8003536 <HAL_TIM_PWM_Start+0xfa>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003520:	d009      	beq.n	8003536 <HAL_TIM_PWM_Start+0xfa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_TIM_PWM_Start+0x13c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_TIM_PWM_Start+0xfa>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a12      	ldr	r2, [pc, #72]	; (800357c <HAL_TIM_PWM_Start+0x140>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d111      	bne.n	800355a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b06      	cmp	r3, #6
 8003546:	d010      	beq.n	800356a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003558:	e007      	b.n	800356a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800

08003580 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e093      	b.n	80036bc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fe fa2d 	bl	8001a08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035c4:	f023 0307 	bic.w	r3, r3, #7
 80035c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f000 fbb9 	bl	8003d4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	4313      	orrs	r3, r2
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003620:	f023 030c 	bic.w	r3, r3, #12
 8003624:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800362c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4313      	orrs	r3, r2
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	011a      	lsls	r2, r3, #4
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	031b      	lsls	r3, r3, #12
 8003650:	4313      	orrs	r3, r2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800365e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	4313      	orrs	r3, r2
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d110      	bne.n	8003716 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d102      	bne.n	8003700 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80036fa:	7b7b      	ldrb	r3, [r7, #13]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d001      	beq.n	8003704 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e069      	b.n	80037d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003714:	e031      	b.n	800377a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d110      	bne.n	800373e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800371c:	7bbb      	ldrb	r3, [r7, #14]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d102      	bne.n	8003728 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003722:	7b3b      	ldrb	r3, [r7, #12]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d001      	beq.n	800372c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e055      	b.n	80037d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800373c:	e01d      	b.n	800377a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d108      	bne.n	8003756 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003744:	7bbb      	ldrb	r3, [r7, #14]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d105      	bne.n	8003756 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800374a:	7b7b      	ldrb	r3, [r7, #13]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d102      	bne.n	8003756 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003750:	7b3b      	ldrb	r3, [r7, #12]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d001      	beq.n	800375a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e03e      	b.n	80037d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_TIM_Encoder_Start+0xc4>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b04      	cmp	r3, #4
 8003784:	d008      	beq.n	8003798 <HAL_TIM_Encoder_Start+0xd4>
 8003786:	e00f      	b.n	80037a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2201      	movs	r2, #1
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fd5b 	bl	800424c <TIM_CCxChannelCmd>
      break;
 8003796:	e016      	b.n	80037c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2201      	movs	r2, #1
 800379e:	2104      	movs	r1, #4
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fd53 	bl	800424c <TIM_CCxChannelCmd>
      break;
 80037a6:	e00e      	b.n	80037c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2201      	movs	r2, #1
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fd4b 	bl	800424c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2201      	movs	r2, #1
 80037bc:	2104      	movs	r1, #4
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fd44 	bl	800424c <TIM_CCxChannelCmd>
      break;
 80037c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0202 	mvn.w	r2, #2
 800380c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa76 	bl	8003d14 <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa69 	bl	8003d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fa78 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b04      	cmp	r3, #4
 8003848:	d122      	bne.n	8003890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b04      	cmp	r3, #4
 8003856:	d11b      	bne.n	8003890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0204 	mvn.w	r2, #4
 8003860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fa4c 	bl	8003d14 <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa3f 	bl	8003d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fa4e 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b08      	cmp	r3, #8
 800389c:	d122      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d11b      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0208 	mvn.w	r2, #8
 80038b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2204      	movs	r2, #4
 80038ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa22 	bl	8003d14 <HAL_TIM_IC_CaptureCallback>
 80038d0:	e005      	b.n	80038de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fa15 	bl	8003d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fa24 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d122      	bne.n	8003938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d11b      	bne.n	8003938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0210 	mvn.w	r2, #16
 8003908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2208      	movs	r2, #8
 800390e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9f8 	bl	8003d14 <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9eb 	bl	8003d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f9fa 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b01      	cmp	r3, #1
 8003944:	d10e      	bne.n	8003964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b01      	cmp	r3, #1
 8003952:	d107      	bne.n	8003964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0201 	mvn.w	r2, #1
 800395c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fd7c 	bl	800145c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396e:	2b80      	cmp	r3, #128	; 0x80
 8003970:	d10e      	bne.n	8003990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	2b80      	cmp	r3, #128	; 0x80
 800397e:	d107      	bne.n	8003990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fce9 	bl	8004362 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d10e      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d107      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f9be 	bl	8003d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d10e      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d107      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0220 	mvn.w	r2, #32
 80039e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fcb4 	bl	8004350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e0ae      	b.n	8003b6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b0c      	cmp	r3, #12
 8003a1a:	f200 809f 	bhi.w	8003b5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a1e:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a59 	.word	0x08003a59
 8003a28:	08003b5d 	.word	0x08003b5d
 8003a2c:	08003b5d 	.word	0x08003b5d
 8003a30:	08003b5d 	.word	0x08003b5d
 8003a34:	08003a99 	.word	0x08003a99
 8003a38:	08003b5d 	.word	0x08003b5d
 8003a3c:	08003b5d 	.word	0x08003b5d
 8003a40:	08003b5d 	.word	0x08003b5d
 8003a44:	08003adb 	.word	0x08003adb
 8003a48:	08003b5d 	.word	0x08003b5d
 8003a4c:	08003b5d 	.word	0x08003b5d
 8003a50:	08003b5d 	.word	0x08003b5d
 8003a54:	08003b1b 	.word	0x08003b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f9d6 	bl	8003e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0208 	orr.w	r2, r2, #8
 8003a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0204 	bic.w	r2, r2, #4
 8003a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6999      	ldr	r1, [r3, #24]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	619a      	str	r2, [r3, #24]
      break;
 8003a96:	e064      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fa1c 	bl	8003edc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6999      	ldr	r1, [r3, #24]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	021a      	lsls	r2, r3, #8
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	619a      	str	r2, [r3, #24]
      break;
 8003ad8:	e043      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fa65 	bl	8003fb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0208 	orr.w	r2, r2, #8
 8003af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0204 	bic.w	r2, r2, #4
 8003b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69d9      	ldr	r1, [r3, #28]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	61da      	str	r2, [r3, #28]
      break;
 8003b18:	e023      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 faaf 	bl	8004084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69d9      	ldr	r1, [r3, #28]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	021a      	lsls	r2, r3, #8
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	61da      	str	r2, [r3, #28]
      break;
 8003b5a:	e002      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_TIM_ConfigClockSource+0x1c>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e0b4      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x186>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc8:	d03e      	beq.n	8003c48 <HAL_TIM_ConfigClockSource+0xd4>
 8003bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bce:	f200 8087 	bhi.w	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd6:	f000 8086 	beq.w	8003ce6 <HAL_TIM_ConfigClockSource+0x172>
 8003bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bde:	d87f      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b70      	cmp	r3, #112	; 0x70
 8003be2:	d01a      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0xa6>
 8003be4:	2b70      	cmp	r3, #112	; 0x70
 8003be6:	d87b      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b60      	cmp	r3, #96	; 0x60
 8003bea:	d050      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x11a>
 8003bec:	2b60      	cmp	r3, #96	; 0x60
 8003bee:	d877      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf0:	2b50      	cmp	r3, #80	; 0x50
 8003bf2:	d03c      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0xfa>
 8003bf4:	2b50      	cmp	r3, #80	; 0x50
 8003bf6:	d873      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf8:	2b40      	cmp	r3, #64	; 0x40
 8003bfa:	d058      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x13a>
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	d86f      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c00:	2b30      	cmp	r3, #48	; 0x30
 8003c02:	d064      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x15a>
 8003c04:	2b30      	cmp	r3, #48	; 0x30
 8003c06:	d86b      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d060      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x15a>
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d867      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d05c      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x15a>
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d05a      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x15a>
 8003c18:	e062      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c2a:	f000 faf0 	bl	800420e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	609a      	str	r2, [r3, #8]
      break;
 8003c46:	e04f      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c58:	f000 fad9 	bl	800420e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c6a:	609a      	str	r2, [r3, #8]
      break;
 8003c6c:	e03c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f000 fa50 	bl	8004120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2150      	movs	r1, #80	; 0x50
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 faa7 	bl	80041da <TIM_ITRx_SetConfig>
      break;
 8003c8c:	e02c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f000 fa6e 	bl	800417c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2160      	movs	r1, #96	; 0x60
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fa97 	bl	80041da <TIM_ITRx_SetConfig>
      break;
 8003cac:	e01c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f000 fa30 	bl	8004120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2140      	movs	r1, #64	; 0x40
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fa87 	bl	80041da <TIM_ITRx_SetConfig>
      break;
 8003ccc:	e00c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f000 fa7e 	bl	80041da <TIM_ITRx_SetConfig>
      break;
 8003cde:	e003      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce4:	e000      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr
	...

08003d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <TIM_Base_SetConfig+0xb8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <TIM_Base_SetConfig+0x30>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d007      	beq.n	8003d7c <TIM_Base_SetConfig+0x30>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a26      	ldr	r2, [pc, #152]	; (8003e08 <TIM_Base_SetConfig+0xbc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_Base_SetConfig+0x30>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <TIM_Base_SetConfig+0xc0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d108      	bne.n	8003d8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <TIM_Base_SetConfig+0xb8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00b      	beq.n	8003dae <TIM_Base_SetConfig+0x62>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d007      	beq.n	8003dae <TIM_Base_SetConfig+0x62>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <TIM_Base_SetConfig+0xbc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d003      	beq.n	8003dae <TIM_Base_SetConfig+0x62>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <TIM_Base_SetConfig+0xc0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a07      	ldr	r2, [pc, #28]	; (8003e04 <TIM_Base_SetConfig+0xb8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d103      	bne.n	8003df4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	615a      	str	r2, [r3, #20]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800

08003e10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f023 0201 	bic.w	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0303 	bic.w	r3, r3, #3
 8003e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f023 0302 	bic.w	r3, r3, #2
 8003e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <TIM_OC1_SetConfig+0xc8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10c      	bne.n	8003e86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0308 	bic.w	r3, r3, #8
 8003e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f023 0304 	bic.w	r3, r3, #4
 8003e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <TIM_OC1_SetConfig+0xc8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d111      	bne.n	8003eb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	621a      	str	r2, [r3, #32]
}
 8003ecc:	bf00      	nop
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40012c00 	.word	0x40012c00

08003edc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f023 0210 	bic.w	r2, r3, #16
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f023 0320 	bic.w	r3, r3, #32
 8003f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a1d      	ldr	r2, [pc, #116]	; (8003fac <TIM_OC2_SetConfig+0xd0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d10d      	bne.n	8003f58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a14      	ldr	r2, [pc, #80]	; (8003fac <TIM_OC2_SetConfig+0xd0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d113      	bne.n	8003f88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr
 8003fac:	40012c00 	.word	0x40012c00

08003fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <TIM_OC3_SetConfig+0xd0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10d      	bne.n	800402a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a14      	ldr	r2, [pc, #80]	; (8004080 <TIM_OC3_SetConfig+0xd0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d113      	bne.n	800405a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	621a      	str	r2, [r3, #32]
}
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40012c00 	.word	0x40012c00

08004084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	031b      	lsls	r3, r3, #12
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a0f      	ldr	r2, [pc, #60]	; (800411c <TIM_OC4_SetConfig+0x98>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d109      	bne.n	80040f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	019b      	lsls	r3, r3, #6
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr
 800411c:	40012c00 	.word	0x40012c00

08004120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f023 0201 	bic.w	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800414a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f023 030a 	bic.w	r3, r3, #10
 800415c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	621a      	str	r2, [r3, #32]
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f023 0210 	bic.w	r2, r3, #16
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	031b      	lsls	r3, r3, #12
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	621a      	str	r2, [r3, #32]
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr

080041da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041da:	b480      	push	{r7}
 80041dc:	b085      	sub	sp, #20
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f043 0307 	orr.w	r3, r3, #7
 80041fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	609a      	str	r2, [r3, #8]
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800420e:	b480      	push	{r7}
 8004210:	b087      	sub	sp, #28
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004228:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	021a      	lsls	r2, r3, #8
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	431a      	orrs	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4313      	orrs	r3, r2
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	609a      	str	r2, [r3, #8]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2201      	movs	r2, #1
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	43db      	mvns	r3, r3
 800426e:	401a      	ands	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	fa01 f303 	lsl.w	r3, r1, r3
 8004284:	431a      	orrs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e046      	b.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a16      	ldr	r2, [pc, #88]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f8:	d009      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a12      	ldr	r2, [pc, #72]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a10      	ldr	r2, [pc, #64]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10c      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	4313      	orrs	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800

08004350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr

08004362 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e042      	b.n	800440c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd fbcc 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2224      	movs	r2, #36	; 0x24
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fdc5 	bl	8004f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b20      	cmp	r3, #32
 8004432:	d16d      	bne.n	8004510 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_UART_Transmit+0x2c>
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e066      	b.n	8004512 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2221      	movs	r2, #33	; 0x21
 800444e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004452:	f7fd ffa3 	bl	800239c <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	88fa      	ldrh	r2, [r7, #6]
 8004462:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446c:	d108      	bne.n	8004480 <HAL_UART_Transmit+0x6c>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	e003      	b.n	8004488 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004484:	2300      	movs	r3, #0
 8004486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004488:	e02a      	b.n	80044e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fb14 	bl	8004ac2 <UART_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e036      	b.n	8004512 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	3302      	adds	r3, #2
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	e007      	b.n	80044d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	3301      	adds	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1cf      	bne.n	800448a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2140      	movs	r1, #64	; 0x40
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fae4 	bl	8004ac2 <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e006      	b.n	8004512 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e000      	b.n	8004512 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	4613      	mov	r3, r2
 8004526:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b20      	cmp	r3, #32
 8004532:	d112      	bne.n	800455a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_UART_Receive_IT+0x26>
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e00b      	b.n	800455c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	461a      	mov	r2, r3
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fb24 	bl	8004b9e <UART_Start_Receive_IT>
 8004556:	4603      	mov	r3, r0
 8004558:	e000      	b.n	800455c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
  }
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b0ba      	sub	sp, #232	; 0xe8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004590:	2300      	movs	r3, #0
 8004592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10f      	bne.n	80045ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_UART_IRQHandler+0x66>
 80045b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fc01 	bl	8004dca <UART_Receive_IT>
      return;
 80045c8:	e25b      	b.n	8004a82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80de 	beq.w	8004790 <HAL_UART_IRQHandler+0x22c>
 80045d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80d1 	beq.w	8004790 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_UART_IRQHandler+0xae>
 80045fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	f043 0201 	orr.w	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_UART_IRQHandler+0xd2>
 800461e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	f043 0202 	orr.w	r2, r3, #2
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <HAL_UART_IRQHandler+0xf6>
 8004642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f043 0204 	orr.w	r2, r3, #4
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d011      	beq.n	800468a <HAL_UART_IRQHandler+0x126>
 8004666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	f043 0208 	orr.w	r2, r3, #8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 81f2 	beq.w	8004a78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_UART_IRQHandler+0x14e>
 80046a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fb8c 	bl	8004dca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d103      	bne.n	80046de <HAL_UART_IRQHandler+0x17a>
 80046d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04f      	beq.n	800477e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fa96 	bl	8004c10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d041      	beq.n	8004776 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004708:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800470c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3314      	adds	r3, #20
 800471a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800471e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800472a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1d9      	bne.n	80046f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d013      	beq.n	800476e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	4a7e      	ldr	r2, [pc, #504]	; (8004944 <HAL_UART_IRQHandler+0x3e0>)
 800474c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004752:	4618      	mov	r0, r3
 8004754:	f7fd ff74 	bl	8002640 <HAL_DMA_Abort_IT>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004768:	4610      	mov	r0, r2
 800476a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	e00e      	b.n	800478c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f993 	bl	8004a9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	e00a      	b.n	800478c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f98f 	bl	8004a9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477c:	e006      	b.n	800478c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f98b 	bl	8004a9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800478a:	e175      	b.n	8004a78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478c:	bf00      	nop
    return;
 800478e:	e173      	b.n	8004a78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	2b01      	cmp	r3, #1
 8004796:	f040 814f 	bne.w	8004a38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800479a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 8148 	beq.w	8004a38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8141 	beq.w	8004a38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80b6 	beq.w	8004948 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8145 	beq.w	8004a7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047fa:	429a      	cmp	r2, r3
 80047fc:	f080 813e 	bcs.w	8004a7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004806:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	2b20      	cmp	r3, #32
 8004810:	f000 8088 	beq.w	8004924 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800482a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800482e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004840:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004844:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800484c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1d9      	bne.n	8004814 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3314      	adds	r3, #20
 8004866:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3314      	adds	r3, #20
 8004880:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004884:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004888:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800488c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e1      	bne.n	8004860 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3314      	adds	r3, #20
 80048a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3314      	adds	r3, #20
 80048bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e3      	bne.n	800489c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f4:	f023 0310 	bic.w	r3, r3, #16
 80048f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004906:	65ba      	str	r2, [r7, #88]	; 0x58
 8004908:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800490c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e3      	bne.n	80048e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	4618      	mov	r0, r3
 8004920:	f7fd fe53 	bl	80025ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004932:	b29b      	uxth	r3, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	b29b      	uxth	r3, r3
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8b6 	bl	8004aac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004940:	e09c      	b.n	8004a7c <HAL_UART_IRQHandler+0x518>
 8004942:	bf00      	nop
 8004944:	08004cd5 	.word	0x08004cd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004950:	b29b      	uxth	r3, r3
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 808e 	beq.w	8004a80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8089 	beq.w	8004a80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800497e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004984:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004992:	647a      	str	r2, [r7, #68]	; 0x44
 8004994:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e3      	bne.n	800496e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3314      	adds	r3, #20
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	623b      	str	r3, [r7, #32]
   return(result);
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3314      	adds	r3, #20
 80049c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049ca:	633a      	str	r2, [r7, #48]	; 0x30
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e3      	bne.n	80049a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0310 	bic.w	r3, r3, #16
 8004a02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	330c      	adds	r3, #12
 8004a0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a10:	61fa      	str	r2, [r7, #28]
 8004a12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	69b9      	ldr	r1, [r7, #24]
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e3      	bne.n	80049ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f83b 	bl	8004aac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a36:	e023      	b.n	8004a80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <HAL_UART_IRQHandler+0x4f4>
 8004a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f953 	bl	8004cfc <UART_Transmit_IT>
    return;
 8004a56:	e014      	b.n	8004a82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <HAL_UART_IRQHandler+0x51e>
 8004a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f992 	bl	8004d9a <UART_EndTransmit_IT>
    return;
 8004a76:	e004      	b.n	8004a82 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a78:	bf00      	nop
 8004a7a:	e002      	b.n	8004a82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a7c:	bf00      	nop
 8004a7e:	e000      	b.n	8004a82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a80:	bf00      	nop
  }
}
 8004a82:	37e8      	adds	r7, #232	; 0xe8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr

08004a9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr

08004ac2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b090      	sub	sp, #64	; 0x40
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad2:	e050      	b.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d04c      	beq.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ae2:	f7fd fc5b 	bl	800239c <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d241      	bcs.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b12:	637a      	str	r2, [r7, #52]	; 0x34
 8004b14:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e5      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	613b      	str	r3, [r7, #16]
   return(result);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f023 0301 	bic.w	r3, r3, #1
 8004b3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3314      	adds	r3, #20
 8004b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b46:	623a      	str	r2, [r7, #32]
 8004b48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	69f9      	ldr	r1, [r7, #28]
 8004b4c:	6a3a      	ldr	r2, [r7, #32]
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e5      	bne.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e00f      	b.n	8004b96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	bf0c      	ite	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	2300      	movne	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d09f      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3740      	adds	r7, #64	; 0x40
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	88fa      	ldrh	r2, [r7, #6]
 8004bb6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2222      	movs	r2, #34	; 0x22
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0220 	orr.w	r2, r2, #32
 8004c02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b095      	sub	sp, #84	; 0x54
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c38:	643a      	str	r2, [r7, #64]	; 0x40
 8004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e5      	bne.n	8004c18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3314      	adds	r3, #20
 8004c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3314      	adds	r3, #20
 8004c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e5      	bne.n	8004c4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d119      	bne.n	8004cbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f023 0310 	bic.w	r3, r3, #16
 8004c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ca8:	61ba      	str	r2, [r7, #24]
 8004caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6979      	ldr	r1, [r7, #20]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cca:	bf00      	nop
 8004ccc:	3754      	adds	r7, #84	; 0x54
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff fed3 	bl	8004a9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf4:	bf00      	nop
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b21      	cmp	r3, #33	; 0x21
 8004d0e:	d13e      	bne.n	8004d8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d18:	d114      	bne.n	8004d44 <UART_Transmit_IT+0x48>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d110      	bne.n	8004d44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	1c9a      	adds	r2, r3, #2
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	621a      	str	r2, [r3, #32]
 8004d42:	e008      	b.n	8004d56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	1c59      	adds	r1, r3, #1
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6211      	str	r1, [r2, #32]
 8004d4e:	781a      	ldrb	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	4619      	mov	r1, r3
 8004d64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10f      	bne.n	8004d8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e000      	b.n	8004d90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
  }
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff fe64 	bl	8004a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b08c      	sub	sp, #48	; 0x30
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b22      	cmp	r3, #34	; 0x22
 8004ddc:	f040 80ae 	bne.w	8004f3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de8:	d117      	bne.n	8004e1a <UART_Receive_IT+0x50>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d113      	bne.n	8004e1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	1c9a      	adds	r2, r3, #2
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28
 8004e18:	e026      	b.n	8004e68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2c:	d007      	beq.n	8004e3e <UART_Receive_IT+0x74>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <UART_Receive_IT+0x82>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e008      	b.n	8004e5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4619      	mov	r1, r3
 8004e76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d15d      	bne.n	8004f38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0220 	bic.w	r2, r2, #32
 8004e8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0201 	bic.w	r2, r2, #1
 8004eaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d135      	bne.n	8004f2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f023 0310 	bic.w	r3, r3, #16
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee8:	623a      	str	r2, [r7, #32]
 8004eea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	69f9      	ldr	r1, [r7, #28]
 8004eee:	6a3a      	ldr	r2, [r7, #32]
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d10a      	bne.n	8004f20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f24:	4619      	mov	r1, r3
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fdc0 	bl	8004aac <HAL_UARTEx_RxEventCallback>
 8004f2c:	e002      	b.n	8004f34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fd f99e 	bl	8002270 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e002      	b.n	8004f3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e000      	b.n	8004f3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3730      	adds	r7, #48	; 0x30
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f82:	f023 030c 	bic.w	r3, r3, #12
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2c      	ldr	r2, [pc, #176]	; (800505c <UART_SetConfig+0x114>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d103      	bne.n	8004fb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fb0:	f7fe f920 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	e002      	b.n	8004fbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fb8:	f7fe f908 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8004fbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009a      	lsls	r2, r3, #2
 8004fc8:	441a      	add	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	4a22      	ldr	r2, [pc, #136]	; (8005060 <UART_SetConfig+0x118>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	0119      	lsls	r1, r3, #4
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009a      	lsls	r2, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <UART_SetConfig+0x118>)
 8004ff6:	fba3 0302 	umull	r0, r3, r3, r2
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	2064      	movs	r0, #100	; 0x64
 8004ffe:	fb00 f303 	mul.w	r3, r0, r3
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	3332      	adds	r3, #50	; 0x32
 8005008:	4a15      	ldr	r2, [pc, #84]	; (8005060 <UART_SetConfig+0x118>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005014:	4419      	add	r1, r3
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009a      	lsls	r2, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	fbb2 f2f3 	udiv	r2, r2, r3
 800502c:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <UART_SetConfig+0x118>)
 800502e:	fba3 0302 	umull	r0, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2064      	movs	r0, #100	; 0x64
 8005036:	fb00 f303 	mul.w	r3, r0, r3
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	3332      	adds	r3, #50	; 0x32
 8005040:	4a07      	ldr	r2, [pc, #28]	; (8005060 <UART_SetConfig+0x118>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	f003 020f 	and.w	r2, r3, #15
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	440a      	add	r2, r1
 8005052:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005054:	bf00      	nop
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40013800 	.word	0x40013800
 8005060:	51eb851f 	.word	0x51eb851f

08005064 <__cvt>:
 8005064:	2b00      	cmp	r3, #0
 8005066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506a:	461f      	mov	r7, r3
 800506c:	bfbb      	ittet	lt
 800506e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005072:	461f      	movlt	r7, r3
 8005074:	2300      	movge	r3, #0
 8005076:	232d      	movlt	r3, #45	; 0x2d
 8005078:	b088      	sub	sp, #32
 800507a:	4614      	mov	r4, r2
 800507c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800507e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005080:	7013      	strb	r3, [r2, #0]
 8005082:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005084:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005088:	f023 0820 	bic.w	r8, r3, #32
 800508c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005090:	d005      	beq.n	800509e <__cvt+0x3a>
 8005092:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005096:	d100      	bne.n	800509a <__cvt+0x36>
 8005098:	3501      	adds	r5, #1
 800509a:	2302      	movs	r3, #2
 800509c:	e000      	b.n	80050a0 <__cvt+0x3c>
 800509e:	2303      	movs	r3, #3
 80050a0:	aa07      	add	r2, sp, #28
 80050a2:	9204      	str	r2, [sp, #16]
 80050a4:	aa06      	add	r2, sp, #24
 80050a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050aa:	e9cd 3500 	strd	r3, r5, [sp]
 80050ae:	4622      	mov	r2, r4
 80050b0:	463b      	mov	r3, r7
 80050b2:	f001 f8fd 	bl	80062b0 <_dtoa_r>
 80050b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050ba:	4606      	mov	r6, r0
 80050bc:	d102      	bne.n	80050c4 <__cvt+0x60>
 80050be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050c0:	07db      	lsls	r3, r3, #31
 80050c2:	d522      	bpl.n	800510a <__cvt+0xa6>
 80050c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050c8:	eb06 0905 	add.w	r9, r6, r5
 80050cc:	d110      	bne.n	80050f0 <__cvt+0x8c>
 80050ce:	7833      	ldrb	r3, [r6, #0]
 80050d0:	2b30      	cmp	r3, #48	; 0x30
 80050d2:	d10a      	bne.n	80050ea <__cvt+0x86>
 80050d4:	2200      	movs	r2, #0
 80050d6:	2300      	movs	r3, #0
 80050d8:	4620      	mov	r0, r4
 80050da:	4639      	mov	r1, r7
 80050dc:	f7fb fc6e 	bl	80009bc <__aeabi_dcmpeq>
 80050e0:	b918      	cbnz	r0, 80050ea <__cvt+0x86>
 80050e2:	f1c5 0501 	rsb	r5, r5, #1
 80050e6:	f8ca 5000 	str.w	r5, [sl]
 80050ea:	f8da 3000 	ldr.w	r3, [sl]
 80050ee:	4499      	add	r9, r3
 80050f0:	2200      	movs	r2, #0
 80050f2:	2300      	movs	r3, #0
 80050f4:	4620      	mov	r0, r4
 80050f6:	4639      	mov	r1, r7
 80050f8:	f7fb fc60 	bl	80009bc <__aeabi_dcmpeq>
 80050fc:	b108      	cbz	r0, 8005102 <__cvt+0x9e>
 80050fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8005102:	2230      	movs	r2, #48	; 0x30
 8005104:	9b07      	ldr	r3, [sp, #28]
 8005106:	454b      	cmp	r3, r9
 8005108:	d307      	bcc.n	800511a <__cvt+0xb6>
 800510a:	4630      	mov	r0, r6
 800510c:	9b07      	ldr	r3, [sp, #28]
 800510e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005110:	1b9b      	subs	r3, r3, r6
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	b008      	add	sp, #32
 8005116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511a:	1c59      	adds	r1, r3, #1
 800511c:	9107      	str	r1, [sp, #28]
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e7f0      	b.n	8005104 <__cvt+0xa0>

08005122 <__exponent>:
 8005122:	4603      	mov	r3, r0
 8005124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005126:	2900      	cmp	r1, #0
 8005128:	f803 2b02 	strb.w	r2, [r3], #2
 800512c:	bfb6      	itet	lt
 800512e:	222d      	movlt	r2, #45	; 0x2d
 8005130:	222b      	movge	r2, #43	; 0x2b
 8005132:	4249      	neglt	r1, r1
 8005134:	2909      	cmp	r1, #9
 8005136:	7042      	strb	r2, [r0, #1]
 8005138:	dd2a      	ble.n	8005190 <__exponent+0x6e>
 800513a:	f10d 0207 	add.w	r2, sp, #7
 800513e:	4617      	mov	r7, r2
 8005140:	260a      	movs	r6, #10
 8005142:	fb91 f5f6 	sdiv	r5, r1, r6
 8005146:	4694      	mov	ip, r2
 8005148:	fb06 1415 	mls	r4, r6, r5, r1
 800514c:	3430      	adds	r4, #48	; 0x30
 800514e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005152:	460c      	mov	r4, r1
 8005154:	2c63      	cmp	r4, #99	; 0x63
 8005156:	4629      	mov	r1, r5
 8005158:	f102 32ff 	add.w	r2, r2, #4294967295
 800515c:	dcf1      	bgt.n	8005142 <__exponent+0x20>
 800515e:	3130      	adds	r1, #48	; 0x30
 8005160:	f1ac 0402 	sub.w	r4, ip, #2
 8005164:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005168:	4622      	mov	r2, r4
 800516a:	1c41      	adds	r1, r0, #1
 800516c:	42ba      	cmp	r2, r7
 800516e:	d30a      	bcc.n	8005186 <__exponent+0x64>
 8005170:	f10d 0209 	add.w	r2, sp, #9
 8005174:	eba2 020c 	sub.w	r2, r2, ip
 8005178:	42bc      	cmp	r4, r7
 800517a:	bf88      	it	hi
 800517c:	2200      	movhi	r2, #0
 800517e:	4413      	add	r3, r2
 8005180:	1a18      	subs	r0, r3, r0
 8005182:	b003      	add	sp, #12
 8005184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005186:	f812 5b01 	ldrb.w	r5, [r2], #1
 800518a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800518e:	e7ed      	b.n	800516c <__exponent+0x4a>
 8005190:	2330      	movs	r3, #48	; 0x30
 8005192:	3130      	adds	r1, #48	; 0x30
 8005194:	7083      	strb	r3, [r0, #2]
 8005196:	70c1      	strb	r1, [r0, #3]
 8005198:	1d03      	adds	r3, r0, #4
 800519a:	e7f1      	b.n	8005180 <__exponent+0x5e>

0800519c <_printf_float>:
 800519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	b091      	sub	sp, #68	; 0x44
 80051a2:	460c      	mov	r4, r1
 80051a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80051a8:	4616      	mov	r6, r2
 80051aa:	461f      	mov	r7, r3
 80051ac:	4605      	mov	r5, r0
 80051ae:	f000 ff61 	bl	8006074 <_localeconv_r>
 80051b2:	6803      	ldr	r3, [r0, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	9309      	str	r3, [sp, #36]	; 0x24
 80051b8:	f7fa ffd4 	bl	8000164 <strlen>
 80051bc:	2300      	movs	r3, #0
 80051be:	930e      	str	r3, [sp, #56]	; 0x38
 80051c0:	f8d8 3000 	ldr.w	r3, [r8]
 80051c4:	900a      	str	r0, [sp, #40]	; 0x28
 80051c6:	3307      	adds	r3, #7
 80051c8:	f023 0307 	bic.w	r3, r3, #7
 80051cc:	f103 0208 	add.w	r2, r3, #8
 80051d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80051d4:	f8d4 b000 	ldr.w	fp, [r4]
 80051d8:	f8c8 2000 	str.w	r2, [r8]
 80051dc:	e9d3 a800 	ldrd	sl, r8, [r3]
 80051e0:	4652      	mov	r2, sl
 80051e2:	4643      	mov	r3, r8
 80051e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80051e8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80051ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80051ee:	f04f 32ff 	mov.w	r2, #4294967295
 80051f2:	4650      	mov	r0, sl
 80051f4:	4b9c      	ldr	r3, [pc, #624]	; (8005468 <_printf_float+0x2cc>)
 80051f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051f8:	f7fb fc12 	bl	8000a20 <__aeabi_dcmpun>
 80051fc:	bb70      	cbnz	r0, 800525c <_printf_float+0xc0>
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005202:	4650      	mov	r0, sl
 8005204:	4b98      	ldr	r3, [pc, #608]	; (8005468 <_printf_float+0x2cc>)
 8005206:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005208:	f7fb fbec 	bl	80009e4 <__aeabi_dcmple>
 800520c:	bb30      	cbnz	r0, 800525c <_printf_float+0xc0>
 800520e:	2200      	movs	r2, #0
 8005210:	2300      	movs	r3, #0
 8005212:	4650      	mov	r0, sl
 8005214:	4641      	mov	r1, r8
 8005216:	f7fb fbdb 	bl	80009d0 <__aeabi_dcmplt>
 800521a:	b110      	cbz	r0, 8005222 <_printf_float+0x86>
 800521c:	232d      	movs	r3, #45	; 0x2d
 800521e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005222:	4a92      	ldr	r2, [pc, #584]	; (800546c <_printf_float+0x2d0>)
 8005224:	4b92      	ldr	r3, [pc, #584]	; (8005470 <_printf_float+0x2d4>)
 8005226:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800522a:	bf94      	ite	ls
 800522c:	4690      	movls	r8, r2
 800522e:	4698      	movhi	r8, r3
 8005230:	2303      	movs	r3, #3
 8005232:	f04f 0a00 	mov.w	sl, #0
 8005236:	6123      	str	r3, [r4, #16]
 8005238:	f02b 0304 	bic.w	r3, fp, #4
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	4633      	mov	r3, r6
 8005240:	4621      	mov	r1, r4
 8005242:	4628      	mov	r0, r5
 8005244:	9700      	str	r7, [sp, #0]
 8005246:	aa0f      	add	r2, sp, #60	; 0x3c
 8005248:	f000 f9d6 	bl	80055f8 <_printf_common>
 800524c:	3001      	adds	r0, #1
 800524e:	f040 8090 	bne.w	8005372 <_printf_float+0x1d6>
 8005252:	f04f 30ff 	mov.w	r0, #4294967295
 8005256:	b011      	add	sp, #68	; 0x44
 8005258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525c:	4652      	mov	r2, sl
 800525e:	4643      	mov	r3, r8
 8005260:	4650      	mov	r0, sl
 8005262:	4641      	mov	r1, r8
 8005264:	f7fb fbdc 	bl	8000a20 <__aeabi_dcmpun>
 8005268:	b148      	cbz	r0, 800527e <_printf_float+0xe2>
 800526a:	f1b8 0f00 	cmp.w	r8, #0
 800526e:	bfb8      	it	lt
 8005270:	232d      	movlt	r3, #45	; 0x2d
 8005272:	4a80      	ldr	r2, [pc, #512]	; (8005474 <_printf_float+0x2d8>)
 8005274:	bfb8      	it	lt
 8005276:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800527a:	4b7f      	ldr	r3, [pc, #508]	; (8005478 <_printf_float+0x2dc>)
 800527c:	e7d3      	b.n	8005226 <_printf_float+0x8a>
 800527e:	6863      	ldr	r3, [r4, #4]
 8005280:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	d142      	bne.n	800530e <_printf_float+0x172>
 8005288:	2306      	movs	r3, #6
 800528a:	6063      	str	r3, [r4, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	9206      	str	r2, [sp, #24]
 8005290:	aa0e      	add	r2, sp, #56	; 0x38
 8005292:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005296:	aa0d      	add	r2, sp, #52	; 0x34
 8005298:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800529c:	9203      	str	r2, [sp, #12]
 800529e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80052a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	6863      	ldr	r3, [r4, #4]
 80052aa:	4652      	mov	r2, sl
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	4628      	mov	r0, r5
 80052b0:	4643      	mov	r3, r8
 80052b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80052b4:	f7ff fed6 	bl	8005064 <__cvt>
 80052b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052ba:	4680      	mov	r8, r0
 80052bc:	2947      	cmp	r1, #71	; 0x47
 80052be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052c0:	d108      	bne.n	80052d4 <_printf_float+0x138>
 80052c2:	1cc8      	adds	r0, r1, #3
 80052c4:	db02      	blt.n	80052cc <_printf_float+0x130>
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	4299      	cmp	r1, r3
 80052ca:	dd40      	ble.n	800534e <_printf_float+0x1b2>
 80052cc:	f1a9 0902 	sub.w	r9, r9, #2
 80052d0:	fa5f f989 	uxtb.w	r9, r9
 80052d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052d8:	d81f      	bhi.n	800531a <_printf_float+0x17e>
 80052da:	464a      	mov	r2, r9
 80052dc:	3901      	subs	r1, #1
 80052de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052e2:	910d      	str	r1, [sp, #52]	; 0x34
 80052e4:	f7ff ff1d 	bl	8005122 <__exponent>
 80052e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052ea:	4682      	mov	sl, r0
 80052ec:	1813      	adds	r3, r2, r0
 80052ee:	2a01      	cmp	r2, #1
 80052f0:	6123      	str	r3, [r4, #16]
 80052f2:	dc02      	bgt.n	80052fa <_printf_float+0x15e>
 80052f4:	6822      	ldr	r2, [r4, #0]
 80052f6:	07d2      	lsls	r2, r2, #31
 80052f8:	d501      	bpl.n	80052fe <_printf_float+0x162>
 80052fa:	3301      	adds	r3, #1
 80052fc:	6123      	str	r3, [r4, #16]
 80052fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005302:	2b00      	cmp	r3, #0
 8005304:	d09b      	beq.n	800523e <_printf_float+0xa2>
 8005306:	232d      	movs	r3, #45	; 0x2d
 8005308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800530c:	e797      	b.n	800523e <_printf_float+0xa2>
 800530e:	2947      	cmp	r1, #71	; 0x47
 8005310:	d1bc      	bne.n	800528c <_printf_float+0xf0>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1ba      	bne.n	800528c <_printf_float+0xf0>
 8005316:	2301      	movs	r3, #1
 8005318:	e7b7      	b.n	800528a <_printf_float+0xee>
 800531a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800531e:	d118      	bne.n	8005352 <_printf_float+0x1b6>
 8005320:	2900      	cmp	r1, #0
 8005322:	6863      	ldr	r3, [r4, #4]
 8005324:	dd0b      	ble.n	800533e <_printf_float+0x1a2>
 8005326:	6121      	str	r1, [r4, #16]
 8005328:	b913      	cbnz	r3, 8005330 <_printf_float+0x194>
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	07d0      	lsls	r0, r2, #31
 800532e:	d502      	bpl.n	8005336 <_printf_float+0x19a>
 8005330:	3301      	adds	r3, #1
 8005332:	440b      	add	r3, r1
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	f04f 0a00 	mov.w	sl, #0
 800533a:	65a1      	str	r1, [r4, #88]	; 0x58
 800533c:	e7df      	b.n	80052fe <_printf_float+0x162>
 800533e:	b913      	cbnz	r3, 8005346 <_printf_float+0x1aa>
 8005340:	6822      	ldr	r2, [r4, #0]
 8005342:	07d2      	lsls	r2, r2, #31
 8005344:	d501      	bpl.n	800534a <_printf_float+0x1ae>
 8005346:	3302      	adds	r3, #2
 8005348:	e7f4      	b.n	8005334 <_printf_float+0x198>
 800534a:	2301      	movs	r3, #1
 800534c:	e7f2      	b.n	8005334 <_printf_float+0x198>
 800534e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005354:	4299      	cmp	r1, r3
 8005356:	db05      	blt.n	8005364 <_printf_float+0x1c8>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	6121      	str	r1, [r4, #16]
 800535c:	07d8      	lsls	r0, r3, #31
 800535e:	d5ea      	bpl.n	8005336 <_printf_float+0x19a>
 8005360:	1c4b      	adds	r3, r1, #1
 8005362:	e7e7      	b.n	8005334 <_printf_float+0x198>
 8005364:	2900      	cmp	r1, #0
 8005366:	bfcc      	ite	gt
 8005368:	2201      	movgt	r2, #1
 800536a:	f1c1 0202 	rsble	r2, r1, #2
 800536e:	4413      	add	r3, r2
 8005370:	e7e0      	b.n	8005334 <_printf_float+0x198>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	055a      	lsls	r2, r3, #21
 8005376:	d407      	bmi.n	8005388 <_printf_float+0x1ec>
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	4642      	mov	r2, r8
 800537c:	4631      	mov	r1, r6
 800537e:	4628      	mov	r0, r5
 8005380:	47b8      	blx	r7
 8005382:	3001      	adds	r0, #1
 8005384:	d12b      	bne.n	80053de <_printf_float+0x242>
 8005386:	e764      	b.n	8005252 <_printf_float+0xb6>
 8005388:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800538c:	f240 80dd 	bls.w	800554a <_printf_float+0x3ae>
 8005390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005394:	2200      	movs	r2, #0
 8005396:	2300      	movs	r3, #0
 8005398:	f7fb fb10 	bl	80009bc <__aeabi_dcmpeq>
 800539c:	2800      	cmp	r0, #0
 800539e:	d033      	beq.n	8005408 <_printf_float+0x26c>
 80053a0:	2301      	movs	r3, #1
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	4a35      	ldr	r2, [pc, #212]	; (800547c <_printf_float+0x2e0>)
 80053a8:	47b8      	blx	r7
 80053aa:	3001      	adds	r0, #1
 80053ac:	f43f af51 	beq.w	8005252 <_printf_float+0xb6>
 80053b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053b4:	429a      	cmp	r2, r3
 80053b6:	db02      	blt.n	80053be <_printf_float+0x222>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	07d8      	lsls	r0, r3, #31
 80053bc:	d50f      	bpl.n	80053de <_printf_float+0x242>
 80053be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b8      	blx	r7
 80053c8:	3001      	adds	r0, #1
 80053ca:	f43f af42 	beq.w	8005252 <_printf_float+0xb6>
 80053ce:	f04f 0800 	mov.w	r8, #0
 80053d2:	f104 091a 	add.w	r9, r4, #26
 80053d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053d8:	3b01      	subs	r3, #1
 80053da:	4543      	cmp	r3, r8
 80053dc:	dc09      	bgt.n	80053f2 <_printf_float+0x256>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	079b      	lsls	r3, r3, #30
 80053e2:	f100 8104 	bmi.w	80055ee <_printf_float+0x452>
 80053e6:	68e0      	ldr	r0, [r4, #12]
 80053e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053ea:	4298      	cmp	r0, r3
 80053ec:	bfb8      	it	lt
 80053ee:	4618      	movlt	r0, r3
 80053f0:	e731      	b.n	8005256 <_printf_float+0xba>
 80053f2:	2301      	movs	r3, #1
 80053f4:	464a      	mov	r2, r9
 80053f6:	4631      	mov	r1, r6
 80053f8:	4628      	mov	r0, r5
 80053fa:	47b8      	blx	r7
 80053fc:	3001      	adds	r0, #1
 80053fe:	f43f af28 	beq.w	8005252 <_printf_float+0xb6>
 8005402:	f108 0801 	add.w	r8, r8, #1
 8005406:	e7e6      	b.n	80053d6 <_printf_float+0x23a>
 8005408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	dc38      	bgt.n	8005480 <_printf_float+0x2e4>
 800540e:	2301      	movs	r3, #1
 8005410:	4631      	mov	r1, r6
 8005412:	4628      	mov	r0, r5
 8005414:	4a19      	ldr	r2, [pc, #100]	; (800547c <_printf_float+0x2e0>)
 8005416:	47b8      	blx	r7
 8005418:	3001      	adds	r0, #1
 800541a:	f43f af1a 	beq.w	8005252 <_printf_float+0xb6>
 800541e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005422:	4313      	orrs	r3, r2
 8005424:	d102      	bne.n	800542c <_printf_float+0x290>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	07d9      	lsls	r1, r3, #31
 800542a:	d5d8      	bpl.n	80053de <_printf_float+0x242>
 800542c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005430:	4631      	mov	r1, r6
 8005432:	4628      	mov	r0, r5
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	f43f af0b 	beq.w	8005252 <_printf_float+0xb6>
 800543c:	f04f 0900 	mov.w	r9, #0
 8005440:	f104 0a1a 	add.w	sl, r4, #26
 8005444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005446:	425b      	negs	r3, r3
 8005448:	454b      	cmp	r3, r9
 800544a:	dc01      	bgt.n	8005450 <_printf_float+0x2b4>
 800544c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800544e:	e794      	b.n	800537a <_printf_float+0x1de>
 8005450:	2301      	movs	r3, #1
 8005452:	4652      	mov	r2, sl
 8005454:	4631      	mov	r1, r6
 8005456:	4628      	mov	r0, r5
 8005458:	47b8      	blx	r7
 800545a:	3001      	adds	r0, #1
 800545c:	f43f aef9 	beq.w	8005252 <_printf_float+0xb6>
 8005460:	f109 0901 	add.w	r9, r9, #1
 8005464:	e7ee      	b.n	8005444 <_printf_float+0x2a8>
 8005466:	bf00      	nop
 8005468:	7fefffff 	.word	0x7fefffff
 800546c:	0800a15a 	.word	0x0800a15a
 8005470:	0800a15e 	.word	0x0800a15e
 8005474:	0800a162 	.word	0x0800a162
 8005478:	0800a166 	.word	0x0800a166
 800547c:	0800a4f0 	.word	0x0800a4f0
 8005480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005482:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005484:	429a      	cmp	r2, r3
 8005486:	bfa8      	it	ge
 8005488:	461a      	movge	r2, r3
 800548a:	2a00      	cmp	r2, #0
 800548c:	4691      	mov	r9, r2
 800548e:	dc37      	bgt.n	8005500 <_printf_float+0x364>
 8005490:	f04f 0b00 	mov.w	fp, #0
 8005494:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005498:	f104 021a 	add.w	r2, r4, #26
 800549c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80054a0:	ebaa 0309 	sub.w	r3, sl, r9
 80054a4:	455b      	cmp	r3, fp
 80054a6:	dc33      	bgt.n	8005510 <_printf_float+0x374>
 80054a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054ac:	429a      	cmp	r2, r3
 80054ae:	db3b      	blt.n	8005528 <_printf_float+0x38c>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	07da      	lsls	r2, r3, #31
 80054b4:	d438      	bmi.n	8005528 <_printf_float+0x38c>
 80054b6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80054ba:	eba2 0903 	sub.w	r9, r2, r3
 80054be:	eba2 020a 	sub.w	r2, r2, sl
 80054c2:	4591      	cmp	r9, r2
 80054c4:	bfa8      	it	ge
 80054c6:	4691      	movge	r9, r2
 80054c8:	f1b9 0f00 	cmp.w	r9, #0
 80054cc:	dc34      	bgt.n	8005538 <_printf_float+0x39c>
 80054ce:	f04f 0800 	mov.w	r8, #0
 80054d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054d6:	f104 0a1a 	add.w	sl, r4, #26
 80054da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	eba3 0309 	sub.w	r3, r3, r9
 80054e4:	4543      	cmp	r3, r8
 80054e6:	f77f af7a 	ble.w	80053de <_printf_float+0x242>
 80054ea:	2301      	movs	r3, #1
 80054ec:	4652      	mov	r2, sl
 80054ee:	4631      	mov	r1, r6
 80054f0:	4628      	mov	r0, r5
 80054f2:	47b8      	blx	r7
 80054f4:	3001      	adds	r0, #1
 80054f6:	f43f aeac 	beq.w	8005252 <_printf_float+0xb6>
 80054fa:	f108 0801 	add.w	r8, r8, #1
 80054fe:	e7ec      	b.n	80054da <_printf_float+0x33e>
 8005500:	4613      	mov	r3, r2
 8005502:	4631      	mov	r1, r6
 8005504:	4642      	mov	r2, r8
 8005506:	4628      	mov	r0, r5
 8005508:	47b8      	blx	r7
 800550a:	3001      	adds	r0, #1
 800550c:	d1c0      	bne.n	8005490 <_printf_float+0x2f4>
 800550e:	e6a0      	b.n	8005252 <_printf_float+0xb6>
 8005510:	2301      	movs	r3, #1
 8005512:	4631      	mov	r1, r6
 8005514:	4628      	mov	r0, r5
 8005516:	920b      	str	r2, [sp, #44]	; 0x2c
 8005518:	47b8      	blx	r7
 800551a:	3001      	adds	r0, #1
 800551c:	f43f ae99 	beq.w	8005252 <_printf_float+0xb6>
 8005520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005522:	f10b 0b01 	add.w	fp, fp, #1
 8005526:	e7b9      	b.n	800549c <_printf_float+0x300>
 8005528:	4631      	mov	r1, r6
 800552a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800552e:	4628      	mov	r0, r5
 8005530:	47b8      	blx	r7
 8005532:	3001      	adds	r0, #1
 8005534:	d1bf      	bne.n	80054b6 <_printf_float+0x31a>
 8005536:	e68c      	b.n	8005252 <_printf_float+0xb6>
 8005538:	464b      	mov	r3, r9
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	eb08 020a 	add.w	r2, r8, sl
 8005542:	47b8      	blx	r7
 8005544:	3001      	adds	r0, #1
 8005546:	d1c2      	bne.n	80054ce <_printf_float+0x332>
 8005548:	e683      	b.n	8005252 <_printf_float+0xb6>
 800554a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800554c:	2a01      	cmp	r2, #1
 800554e:	dc01      	bgt.n	8005554 <_printf_float+0x3b8>
 8005550:	07db      	lsls	r3, r3, #31
 8005552:	d539      	bpl.n	80055c8 <_printf_float+0x42c>
 8005554:	2301      	movs	r3, #1
 8005556:	4642      	mov	r2, r8
 8005558:	4631      	mov	r1, r6
 800555a:	4628      	mov	r0, r5
 800555c:	47b8      	blx	r7
 800555e:	3001      	adds	r0, #1
 8005560:	f43f ae77 	beq.w	8005252 <_printf_float+0xb6>
 8005564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	47b8      	blx	r7
 800556e:	3001      	adds	r0, #1
 8005570:	f43f ae6f 	beq.w	8005252 <_printf_float+0xb6>
 8005574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005578:	2200      	movs	r2, #0
 800557a:	2300      	movs	r3, #0
 800557c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005580:	f7fb fa1c 	bl	80009bc <__aeabi_dcmpeq>
 8005584:	b9d8      	cbnz	r0, 80055be <_printf_float+0x422>
 8005586:	f109 33ff 	add.w	r3, r9, #4294967295
 800558a:	f108 0201 	add.w	r2, r8, #1
 800558e:	4631      	mov	r1, r6
 8005590:	4628      	mov	r0, r5
 8005592:	47b8      	blx	r7
 8005594:	3001      	adds	r0, #1
 8005596:	d10e      	bne.n	80055b6 <_printf_float+0x41a>
 8005598:	e65b      	b.n	8005252 <_printf_float+0xb6>
 800559a:	2301      	movs	r3, #1
 800559c:	464a      	mov	r2, r9
 800559e:	4631      	mov	r1, r6
 80055a0:	4628      	mov	r0, r5
 80055a2:	47b8      	blx	r7
 80055a4:	3001      	adds	r0, #1
 80055a6:	f43f ae54 	beq.w	8005252 <_printf_float+0xb6>
 80055aa:	f108 0801 	add.w	r8, r8, #1
 80055ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055b0:	3b01      	subs	r3, #1
 80055b2:	4543      	cmp	r3, r8
 80055b4:	dcf1      	bgt.n	800559a <_printf_float+0x3fe>
 80055b6:	4653      	mov	r3, sl
 80055b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055bc:	e6de      	b.n	800537c <_printf_float+0x1e0>
 80055be:	f04f 0800 	mov.w	r8, #0
 80055c2:	f104 091a 	add.w	r9, r4, #26
 80055c6:	e7f2      	b.n	80055ae <_printf_float+0x412>
 80055c8:	2301      	movs	r3, #1
 80055ca:	4642      	mov	r2, r8
 80055cc:	e7df      	b.n	800558e <_printf_float+0x3f2>
 80055ce:	2301      	movs	r3, #1
 80055d0:	464a      	mov	r2, r9
 80055d2:	4631      	mov	r1, r6
 80055d4:	4628      	mov	r0, r5
 80055d6:	47b8      	blx	r7
 80055d8:	3001      	adds	r0, #1
 80055da:	f43f ae3a 	beq.w	8005252 <_printf_float+0xb6>
 80055de:	f108 0801 	add.w	r8, r8, #1
 80055e2:	68e3      	ldr	r3, [r4, #12]
 80055e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80055e6:	1a5b      	subs	r3, r3, r1
 80055e8:	4543      	cmp	r3, r8
 80055ea:	dcf0      	bgt.n	80055ce <_printf_float+0x432>
 80055ec:	e6fb      	b.n	80053e6 <_printf_float+0x24a>
 80055ee:	f04f 0800 	mov.w	r8, #0
 80055f2:	f104 0919 	add.w	r9, r4, #25
 80055f6:	e7f4      	b.n	80055e2 <_printf_float+0x446>

080055f8 <_printf_common>:
 80055f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055fc:	4616      	mov	r6, r2
 80055fe:	4699      	mov	r9, r3
 8005600:	688a      	ldr	r2, [r1, #8]
 8005602:	690b      	ldr	r3, [r1, #16]
 8005604:	4607      	mov	r7, r0
 8005606:	4293      	cmp	r3, r2
 8005608:	bfb8      	it	lt
 800560a:	4613      	movlt	r3, r2
 800560c:	6033      	str	r3, [r6, #0]
 800560e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005612:	460c      	mov	r4, r1
 8005614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005618:	b10a      	cbz	r2, 800561e <_printf_common+0x26>
 800561a:	3301      	adds	r3, #1
 800561c:	6033      	str	r3, [r6, #0]
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	0699      	lsls	r1, r3, #26
 8005622:	bf42      	ittt	mi
 8005624:	6833      	ldrmi	r3, [r6, #0]
 8005626:	3302      	addmi	r3, #2
 8005628:	6033      	strmi	r3, [r6, #0]
 800562a:	6825      	ldr	r5, [r4, #0]
 800562c:	f015 0506 	ands.w	r5, r5, #6
 8005630:	d106      	bne.n	8005640 <_printf_common+0x48>
 8005632:	f104 0a19 	add.w	sl, r4, #25
 8005636:	68e3      	ldr	r3, [r4, #12]
 8005638:	6832      	ldr	r2, [r6, #0]
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	42ab      	cmp	r3, r5
 800563e:	dc2b      	bgt.n	8005698 <_printf_common+0xa0>
 8005640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005644:	1e13      	subs	r3, r2, #0
 8005646:	6822      	ldr	r2, [r4, #0]
 8005648:	bf18      	it	ne
 800564a:	2301      	movne	r3, #1
 800564c:	0692      	lsls	r2, r2, #26
 800564e:	d430      	bmi.n	80056b2 <_printf_common+0xba>
 8005650:	4649      	mov	r1, r9
 8005652:	4638      	mov	r0, r7
 8005654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005658:	47c0      	blx	r8
 800565a:	3001      	adds	r0, #1
 800565c:	d023      	beq.n	80056a6 <_printf_common+0xae>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	6922      	ldr	r2, [r4, #16]
 8005662:	f003 0306 	and.w	r3, r3, #6
 8005666:	2b04      	cmp	r3, #4
 8005668:	bf14      	ite	ne
 800566a:	2500      	movne	r5, #0
 800566c:	6833      	ldreq	r3, [r6, #0]
 800566e:	f04f 0600 	mov.w	r6, #0
 8005672:	bf08      	it	eq
 8005674:	68e5      	ldreq	r5, [r4, #12]
 8005676:	f104 041a 	add.w	r4, r4, #26
 800567a:	bf08      	it	eq
 800567c:	1aed      	subeq	r5, r5, r3
 800567e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005682:	bf08      	it	eq
 8005684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005688:	4293      	cmp	r3, r2
 800568a:	bfc4      	itt	gt
 800568c:	1a9b      	subgt	r3, r3, r2
 800568e:	18ed      	addgt	r5, r5, r3
 8005690:	42b5      	cmp	r5, r6
 8005692:	d11a      	bne.n	80056ca <_printf_common+0xd2>
 8005694:	2000      	movs	r0, #0
 8005696:	e008      	b.n	80056aa <_printf_common+0xb2>
 8005698:	2301      	movs	r3, #1
 800569a:	4652      	mov	r2, sl
 800569c:	4649      	mov	r1, r9
 800569e:	4638      	mov	r0, r7
 80056a0:	47c0      	blx	r8
 80056a2:	3001      	adds	r0, #1
 80056a4:	d103      	bne.n	80056ae <_printf_common+0xb6>
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295
 80056aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ae:	3501      	adds	r5, #1
 80056b0:	e7c1      	b.n	8005636 <_printf_common+0x3e>
 80056b2:	2030      	movs	r0, #48	; 0x30
 80056b4:	18e1      	adds	r1, r4, r3
 80056b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056c0:	4422      	add	r2, r4
 80056c2:	3302      	adds	r3, #2
 80056c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056c8:	e7c2      	b.n	8005650 <_printf_common+0x58>
 80056ca:	2301      	movs	r3, #1
 80056cc:	4622      	mov	r2, r4
 80056ce:	4649      	mov	r1, r9
 80056d0:	4638      	mov	r0, r7
 80056d2:	47c0      	blx	r8
 80056d4:	3001      	adds	r0, #1
 80056d6:	d0e6      	beq.n	80056a6 <_printf_common+0xae>
 80056d8:	3601      	adds	r6, #1
 80056da:	e7d9      	b.n	8005690 <_printf_common+0x98>

080056dc <_printf_i>:
 80056dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056e0:	7e0f      	ldrb	r7, [r1, #24]
 80056e2:	4691      	mov	r9, r2
 80056e4:	2f78      	cmp	r7, #120	; 0x78
 80056e6:	4680      	mov	r8, r0
 80056e8:	460c      	mov	r4, r1
 80056ea:	469a      	mov	sl, r3
 80056ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056f2:	d807      	bhi.n	8005704 <_printf_i+0x28>
 80056f4:	2f62      	cmp	r7, #98	; 0x62
 80056f6:	d80a      	bhi.n	800570e <_printf_i+0x32>
 80056f8:	2f00      	cmp	r7, #0
 80056fa:	f000 80d5 	beq.w	80058a8 <_printf_i+0x1cc>
 80056fe:	2f58      	cmp	r7, #88	; 0x58
 8005700:	f000 80c1 	beq.w	8005886 <_printf_i+0x1aa>
 8005704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800570c:	e03a      	b.n	8005784 <_printf_i+0xa8>
 800570e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005712:	2b15      	cmp	r3, #21
 8005714:	d8f6      	bhi.n	8005704 <_printf_i+0x28>
 8005716:	a101      	add	r1, pc, #4	; (adr r1, 800571c <_printf_i+0x40>)
 8005718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800571c:	08005775 	.word	0x08005775
 8005720:	08005789 	.word	0x08005789
 8005724:	08005705 	.word	0x08005705
 8005728:	08005705 	.word	0x08005705
 800572c:	08005705 	.word	0x08005705
 8005730:	08005705 	.word	0x08005705
 8005734:	08005789 	.word	0x08005789
 8005738:	08005705 	.word	0x08005705
 800573c:	08005705 	.word	0x08005705
 8005740:	08005705 	.word	0x08005705
 8005744:	08005705 	.word	0x08005705
 8005748:	0800588f 	.word	0x0800588f
 800574c:	080057b5 	.word	0x080057b5
 8005750:	08005849 	.word	0x08005849
 8005754:	08005705 	.word	0x08005705
 8005758:	08005705 	.word	0x08005705
 800575c:	080058b1 	.word	0x080058b1
 8005760:	08005705 	.word	0x08005705
 8005764:	080057b5 	.word	0x080057b5
 8005768:	08005705 	.word	0x08005705
 800576c:	08005705 	.word	0x08005705
 8005770:	08005851 	.word	0x08005851
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	1d1a      	adds	r2, r3, #4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	602a      	str	r2, [r5, #0]
 800577c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005784:	2301      	movs	r3, #1
 8005786:	e0a0      	b.n	80058ca <_printf_i+0x1ee>
 8005788:	6820      	ldr	r0, [r4, #0]
 800578a:	682b      	ldr	r3, [r5, #0]
 800578c:	0607      	lsls	r7, r0, #24
 800578e:	f103 0104 	add.w	r1, r3, #4
 8005792:	6029      	str	r1, [r5, #0]
 8005794:	d501      	bpl.n	800579a <_printf_i+0xbe>
 8005796:	681e      	ldr	r6, [r3, #0]
 8005798:	e003      	b.n	80057a2 <_printf_i+0xc6>
 800579a:	0646      	lsls	r6, r0, #25
 800579c:	d5fb      	bpl.n	8005796 <_printf_i+0xba>
 800579e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057a2:	2e00      	cmp	r6, #0
 80057a4:	da03      	bge.n	80057ae <_printf_i+0xd2>
 80057a6:	232d      	movs	r3, #45	; 0x2d
 80057a8:	4276      	negs	r6, r6
 80057aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ae:	230a      	movs	r3, #10
 80057b0:	4859      	ldr	r0, [pc, #356]	; (8005918 <_printf_i+0x23c>)
 80057b2:	e012      	b.n	80057da <_printf_i+0xfe>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	6820      	ldr	r0, [r4, #0]
 80057b8:	1d19      	adds	r1, r3, #4
 80057ba:	6029      	str	r1, [r5, #0]
 80057bc:	0605      	lsls	r5, r0, #24
 80057be:	d501      	bpl.n	80057c4 <_printf_i+0xe8>
 80057c0:	681e      	ldr	r6, [r3, #0]
 80057c2:	e002      	b.n	80057ca <_printf_i+0xee>
 80057c4:	0641      	lsls	r1, r0, #25
 80057c6:	d5fb      	bpl.n	80057c0 <_printf_i+0xe4>
 80057c8:	881e      	ldrh	r6, [r3, #0]
 80057ca:	2f6f      	cmp	r7, #111	; 0x6f
 80057cc:	bf0c      	ite	eq
 80057ce:	2308      	moveq	r3, #8
 80057d0:	230a      	movne	r3, #10
 80057d2:	4851      	ldr	r0, [pc, #324]	; (8005918 <_printf_i+0x23c>)
 80057d4:	2100      	movs	r1, #0
 80057d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057da:	6865      	ldr	r5, [r4, #4]
 80057dc:	2d00      	cmp	r5, #0
 80057de:	bfa8      	it	ge
 80057e0:	6821      	ldrge	r1, [r4, #0]
 80057e2:	60a5      	str	r5, [r4, #8]
 80057e4:	bfa4      	itt	ge
 80057e6:	f021 0104 	bicge.w	r1, r1, #4
 80057ea:	6021      	strge	r1, [r4, #0]
 80057ec:	b90e      	cbnz	r6, 80057f2 <_printf_i+0x116>
 80057ee:	2d00      	cmp	r5, #0
 80057f0:	d04b      	beq.n	800588a <_printf_i+0x1ae>
 80057f2:	4615      	mov	r5, r2
 80057f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80057f8:	fb03 6711 	mls	r7, r3, r1, r6
 80057fc:	5dc7      	ldrb	r7, [r0, r7]
 80057fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005802:	4637      	mov	r7, r6
 8005804:	42bb      	cmp	r3, r7
 8005806:	460e      	mov	r6, r1
 8005808:	d9f4      	bls.n	80057f4 <_printf_i+0x118>
 800580a:	2b08      	cmp	r3, #8
 800580c:	d10b      	bne.n	8005826 <_printf_i+0x14a>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	07de      	lsls	r6, r3, #31
 8005812:	d508      	bpl.n	8005826 <_printf_i+0x14a>
 8005814:	6923      	ldr	r3, [r4, #16]
 8005816:	6861      	ldr	r1, [r4, #4]
 8005818:	4299      	cmp	r1, r3
 800581a:	bfde      	ittt	le
 800581c:	2330      	movle	r3, #48	; 0x30
 800581e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005822:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005826:	1b52      	subs	r2, r2, r5
 8005828:	6122      	str	r2, [r4, #16]
 800582a:	464b      	mov	r3, r9
 800582c:	4621      	mov	r1, r4
 800582e:	4640      	mov	r0, r8
 8005830:	f8cd a000 	str.w	sl, [sp]
 8005834:	aa03      	add	r2, sp, #12
 8005836:	f7ff fedf 	bl	80055f8 <_printf_common>
 800583a:	3001      	adds	r0, #1
 800583c:	d14a      	bne.n	80058d4 <_printf_i+0x1f8>
 800583e:	f04f 30ff 	mov.w	r0, #4294967295
 8005842:	b004      	add	sp, #16
 8005844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	f043 0320 	orr.w	r3, r3, #32
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	2778      	movs	r7, #120	; 0x78
 8005852:	4832      	ldr	r0, [pc, #200]	; (800591c <_printf_i+0x240>)
 8005854:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	6829      	ldr	r1, [r5, #0]
 800585c:	061f      	lsls	r7, r3, #24
 800585e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005862:	d402      	bmi.n	800586a <_printf_i+0x18e>
 8005864:	065f      	lsls	r7, r3, #25
 8005866:	bf48      	it	mi
 8005868:	b2b6      	uxthmi	r6, r6
 800586a:	07df      	lsls	r7, r3, #31
 800586c:	bf48      	it	mi
 800586e:	f043 0320 	orrmi.w	r3, r3, #32
 8005872:	6029      	str	r1, [r5, #0]
 8005874:	bf48      	it	mi
 8005876:	6023      	strmi	r3, [r4, #0]
 8005878:	b91e      	cbnz	r6, 8005882 <_printf_i+0x1a6>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	f023 0320 	bic.w	r3, r3, #32
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	2310      	movs	r3, #16
 8005884:	e7a6      	b.n	80057d4 <_printf_i+0xf8>
 8005886:	4824      	ldr	r0, [pc, #144]	; (8005918 <_printf_i+0x23c>)
 8005888:	e7e4      	b.n	8005854 <_printf_i+0x178>
 800588a:	4615      	mov	r5, r2
 800588c:	e7bd      	b.n	800580a <_printf_i+0x12e>
 800588e:	682b      	ldr	r3, [r5, #0]
 8005890:	6826      	ldr	r6, [r4, #0]
 8005892:	1d18      	adds	r0, r3, #4
 8005894:	6961      	ldr	r1, [r4, #20]
 8005896:	6028      	str	r0, [r5, #0]
 8005898:	0635      	lsls	r5, r6, #24
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	d501      	bpl.n	80058a2 <_printf_i+0x1c6>
 800589e:	6019      	str	r1, [r3, #0]
 80058a0:	e002      	b.n	80058a8 <_printf_i+0x1cc>
 80058a2:	0670      	lsls	r0, r6, #25
 80058a4:	d5fb      	bpl.n	800589e <_printf_i+0x1c2>
 80058a6:	8019      	strh	r1, [r3, #0]
 80058a8:	2300      	movs	r3, #0
 80058aa:	4615      	mov	r5, r2
 80058ac:	6123      	str	r3, [r4, #16]
 80058ae:	e7bc      	b.n	800582a <_printf_i+0x14e>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	2100      	movs	r1, #0
 80058b4:	1d1a      	adds	r2, r3, #4
 80058b6:	602a      	str	r2, [r5, #0]
 80058b8:	681d      	ldr	r5, [r3, #0]
 80058ba:	6862      	ldr	r2, [r4, #4]
 80058bc:	4628      	mov	r0, r5
 80058be:	f000 fc58 	bl	8006172 <memchr>
 80058c2:	b108      	cbz	r0, 80058c8 <_printf_i+0x1ec>
 80058c4:	1b40      	subs	r0, r0, r5
 80058c6:	6060      	str	r0, [r4, #4]
 80058c8:	6863      	ldr	r3, [r4, #4]
 80058ca:	6123      	str	r3, [r4, #16]
 80058cc:	2300      	movs	r3, #0
 80058ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d2:	e7aa      	b.n	800582a <_printf_i+0x14e>
 80058d4:	462a      	mov	r2, r5
 80058d6:	4649      	mov	r1, r9
 80058d8:	4640      	mov	r0, r8
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	47d0      	blx	sl
 80058de:	3001      	adds	r0, #1
 80058e0:	d0ad      	beq.n	800583e <_printf_i+0x162>
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	079b      	lsls	r3, r3, #30
 80058e6:	d413      	bmi.n	8005910 <_printf_i+0x234>
 80058e8:	68e0      	ldr	r0, [r4, #12]
 80058ea:	9b03      	ldr	r3, [sp, #12]
 80058ec:	4298      	cmp	r0, r3
 80058ee:	bfb8      	it	lt
 80058f0:	4618      	movlt	r0, r3
 80058f2:	e7a6      	b.n	8005842 <_printf_i+0x166>
 80058f4:	2301      	movs	r3, #1
 80058f6:	4632      	mov	r2, r6
 80058f8:	4649      	mov	r1, r9
 80058fa:	4640      	mov	r0, r8
 80058fc:	47d0      	blx	sl
 80058fe:	3001      	adds	r0, #1
 8005900:	d09d      	beq.n	800583e <_printf_i+0x162>
 8005902:	3501      	adds	r5, #1
 8005904:	68e3      	ldr	r3, [r4, #12]
 8005906:	9903      	ldr	r1, [sp, #12]
 8005908:	1a5b      	subs	r3, r3, r1
 800590a:	42ab      	cmp	r3, r5
 800590c:	dcf2      	bgt.n	80058f4 <_printf_i+0x218>
 800590e:	e7eb      	b.n	80058e8 <_printf_i+0x20c>
 8005910:	2500      	movs	r5, #0
 8005912:	f104 0619 	add.w	r6, r4, #25
 8005916:	e7f5      	b.n	8005904 <_printf_i+0x228>
 8005918:	0800a16a 	.word	0x0800a16a
 800591c:	0800a17b 	.word	0x0800a17b

08005920 <_scanf_float>:
 8005920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005924:	b087      	sub	sp, #28
 8005926:	9303      	str	r3, [sp, #12]
 8005928:	688b      	ldr	r3, [r1, #8]
 800592a:	4617      	mov	r7, r2
 800592c:	1e5a      	subs	r2, r3, #1
 800592e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005932:	bf85      	ittet	hi
 8005934:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005938:	195b      	addhi	r3, r3, r5
 800593a:	2300      	movls	r3, #0
 800593c:	9302      	strhi	r3, [sp, #8]
 800593e:	bf88      	it	hi
 8005940:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005944:	468b      	mov	fp, r1
 8005946:	f04f 0500 	mov.w	r5, #0
 800594a:	bf8c      	ite	hi
 800594c:	608b      	strhi	r3, [r1, #8]
 800594e:	9302      	strls	r3, [sp, #8]
 8005950:	680b      	ldr	r3, [r1, #0]
 8005952:	4680      	mov	r8, r0
 8005954:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005958:	f84b 3b1c 	str.w	r3, [fp], #28
 800595c:	460c      	mov	r4, r1
 800595e:	465e      	mov	r6, fp
 8005960:	46aa      	mov	sl, r5
 8005962:	46a9      	mov	r9, r5
 8005964:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005968:	9501      	str	r5, [sp, #4]
 800596a:	68a2      	ldr	r2, [r4, #8]
 800596c:	b152      	cbz	r2, 8005984 <_scanf_float+0x64>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b4e      	cmp	r3, #78	; 0x4e
 8005974:	d864      	bhi.n	8005a40 <_scanf_float+0x120>
 8005976:	2b40      	cmp	r3, #64	; 0x40
 8005978:	d83c      	bhi.n	80059f4 <_scanf_float+0xd4>
 800597a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800597e:	b2c8      	uxtb	r0, r1
 8005980:	280e      	cmp	r0, #14
 8005982:	d93a      	bls.n	80059fa <_scanf_float+0xda>
 8005984:	f1b9 0f00 	cmp.w	r9, #0
 8005988:	d003      	beq.n	8005992 <_scanf_float+0x72>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005996:	f1ba 0f01 	cmp.w	sl, #1
 800599a:	f200 8113 	bhi.w	8005bc4 <_scanf_float+0x2a4>
 800599e:	455e      	cmp	r6, fp
 80059a0:	f200 8105 	bhi.w	8005bae <_scanf_float+0x28e>
 80059a4:	2501      	movs	r5, #1
 80059a6:	4628      	mov	r0, r5
 80059a8:	b007      	add	sp, #28
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80059b2:	2a0d      	cmp	r2, #13
 80059b4:	d8e6      	bhi.n	8005984 <_scanf_float+0x64>
 80059b6:	a101      	add	r1, pc, #4	; (adr r1, 80059bc <_scanf_float+0x9c>)
 80059b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059bc:	08005afb 	.word	0x08005afb
 80059c0:	08005985 	.word	0x08005985
 80059c4:	08005985 	.word	0x08005985
 80059c8:	08005985 	.word	0x08005985
 80059cc:	08005b5b 	.word	0x08005b5b
 80059d0:	08005b33 	.word	0x08005b33
 80059d4:	08005985 	.word	0x08005985
 80059d8:	08005985 	.word	0x08005985
 80059dc:	08005b09 	.word	0x08005b09
 80059e0:	08005985 	.word	0x08005985
 80059e4:	08005985 	.word	0x08005985
 80059e8:	08005985 	.word	0x08005985
 80059ec:	08005985 	.word	0x08005985
 80059f0:	08005ac1 	.word	0x08005ac1
 80059f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80059f8:	e7db      	b.n	80059b2 <_scanf_float+0x92>
 80059fa:	290e      	cmp	r1, #14
 80059fc:	d8c2      	bhi.n	8005984 <_scanf_float+0x64>
 80059fe:	a001      	add	r0, pc, #4	; (adr r0, 8005a04 <_scanf_float+0xe4>)
 8005a00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a04:	08005ab3 	.word	0x08005ab3
 8005a08:	08005985 	.word	0x08005985
 8005a0c:	08005ab3 	.word	0x08005ab3
 8005a10:	08005b47 	.word	0x08005b47
 8005a14:	08005985 	.word	0x08005985
 8005a18:	08005a61 	.word	0x08005a61
 8005a1c:	08005a9d 	.word	0x08005a9d
 8005a20:	08005a9d 	.word	0x08005a9d
 8005a24:	08005a9d 	.word	0x08005a9d
 8005a28:	08005a9d 	.word	0x08005a9d
 8005a2c:	08005a9d 	.word	0x08005a9d
 8005a30:	08005a9d 	.word	0x08005a9d
 8005a34:	08005a9d 	.word	0x08005a9d
 8005a38:	08005a9d 	.word	0x08005a9d
 8005a3c:	08005a9d 	.word	0x08005a9d
 8005a40:	2b6e      	cmp	r3, #110	; 0x6e
 8005a42:	d809      	bhi.n	8005a58 <_scanf_float+0x138>
 8005a44:	2b60      	cmp	r3, #96	; 0x60
 8005a46:	d8b2      	bhi.n	80059ae <_scanf_float+0x8e>
 8005a48:	2b54      	cmp	r3, #84	; 0x54
 8005a4a:	d077      	beq.n	8005b3c <_scanf_float+0x21c>
 8005a4c:	2b59      	cmp	r3, #89	; 0x59
 8005a4e:	d199      	bne.n	8005984 <_scanf_float+0x64>
 8005a50:	2d07      	cmp	r5, #7
 8005a52:	d197      	bne.n	8005984 <_scanf_float+0x64>
 8005a54:	2508      	movs	r5, #8
 8005a56:	e029      	b.n	8005aac <_scanf_float+0x18c>
 8005a58:	2b74      	cmp	r3, #116	; 0x74
 8005a5a:	d06f      	beq.n	8005b3c <_scanf_float+0x21c>
 8005a5c:	2b79      	cmp	r3, #121	; 0x79
 8005a5e:	e7f6      	b.n	8005a4e <_scanf_float+0x12e>
 8005a60:	6821      	ldr	r1, [r4, #0]
 8005a62:	05c8      	lsls	r0, r1, #23
 8005a64:	d51a      	bpl.n	8005a9c <_scanf_float+0x17c>
 8005a66:	9b02      	ldr	r3, [sp, #8]
 8005a68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005a6c:	6021      	str	r1, [r4, #0]
 8005a6e:	f109 0901 	add.w	r9, r9, #1
 8005a72:	b11b      	cbz	r3, 8005a7c <_scanf_float+0x15c>
 8005a74:	3b01      	subs	r3, #1
 8005a76:	3201      	adds	r2, #1
 8005a78:	9302      	str	r3, [sp, #8]
 8005a7a:	60a2      	str	r2, [r4, #8]
 8005a7c:	68a3      	ldr	r3, [r4, #8]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	60a3      	str	r3, [r4, #8]
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	3301      	adds	r3, #1
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	607b      	str	r3, [r7, #4]
 8005a90:	f340 8084 	ble.w	8005b9c <_scanf_float+0x27c>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	3301      	adds	r3, #1
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	e766      	b.n	800596a <_scanf_float+0x4a>
 8005a9c:	eb1a 0f05 	cmn.w	sl, r5
 8005aa0:	f47f af70 	bne.w	8005984 <_scanf_float+0x64>
 8005aa4:	6822      	ldr	r2, [r4, #0]
 8005aa6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005aaa:	6022      	str	r2, [r4, #0]
 8005aac:	f806 3b01 	strb.w	r3, [r6], #1
 8005ab0:	e7e4      	b.n	8005a7c <_scanf_float+0x15c>
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	0610      	lsls	r0, r2, #24
 8005ab6:	f57f af65 	bpl.w	8005984 <_scanf_float+0x64>
 8005aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005abe:	e7f4      	b.n	8005aaa <_scanf_float+0x18a>
 8005ac0:	f1ba 0f00 	cmp.w	sl, #0
 8005ac4:	d10e      	bne.n	8005ae4 <_scanf_float+0x1c4>
 8005ac6:	f1b9 0f00 	cmp.w	r9, #0
 8005aca:	d10e      	bne.n	8005aea <_scanf_float+0x1ca>
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ad2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ad6:	d108      	bne.n	8005aea <_scanf_float+0x1ca>
 8005ad8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005adc:	f04f 0a01 	mov.w	sl, #1
 8005ae0:	6022      	str	r2, [r4, #0]
 8005ae2:	e7e3      	b.n	8005aac <_scanf_float+0x18c>
 8005ae4:	f1ba 0f02 	cmp.w	sl, #2
 8005ae8:	d055      	beq.n	8005b96 <_scanf_float+0x276>
 8005aea:	2d01      	cmp	r5, #1
 8005aec:	d002      	beq.n	8005af4 <_scanf_float+0x1d4>
 8005aee:	2d04      	cmp	r5, #4
 8005af0:	f47f af48 	bne.w	8005984 <_scanf_float+0x64>
 8005af4:	3501      	adds	r5, #1
 8005af6:	b2ed      	uxtb	r5, r5
 8005af8:	e7d8      	b.n	8005aac <_scanf_float+0x18c>
 8005afa:	f1ba 0f01 	cmp.w	sl, #1
 8005afe:	f47f af41 	bne.w	8005984 <_scanf_float+0x64>
 8005b02:	f04f 0a02 	mov.w	sl, #2
 8005b06:	e7d1      	b.n	8005aac <_scanf_float+0x18c>
 8005b08:	b97d      	cbnz	r5, 8005b2a <_scanf_float+0x20a>
 8005b0a:	f1b9 0f00 	cmp.w	r9, #0
 8005b0e:	f47f af3c 	bne.w	800598a <_scanf_float+0x6a>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b1c:	f47f af39 	bne.w	8005992 <_scanf_float+0x72>
 8005b20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b24:	2501      	movs	r5, #1
 8005b26:	6022      	str	r2, [r4, #0]
 8005b28:	e7c0      	b.n	8005aac <_scanf_float+0x18c>
 8005b2a:	2d03      	cmp	r5, #3
 8005b2c:	d0e2      	beq.n	8005af4 <_scanf_float+0x1d4>
 8005b2e:	2d05      	cmp	r5, #5
 8005b30:	e7de      	b.n	8005af0 <_scanf_float+0x1d0>
 8005b32:	2d02      	cmp	r5, #2
 8005b34:	f47f af26 	bne.w	8005984 <_scanf_float+0x64>
 8005b38:	2503      	movs	r5, #3
 8005b3a:	e7b7      	b.n	8005aac <_scanf_float+0x18c>
 8005b3c:	2d06      	cmp	r5, #6
 8005b3e:	f47f af21 	bne.w	8005984 <_scanf_float+0x64>
 8005b42:	2507      	movs	r5, #7
 8005b44:	e7b2      	b.n	8005aac <_scanf_float+0x18c>
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	0591      	lsls	r1, r2, #22
 8005b4a:	f57f af1b 	bpl.w	8005984 <_scanf_float+0x64>
 8005b4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005b52:	6022      	str	r2, [r4, #0]
 8005b54:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b58:	e7a8      	b.n	8005aac <_scanf_float+0x18c>
 8005b5a:	6822      	ldr	r2, [r4, #0]
 8005b5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005b60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005b64:	d006      	beq.n	8005b74 <_scanf_float+0x254>
 8005b66:	0550      	lsls	r0, r2, #21
 8005b68:	f57f af0c 	bpl.w	8005984 <_scanf_float+0x64>
 8005b6c:	f1b9 0f00 	cmp.w	r9, #0
 8005b70:	f43f af0f 	beq.w	8005992 <_scanf_float+0x72>
 8005b74:	0591      	lsls	r1, r2, #22
 8005b76:	bf58      	it	pl
 8005b78:	9901      	ldrpl	r1, [sp, #4]
 8005b7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b7e:	bf58      	it	pl
 8005b80:	eba9 0101 	subpl.w	r1, r9, r1
 8005b84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005b88:	f04f 0900 	mov.w	r9, #0
 8005b8c:	bf58      	it	pl
 8005b8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b92:	6022      	str	r2, [r4, #0]
 8005b94:	e78a      	b.n	8005aac <_scanf_float+0x18c>
 8005b96:	f04f 0a03 	mov.w	sl, #3
 8005b9a:	e787      	b.n	8005aac <_scanf_float+0x18c>
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ba4:	4798      	blx	r3
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	f43f aedf 	beq.w	800596a <_scanf_float+0x4a>
 8005bac:	e6ea      	b.n	8005984 <_scanf_float+0x64>
 8005bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bb2:	463a      	mov	r2, r7
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bba:	4798      	blx	r3
 8005bbc:	6923      	ldr	r3, [r4, #16]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	6123      	str	r3, [r4, #16]
 8005bc2:	e6ec      	b.n	800599e <_scanf_float+0x7e>
 8005bc4:	1e6b      	subs	r3, r5, #1
 8005bc6:	2b06      	cmp	r3, #6
 8005bc8:	d825      	bhi.n	8005c16 <_scanf_float+0x2f6>
 8005bca:	2d02      	cmp	r5, #2
 8005bcc:	d836      	bhi.n	8005c3c <_scanf_float+0x31c>
 8005bce:	455e      	cmp	r6, fp
 8005bd0:	f67f aee8 	bls.w	80059a4 <_scanf_float+0x84>
 8005bd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bd8:	463a      	mov	r2, r7
 8005bda:	4640      	mov	r0, r8
 8005bdc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005be0:	4798      	blx	r3
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	e7f1      	b.n	8005bce <_scanf_float+0x2ae>
 8005bea:	9802      	ldr	r0, [sp, #8]
 8005bec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bf0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005bf4:	463a      	mov	r2, r7
 8005bf6:	9002      	str	r0, [sp, #8]
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	4798      	blx	r3
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c06:	fa5f fa8a 	uxtb.w	sl, sl
 8005c0a:	f1ba 0f02 	cmp.w	sl, #2
 8005c0e:	d1ec      	bne.n	8005bea <_scanf_float+0x2ca>
 8005c10:	3d03      	subs	r5, #3
 8005c12:	b2ed      	uxtb	r5, r5
 8005c14:	1b76      	subs	r6, r6, r5
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	05da      	lsls	r2, r3, #23
 8005c1a:	d52f      	bpl.n	8005c7c <_scanf_float+0x35c>
 8005c1c:	055b      	lsls	r3, r3, #21
 8005c1e:	d510      	bpl.n	8005c42 <_scanf_float+0x322>
 8005c20:	455e      	cmp	r6, fp
 8005c22:	f67f aebf 	bls.w	80059a4 <_scanf_float+0x84>
 8005c26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c2a:	463a      	mov	r2, r7
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c32:	4798      	blx	r3
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	6123      	str	r3, [r4, #16]
 8005c3a:	e7f1      	b.n	8005c20 <_scanf_float+0x300>
 8005c3c:	46aa      	mov	sl, r5
 8005c3e:	9602      	str	r6, [sp, #8]
 8005c40:	e7df      	b.n	8005c02 <_scanf_float+0x2e2>
 8005c42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c46:	6923      	ldr	r3, [r4, #16]
 8005c48:	2965      	cmp	r1, #101	; 0x65
 8005c4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c4e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c52:	6123      	str	r3, [r4, #16]
 8005c54:	d00c      	beq.n	8005c70 <_scanf_float+0x350>
 8005c56:	2945      	cmp	r1, #69	; 0x45
 8005c58:	d00a      	beq.n	8005c70 <_scanf_float+0x350>
 8005c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c5e:	463a      	mov	r2, r7
 8005c60:	4640      	mov	r0, r8
 8005c62:	4798      	blx	r3
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	1eb5      	subs	r5, r6, #2
 8005c6e:	6123      	str	r3, [r4, #16]
 8005c70:	463a      	mov	r2, r7
 8005c72:	4640      	mov	r0, r8
 8005c74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c78:	4798      	blx	r3
 8005c7a:	462e      	mov	r6, r5
 8005c7c:	6825      	ldr	r5, [r4, #0]
 8005c7e:	f015 0510 	ands.w	r5, r5, #16
 8005c82:	d155      	bne.n	8005d30 <_scanf_float+0x410>
 8005c84:	7035      	strb	r5, [r6, #0]
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c90:	d11d      	bne.n	8005cce <_scanf_float+0x3ae>
 8005c92:	9b01      	ldr	r3, [sp, #4]
 8005c94:	454b      	cmp	r3, r9
 8005c96:	eba3 0209 	sub.w	r2, r3, r9
 8005c9a:	d125      	bne.n	8005ce8 <_scanf_float+0x3c8>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	f002 fc99 	bl	80085d8 <_strtod_r>
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	f8d4 c000 	ldr.w	ip, [r4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f01c 0f02 	tst.w	ip, #2
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	460f      	mov	r7, r1
 8005cb6:	f103 0204 	add.w	r2, r3, #4
 8005cba:	d020      	beq.n	8005cfe <_scanf_float+0x3de>
 8005cbc:	9903      	ldr	r1, [sp, #12]
 8005cbe:	600a      	str	r2, [r1, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	e9c3 6700 	strd	r6, r7, [r3]
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60e3      	str	r3, [r4, #12]
 8005ccc:	e66b      	b.n	80059a6 <_scanf_float+0x86>
 8005cce:	9b04      	ldr	r3, [sp, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0e3      	beq.n	8005c9c <_scanf_float+0x37c>
 8005cd4:	9905      	ldr	r1, [sp, #20]
 8005cd6:	230a      	movs	r3, #10
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4640      	mov	r0, r8
 8005cdc:	3101      	adds	r1, #1
 8005cde:	f002 fcff 	bl	80086e0 <_strtol_r>
 8005ce2:	9b04      	ldr	r3, [sp, #16]
 8005ce4:	9e05      	ldr	r6, [sp, #20]
 8005ce6:	1ac2      	subs	r2, r0, r3
 8005ce8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005cec:	429e      	cmp	r6, r3
 8005cee:	bf28      	it	cs
 8005cf0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	490f      	ldr	r1, [pc, #60]	; (8005d34 <_scanf_float+0x414>)
 8005cf8:	f000 f916 	bl	8005f28 <siprintf>
 8005cfc:	e7ce      	b.n	8005c9c <_scanf_float+0x37c>
 8005cfe:	f01c 0f04 	tst.w	ip, #4
 8005d02:	d1db      	bne.n	8005cbc <_scanf_float+0x39c>
 8005d04:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005d08:	f8cc 2000 	str.w	r2, [ip]
 8005d0c:	f8d3 8000 	ldr.w	r8, [r3]
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	f7fa fe84 	bl	8000a20 <__aeabi_dcmpun>
 8005d18:	b128      	cbz	r0, 8005d26 <_scanf_float+0x406>
 8005d1a:	4807      	ldr	r0, [pc, #28]	; (8005d38 <_scanf_float+0x418>)
 8005d1c:	f000 fa38 	bl	8006190 <nanf>
 8005d20:	f8c8 0000 	str.w	r0, [r8]
 8005d24:	e7cf      	b.n	8005cc6 <_scanf_float+0x3a6>
 8005d26:	4630      	mov	r0, r6
 8005d28:	4639      	mov	r1, r7
 8005d2a:	f7fa fed7 	bl	8000adc <__aeabi_d2f>
 8005d2e:	e7f7      	b.n	8005d20 <_scanf_float+0x400>
 8005d30:	2500      	movs	r5, #0
 8005d32:	e638      	b.n	80059a6 <_scanf_float+0x86>
 8005d34:	0800a18c 	.word	0x0800a18c
 8005d38:	0800a538 	.word	0x0800a538

08005d3c <std>:
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	b510      	push	{r4, lr}
 8005d40:	4604      	mov	r4, r0
 8005d42:	e9c0 3300 	strd	r3, r3, [r0]
 8005d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d4a:	6083      	str	r3, [r0, #8]
 8005d4c:	8181      	strh	r1, [r0, #12]
 8005d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d50:	81c2      	strh	r2, [r0, #14]
 8005d52:	6183      	str	r3, [r0, #24]
 8005d54:	4619      	mov	r1, r3
 8005d56:	2208      	movs	r2, #8
 8005d58:	305c      	adds	r0, #92	; 0x5c
 8005d5a:	f000 f974 	bl	8006046 <memset>
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <std+0x58>)
 8005d60:	6224      	str	r4, [r4, #32]
 8005d62:	6263      	str	r3, [r4, #36]	; 0x24
 8005d64:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <std+0x5c>)
 8005d66:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <std+0x60>)
 8005d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <std+0x64>)
 8005d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d70:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <std+0x68>)
 8005d72:	429c      	cmp	r4, r3
 8005d74:	d006      	beq.n	8005d84 <std+0x48>
 8005d76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005d7a:	4294      	cmp	r4, r2
 8005d7c:	d002      	beq.n	8005d84 <std+0x48>
 8005d7e:	33d0      	adds	r3, #208	; 0xd0
 8005d80:	429c      	cmp	r4, r3
 8005d82:	d105      	bne.n	8005d90 <std+0x54>
 8005d84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d8c:	f000 b9e6 	b.w	800615c <__retarget_lock_init_recursive>
 8005d90:	bd10      	pop	{r4, pc}
 8005d92:	bf00      	nop
 8005d94:	08005fbd 	.word	0x08005fbd
 8005d98:	08005fe3 	.word	0x08005fe3
 8005d9c:	0800601b 	.word	0x0800601b
 8005da0:	0800603f 	.word	0x0800603f
 8005da4:	20000450 	.word	0x20000450

08005da8 <stdio_exit_handler>:
 8005da8:	4a02      	ldr	r2, [pc, #8]	; (8005db4 <stdio_exit_handler+0xc>)
 8005daa:	4903      	ldr	r1, [pc, #12]	; (8005db8 <stdio_exit_handler+0x10>)
 8005dac:	4803      	ldr	r0, [pc, #12]	; (8005dbc <stdio_exit_handler+0x14>)
 8005dae:	f000 b869 	b.w	8005e84 <_fwalk_sglue>
 8005db2:	bf00      	nop
 8005db4:	2000000c 	.word	0x2000000c
 8005db8:	080090d5 	.word	0x080090d5
 8005dbc:	20000018 	.word	0x20000018

08005dc0 <cleanup_stdio>:
 8005dc0:	6841      	ldr	r1, [r0, #4]
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <cleanup_stdio+0x34>)
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	4299      	cmp	r1, r3
 8005dc8:	4604      	mov	r4, r0
 8005dca:	d001      	beq.n	8005dd0 <cleanup_stdio+0x10>
 8005dcc:	f003 f982 	bl	80090d4 <_fflush_r>
 8005dd0:	68a1      	ldr	r1, [r4, #8]
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <cleanup_stdio+0x38>)
 8005dd4:	4299      	cmp	r1, r3
 8005dd6:	d002      	beq.n	8005dde <cleanup_stdio+0x1e>
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f003 f97b 	bl	80090d4 <_fflush_r>
 8005dde:	68e1      	ldr	r1, [r4, #12]
 8005de0:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <cleanup_stdio+0x3c>)
 8005de2:	4299      	cmp	r1, r3
 8005de4:	d004      	beq.n	8005df0 <cleanup_stdio+0x30>
 8005de6:	4620      	mov	r0, r4
 8005de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dec:	f003 b972 	b.w	80090d4 <_fflush_r>
 8005df0:	bd10      	pop	{r4, pc}
 8005df2:	bf00      	nop
 8005df4:	20000450 	.word	0x20000450
 8005df8:	200004b8 	.word	0x200004b8
 8005dfc:	20000520 	.word	0x20000520

08005e00 <global_stdio_init.part.0>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <global_stdio_init.part.0+0x30>)
 8005e04:	4c0b      	ldr	r4, [pc, #44]	; (8005e34 <global_stdio_init.part.0+0x34>)
 8005e06:	4a0c      	ldr	r2, [pc, #48]	; (8005e38 <global_stdio_init.part.0+0x38>)
 8005e08:	4620      	mov	r0, r4
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	2104      	movs	r1, #4
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f7ff ff94 	bl	8005d3c <std>
 8005e14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e18:	2201      	movs	r2, #1
 8005e1a:	2109      	movs	r1, #9
 8005e1c:	f7ff ff8e 	bl	8005d3c <std>
 8005e20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e24:	2202      	movs	r2, #2
 8005e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e2a:	2112      	movs	r1, #18
 8005e2c:	f7ff bf86 	b.w	8005d3c <std>
 8005e30:	20000588 	.word	0x20000588
 8005e34:	20000450 	.word	0x20000450
 8005e38:	08005da9 	.word	0x08005da9

08005e3c <__sfp_lock_acquire>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	; (8005e44 <__sfp_lock_acquire+0x8>)
 8005e3e:	f000 b98e 	b.w	800615e <__retarget_lock_acquire_recursive>
 8005e42:	bf00      	nop
 8005e44:	20000591 	.word	0x20000591

08005e48 <__sfp_lock_release>:
 8005e48:	4801      	ldr	r0, [pc, #4]	; (8005e50 <__sfp_lock_release+0x8>)
 8005e4a:	f000 b989 	b.w	8006160 <__retarget_lock_release_recursive>
 8005e4e:	bf00      	nop
 8005e50:	20000591 	.word	0x20000591

08005e54 <__sinit>:
 8005e54:	b510      	push	{r4, lr}
 8005e56:	4604      	mov	r4, r0
 8005e58:	f7ff fff0 	bl	8005e3c <__sfp_lock_acquire>
 8005e5c:	6a23      	ldr	r3, [r4, #32]
 8005e5e:	b11b      	cbz	r3, 8005e68 <__sinit+0x14>
 8005e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e64:	f7ff bff0 	b.w	8005e48 <__sfp_lock_release>
 8005e68:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <__sinit+0x28>)
 8005e6a:	6223      	str	r3, [r4, #32]
 8005e6c:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <__sinit+0x2c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1f5      	bne.n	8005e60 <__sinit+0xc>
 8005e74:	f7ff ffc4 	bl	8005e00 <global_stdio_init.part.0>
 8005e78:	e7f2      	b.n	8005e60 <__sinit+0xc>
 8005e7a:	bf00      	nop
 8005e7c:	08005dc1 	.word	0x08005dc1
 8005e80:	20000588 	.word	0x20000588

08005e84 <_fwalk_sglue>:
 8005e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e88:	4607      	mov	r7, r0
 8005e8a:	4688      	mov	r8, r1
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	2600      	movs	r6, #0
 8005e90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e94:	f1b9 0901 	subs.w	r9, r9, #1
 8005e98:	d505      	bpl.n	8005ea6 <_fwalk_sglue+0x22>
 8005e9a:	6824      	ldr	r4, [r4, #0]
 8005e9c:	2c00      	cmp	r4, #0
 8005e9e:	d1f7      	bne.n	8005e90 <_fwalk_sglue+0xc>
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea6:	89ab      	ldrh	r3, [r5, #12]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d907      	bls.n	8005ebc <_fwalk_sglue+0x38>
 8005eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	d003      	beq.n	8005ebc <_fwalk_sglue+0x38>
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	47c0      	blx	r8
 8005eba:	4306      	orrs	r6, r0
 8005ebc:	3568      	adds	r5, #104	; 0x68
 8005ebe:	e7e9      	b.n	8005e94 <_fwalk_sglue+0x10>

08005ec0 <sniprintf>:
 8005ec0:	b40c      	push	{r2, r3}
 8005ec2:	b530      	push	{r4, r5, lr}
 8005ec4:	4b17      	ldr	r3, [pc, #92]	; (8005f24 <sniprintf+0x64>)
 8005ec6:	1e0c      	subs	r4, r1, #0
 8005ec8:	681d      	ldr	r5, [r3, #0]
 8005eca:	b09d      	sub	sp, #116	; 0x74
 8005ecc:	da08      	bge.n	8005ee0 <sniprintf+0x20>
 8005ece:	238b      	movs	r3, #139	; 0x8b
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	602b      	str	r3, [r5, #0]
 8005ed6:	b01d      	add	sp, #116	; 0x74
 8005ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005edc:	b002      	add	sp, #8
 8005ede:	4770      	bx	lr
 8005ee0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005ee4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ee8:	bf0c      	ite	eq
 8005eea:	4623      	moveq	r3, r4
 8005eec:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	9307      	str	r3, [sp, #28]
 8005ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ef8:	9002      	str	r0, [sp, #8]
 8005efa:	9006      	str	r0, [sp, #24]
 8005efc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f00:	4628      	mov	r0, r5
 8005f02:	ab21      	add	r3, sp, #132	; 0x84
 8005f04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f06:	a902      	add	r1, sp, #8
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	f002 fc45 	bl	8008798 <_svfiprintf_r>
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	bfbc      	itt	lt
 8005f12:	238b      	movlt	r3, #139	; 0x8b
 8005f14:	602b      	strlt	r3, [r5, #0]
 8005f16:	2c00      	cmp	r4, #0
 8005f18:	d0dd      	beq.n	8005ed6 <sniprintf+0x16>
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	9b02      	ldr	r3, [sp, #8]
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	e7d9      	b.n	8005ed6 <sniprintf+0x16>
 8005f22:	bf00      	nop
 8005f24:	20000064 	.word	0x20000064

08005f28 <siprintf>:
 8005f28:	b40e      	push	{r1, r2, r3}
 8005f2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f2e:	b500      	push	{lr}
 8005f30:	b09c      	sub	sp, #112	; 0x70
 8005f32:	ab1d      	add	r3, sp, #116	; 0x74
 8005f34:	9002      	str	r0, [sp, #8]
 8005f36:	9006      	str	r0, [sp, #24]
 8005f38:	9107      	str	r1, [sp, #28]
 8005f3a:	9104      	str	r1, [sp, #16]
 8005f3c:	4808      	ldr	r0, [pc, #32]	; (8005f60 <siprintf+0x38>)
 8005f3e:	4909      	ldr	r1, [pc, #36]	; (8005f64 <siprintf+0x3c>)
 8005f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f44:	9105      	str	r1, [sp, #20]
 8005f46:	6800      	ldr	r0, [r0, #0]
 8005f48:	a902      	add	r1, sp, #8
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	f002 fc24 	bl	8008798 <_svfiprintf_r>
 8005f50:	2200      	movs	r2, #0
 8005f52:	9b02      	ldr	r3, [sp, #8]
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	b01c      	add	sp, #112	; 0x70
 8005f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f5c:	b003      	add	sp, #12
 8005f5e:	4770      	bx	lr
 8005f60:	20000064 	.word	0x20000064
 8005f64:	ffff0208 	.word	0xffff0208

08005f68 <siscanf>:
 8005f68:	b40e      	push	{r1, r2, r3}
 8005f6a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005f6e:	b530      	push	{r4, r5, lr}
 8005f70:	b09c      	sub	sp, #112	; 0x70
 8005f72:	ac1f      	add	r4, sp, #124	; 0x7c
 8005f74:	f854 5b04 	ldr.w	r5, [r4], #4
 8005f78:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005f7c:	9002      	str	r0, [sp, #8]
 8005f7e:	9006      	str	r0, [sp, #24]
 8005f80:	f7fa f8f0 	bl	8000164 <strlen>
 8005f84:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <siscanf+0x4c>)
 8005f86:	9003      	str	r0, [sp, #12]
 8005f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f8e:	9314      	str	r3, [sp, #80]	; 0x50
 8005f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f94:	9007      	str	r0, [sp, #28]
 8005f96:	4808      	ldr	r0, [pc, #32]	; (8005fb8 <siscanf+0x50>)
 8005f98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	4623      	mov	r3, r4
 8005fa0:	a902      	add	r1, sp, #8
 8005fa2:	6800      	ldr	r0, [r0, #0]
 8005fa4:	9401      	str	r4, [sp, #4]
 8005fa6:	f002 fd4f 	bl	8008a48 <__ssvfiscanf_r>
 8005faa:	b01c      	add	sp, #112	; 0x70
 8005fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fb0:	b003      	add	sp, #12
 8005fb2:	4770      	bx	lr
 8005fb4:	08005fdf 	.word	0x08005fdf
 8005fb8:	20000064 	.word	0x20000064

08005fbc <__sread>:
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc4:	f000 f87c 	bl	80060c0 <_read_r>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	bfab      	itete	ge
 8005fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fce:	89a3      	ldrhlt	r3, [r4, #12]
 8005fd0:	181b      	addge	r3, r3, r0
 8005fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fd6:	bfac      	ite	ge
 8005fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fda:	81a3      	strhlt	r3, [r4, #12]
 8005fdc:	bd10      	pop	{r4, pc}

08005fde <__seofread>:
 8005fde:	2000      	movs	r0, #0
 8005fe0:	4770      	bx	lr

08005fe2 <__swrite>:
 8005fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe6:	461f      	mov	r7, r3
 8005fe8:	898b      	ldrh	r3, [r1, #12]
 8005fea:	4605      	mov	r5, r0
 8005fec:	05db      	lsls	r3, r3, #23
 8005fee:	460c      	mov	r4, r1
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	d505      	bpl.n	8006000 <__swrite+0x1e>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffc:	f000 f84e 	bl	800609c <_lseek_r>
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	4632      	mov	r2, r6
 8006004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006008:	81a3      	strh	r3, [r4, #12]
 800600a:	4628      	mov	r0, r5
 800600c:	463b      	mov	r3, r7
 800600e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006016:	f000 b865 	b.w	80060e4 <_write_r>

0800601a <__sseek>:
 800601a:	b510      	push	{r4, lr}
 800601c:	460c      	mov	r4, r1
 800601e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006022:	f000 f83b 	bl	800609c <_lseek_r>
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	bf15      	itete	ne
 800602c:	6560      	strne	r0, [r4, #84]	; 0x54
 800602e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006036:	81a3      	strheq	r3, [r4, #12]
 8006038:	bf18      	it	ne
 800603a:	81a3      	strhne	r3, [r4, #12]
 800603c:	bd10      	pop	{r4, pc}

0800603e <__sclose>:
 800603e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006042:	f000 b81b 	b.w	800607c <_close_r>

08006046 <memset>:
 8006046:	4603      	mov	r3, r0
 8006048:	4402      	add	r2, r0
 800604a:	4293      	cmp	r3, r2
 800604c:	d100      	bne.n	8006050 <memset+0xa>
 800604e:	4770      	bx	lr
 8006050:	f803 1b01 	strb.w	r1, [r3], #1
 8006054:	e7f9      	b.n	800604a <memset+0x4>

08006056 <strcat>:
 8006056:	4602      	mov	r2, r0
 8006058:	b510      	push	{r4, lr}
 800605a:	7814      	ldrb	r4, [r2, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	3201      	adds	r2, #1
 8006060:	2c00      	cmp	r4, #0
 8006062:	d1fa      	bne.n	800605a <strcat+0x4>
 8006064:	3b01      	subs	r3, #1
 8006066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800606a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800606e:	2a00      	cmp	r2, #0
 8006070:	d1f9      	bne.n	8006066 <strcat+0x10>
 8006072:	bd10      	pop	{r4, pc}

08006074 <_localeconv_r>:
 8006074:	4800      	ldr	r0, [pc, #0]	; (8006078 <_localeconv_r+0x4>)
 8006076:	4770      	bx	lr
 8006078:	20000158 	.word	0x20000158

0800607c <_close_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	2300      	movs	r3, #0
 8006080:	4d05      	ldr	r5, [pc, #20]	; (8006098 <_close_r+0x1c>)
 8006082:	4604      	mov	r4, r0
 8006084:	4608      	mov	r0, r1
 8006086:	602b      	str	r3, [r5, #0]
 8006088:	f7fb fb0a 	bl	80016a0 <_close>
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	d102      	bne.n	8006096 <_close_r+0x1a>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	b103      	cbz	r3, 8006096 <_close_r+0x1a>
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	bd38      	pop	{r3, r4, r5, pc}
 8006098:	2000058c 	.word	0x2000058c

0800609c <_lseek_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	4611      	mov	r1, r2
 80060a4:	2200      	movs	r2, #0
 80060a6:	4d05      	ldr	r5, [pc, #20]	; (80060bc <_lseek_r+0x20>)
 80060a8:	602a      	str	r2, [r5, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f7fb fb1c 	bl	80016e8 <_lseek>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_lseek_r+0x1e>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_lseek_r+0x1e>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	2000058c 	.word	0x2000058c

080060c0 <_read_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4604      	mov	r4, r0
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	2200      	movs	r2, #0
 80060ca:	4d05      	ldr	r5, [pc, #20]	; (80060e0 <_read_r+0x20>)
 80060cc:	602a      	str	r2, [r5, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	f7fb faad 	bl	800162e <_read>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_read_r+0x1e>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b103      	cbz	r3, 80060de <_read_r+0x1e>
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	2000058c 	.word	0x2000058c

080060e4 <_write_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4604      	mov	r4, r0
 80060e8:	4608      	mov	r0, r1
 80060ea:	4611      	mov	r1, r2
 80060ec:	2200      	movs	r2, #0
 80060ee:	4d05      	ldr	r5, [pc, #20]	; (8006104 <_write_r+0x20>)
 80060f0:	602a      	str	r2, [r5, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	f7fb fab8 	bl	8001668 <_write>
 80060f8:	1c43      	adds	r3, r0, #1
 80060fa:	d102      	bne.n	8006102 <_write_r+0x1e>
 80060fc:	682b      	ldr	r3, [r5, #0]
 80060fe:	b103      	cbz	r3, 8006102 <_write_r+0x1e>
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	bd38      	pop	{r3, r4, r5, pc}
 8006104:	2000058c 	.word	0x2000058c

08006108 <__errno>:
 8006108:	4b01      	ldr	r3, [pc, #4]	; (8006110 <__errno+0x8>)
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	20000064 	.word	0x20000064

08006114 <__libc_init_array>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	2600      	movs	r6, #0
 8006118:	4d0c      	ldr	r5, [pc, #48]	; (800614c <__libc_init_array+0x38>)
 800611a:	4c0d      	ldr	r4, [pc, #52]	; (8006150 <__libc_init_array+0x3c>)
 800611c:	1b64      	subs	r4, r4, r5
 800611e:	10a4      	asrs	r4, r4, #2
 8006120:	42a6      	cmp	r6, r4
 8006122:	d109      	bne.n	8006138 <__libc_init_array+0x24>
 8006124:	f003 ffce 	bl	800a0c4 <_init>
 8006128:	2600      	movs	r6, #0
 800612a:	4d0a      	ldr	r5, [pc, #40]	; (8006154 <__libc_init_array+0x40>)
 800612c:	4c0a      	ldr	r4, [pc, #40]	; (8006158 <__libc_init_array+0x44>)
 800612e:	1b64      	subs	r4, r4, r5
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	42a6      	cmp	r6, r4
 8006134:	d105      	bne.n	8006142 <__libc_init_array+0x2e>
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	f855 3b04 	ldr.w	r3, [r5], #4
 800613c:	4798      	blx	r3
 800613e:	3601      	adds	r6, #1
 8006140:	e7ee      	b.n	8006120 <__libc_init_array+0xc>
 8006142:	f855 3b04 	ldr.w	r3, [r5], #4
 8006146:	4798      	blx	r3
 8006148:	3601      	adds	r6, #1
 800614a:	e7f2      	b.n	8006132 <__libc_init_array+0x1e>
 800614c:	0800a59c 	.word	0x0800a59c
 8006150:	0800a59c 	.word	0x0800a59c
 8006154:	0800a59c 	.word	0x0800a59c
 8006158:	0800a5a0 	.word	0x0800a5a0

0800615c <__retarget_lock_init_recursive>:
 800615c:	4770      	bx	lr

0800615e <__retarget_lock_acquire_recursive>:
 800615e:	4770      	bx	lr

08006160 <__retarget_lock_release_recursive>:
 8006160:	4770      	bx	lr

08006162 <strcpy>:
 8006162:	4603      	mov	r3, r0
 8006164:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006168:	f803 2b01 	strb.w	r2, [r3], #1
 800616c:	2a00      	cmp	r2, #0
 800616e:	d1f9      	bne.n	8006164 <strcpy+0x2>
 8006170:	4770      	bx	lr

08006172 <memchr>:
 8006172:	4603      	mov	r3, r0
 8006174:	b510      	push	{r4, lr}
 8006176:	b2c9      	uxtb	r1, r1
 8006178:	4402      	add	r2, r0
 800617a:	4293      	cmp	r3, r2
 800617c:	4618      	mov	r0, r3
 800617e:	d101      	bne.n	8006184 <memchr+0x12>
 8006180:	2000      	movs	r0, #0
 8006182:	e003      	b.n	800618c <memchr+0x1a>
 8006184:	7804      	ldrb	r4, [r0, #0]
 8006186:	3301      	adds	r3, #1
 8006188:	428c      	cmp	r4, r1
 800618a:	d1f6      	bne.n	800617a <memchr+0x8>
 800618c:	bd10      	pop	{r4, pc}
	...

08006190 <nanf>:
 8006190:	4800      	ldr	r0, [pc, #0]	; (8006194 <nanf+0x4>)
 8006192:	4770      	bx	lr
 8006194:	7fc00000 	.word	0x7fc00000

08006198 <quorem>:
 8006198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	6903      	ldr	r3, [r0, #16]
 800619e:	690c      	ldr	r4, [r1, #16]
 80061a0:	4607      	mov	r7, r0
 80061a2:	42a3      	cmp	r3, r4
 80061a4:	db7f      	blt.n	80062a6 <quorem+0x10e>
 80061a6:	3c01      	subs	r4, #1
 80061a8:	f100 0514 	add.w	r5, r0, #20
 80061ac:	f101 0814 	add.w	r8, r1, #20
 80061b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061be:	3301      	adds	r3, #1
 80061c0:	429a      	cmp	r2, r3
 80061c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80061c6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061ce:	d331      	bcc.n	8006234 <quorem+0x9c>
 80061d0:	f04f 0e00 	mov.w	lr, #0
 80061d4:	4640      	mov	r0, r8
 80061d6:	46ac      	mov	ip, r5
 80061d8:	46f2      	mov	sl, lr
 80061da:	f850 2b04 	ldr.w	r2, [r0], #4
 80061de:	b293      	uxth	r3, r2
 80061e0:	fb06 e303 	mla	r3, r6, r3, lr
 80061e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061e8:	0c1a      	lsrs	r2, r3, #16
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	fb06 220e 	mla	r2, r6, lr, r2
 80061f0:	ebaa 0303 	sub.w	r3, sl, r3
 80061f4:	f8dc a000 	ldr.w	sl, [ip]
 80061f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061fc:	fa1f fa8a 	uxth.w	sl, sl
 8006200:	4453      	add	r3, sl
 8006202:	f8dc a000 	ldr.w	sl, [ip]
 8006206:	b292      	uxth	r2, r2
 8006208:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800620c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006210:	b29b      	uxth	r3, r3
 8006212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006216:	4581      	cmp	r9, r0
 8006218:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800621c:	f84c 3b04 	str.w	r3, [ip], #4
 8006220:	d2db      	bcs.n	80061da <quorem+0x42>
 8006222:	f855 300b 	ldr.w	r3, [r5, fp]
 8006226:	b92b      	cbnz	r3, 8006234 <quorem+0x9c>
 8006228:	9b01      	ldr	r3, [sp, #4]
 800622a:	3b04      	subs	r3, #4
 800622c:	429d      	cmp	r5, r3
 800622e:	461a      	mov	r2, r3
 8006230:	d32d      	bcc.n	800628e <quorem+0xf6>
 8006232:	613c      	str	r4, [r7, #16]
 8006234:	4638      	mov	r0, r7
 8006236:	f001 f9df 	bl	80075f8 <__mcmp>
 800623a:	2800      	cmp	r0, #0
 800623c:	db23      	blt.n	8006286 <quorem+0xee>
 800623e:	4629      	mov	r1, r5
 8006240:	2000      	movs	r0, #0
 8006242:	3601      	adds	r6, #1
 8006244:	f858 2b04 	ldr.w	r2, [r8], #4
 8006248:	f8d1 c000 	ldr.w	ip, [r1]
 800624c:	b293      	uxth	r3, r2
 800624e:	1ac3      	subs	r3, r0, r3
 8006250:	0c12      	lsrs	r2, r2, #16
 8006252:	fa1f f08c 	uxth.w	r0, ip
 8006256:	4403      	add	r3, r0
 8006258:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800625c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006260:	b29b      	uxth	r3, r3
 8006262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006266:	45c1      	cmp	r9, r8
 8006268:	ea4f 4022 	mov.w	r0, r2, asr #16
 800626c:	f841 3b04 	str.w	r3, [r1], #4
 8006270:	d2e8      	bcs.n	8006244 <quorem+0xac>
 8006272:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800627a:	b922      	cbnz	r2, 8006286 <quorem+0xee>
 800627c:	3b04      	subs	r3, #4
 800627e:	429d      	cmp	r5, r3
 8006280:	461a      	mov	r2, r3
 8006282:	d30a      	bcc.n	800629a <quorem+0x102>
 8006284:	613c      	str	r4, [r7, #16]
 8006286:	4630      	mov	r0, r6
 8006288:	b003      	add	sp, #12
 800628a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	3b04      	subs	r3, #4
 8006292:	2a00      	cmp	r2, #0
 8006294:	d1cd      	bne.n	8006232 <quorem+0x9a>
 8006296:	3c01      	subs	r4, #1
 8006298:	e7c8      	b.n	800622c <quorem+0x94>
 800629a:	6812      	ldr	r2, [r2, #0]
 800629c:	3b04      	subs	r3, #4
 800629e:	2a00      	cmp	r2, #0
 80062a0:	d1f0      	bne.n	8006284 <quorem+0xec>
 80062a2:	3c01      	subs	r4, #1
 80062a4:	e7eb      	b.n	800627e <quorem+0xe6>
 80062a6:	2000      	movs	r0, #0
 80062a8:	e7ee      	b.n	8006288 <quorem+0xf0>
 80062aa:	0000      	movs	r0, r0
 80062ac:	0000      	movs	r0, r0
	...

080062b0 <_dtoa_r>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	4616      	mov	r6, r2
 80062b6:	461f      	mov	r7, r3
 80062b8:	69c4      	ldr	r4, [r0, #28]
 80062ba:	b099      	sub	sp, #100	; 0x64
 80062bc:	4605      	mov	r5, r0
 80062be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80062c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80062c6:	b974      	cbnz	r4, 80062e6 <_dtoa_r+0x36>
 80062c8:	2010      	movs	r0, #16
 80062ca:	f000 fe1d 	bl	8006f08 <malloc>
 80062ce:	4602      	mov	r2, r0
 80062d0:	61e8      	str	r0, [r5, #28]
 80062d2:	b920      	cbnz	r0, 80062de <_dtoa_r+0x2e>
 80062d4:	21ef      	movs	r1, #239	; 0xef
 80062d6:	4bac      	ldr	r3, [pc, #688]	; (8006588 <_dtoa_r+0x2d8>)
 80062d8:	48ac      	ldr	r0, [pc, #688]	; (800658c <_dtoa_r+0x2dc>)
 80062da:	f002 ffe5 	bl	80092a8 <__assert_func>
 80062de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062e2:	6004      	str	r4, [r0, #0]
 80062e4:	60c4      	str	r4, [r0, #12]
 80062e6:	69eb      	ldr	r3, [r5, #28]
 80062e8:	6819      	ldr	r1, [r3, #0]
 80062ea:	b151      	cbz	r1, 8006302 <_dtoa_r+0x52>
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	2301      	movs	r3, #1
 80062f0:	4093      	lsls	r3, r2
 80062f2:	604a      	str	r2, [r1, #4]
 80062f4:	608b      	str	r3, [r1, #8]
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 fefa 	bl	80070f0 <_Bfree>
 80062fc:	2200      	movs	r2, #0
 80062fe:	69eb      	ldr	r3, [r5, #28]
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	1e3b      	subs	r3, r7, #0
 8006304:	bfaf      	iteee	ge
 8006306:	2300      	movge	r3, #0
 8006308:	2201      	movlt	r2, #1
 800630a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800630e:	9305      	strlt	r3, [sp, #20]
 8006310:	bfa8      	it	ge
 8006312:	f8c8 3000 	strge.w	r3, [r8]
 8006316:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800631a:	4b9d      	ldr	r3, [pc, #628]	; (8006590 <_dtoa_r+0x2e0>)
 800631c:	bfb8      	it	lt
 800631e:	f8c8 2000 	strlt.w	r2, [r8]
 8006322:	ea33 0309 	bics.w	r3, r3, r9
 8006326:	d119      	bne.n	800635c <_dtoa_r+0xac>
 8006328:	f242 730f 	movw	r3, #9999	; 0x270f
 800632c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006334:	4333      	orrs	r3, r6
 8006336:	f000 8589 	beq.w	8006e4c <_dtoa_r+0xb9c>
 800633a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800633c:	b953      	cbnz	r3, 8006354 <_dtoa_r+0xa4>
 800633e:	4b95      	ldr	r3, [pc, #596]	; (8006594 <_dtoa_r+0x2e4>)
 8006340:	e023      	b.n	800638a <_dtoa_r+0xda>
 8006342:	4b95      	ldr	r3, [pc, #596]	; (8006598 <_dtoa_r+0x2e8>)
 8006344:	9303      	str	r3, [sp, #12]
 8006346:	3308      	adds	r3, #8
 8006348:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	9803      	ldr	r0, [sp, #12]
 800634e:	b019      	add	sp, #100	; 0x64
 8006350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006354:	4b8f      	ldr	r3, [pc, #572]	; (8006594 <_dtoa_r+0x2e4>)
 8006356:	9303      	str	r3, [sp, #12]
 8006358:	3303      	adds	r3, #3
 800635a:	e7f5      	b.n	8006348 <_dtoa_r+0x98>
 800635c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006360:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006368:	2200      	movs	r2, #0
 800636a:	2300      	movs	r3, #0
 800636c:	f7fa fb26 	bl	80009bc <__aeabi_dcmpeq>
 8006370:	4680      	mov	r8, r0
 8006372:	b160      	cbz	r0, 800638e <_dtoa_r+0xde>
 8006374:	2301      	movs	r3, #1
 8006376:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8562 	beq.w	8006e46 <_dtoa_r+0xb96>
 8006382:	4b86      	ldr	r3, [pc, #536]	; (800659c <_dtoa_r+0x2ec>)
 8006384:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	3b01      	subs	r3, #1
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	e7de      	b.n	800634c <_dtoa_r+0x9c>
 800638e:	ab16      	add	r3, sp, #88	; 0x58
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	ab17      	add	r3, sp, #92	; 0x5c
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	4628      	mov	r0, r5
 8006398:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800639c:	f001 fa3c 	bl	8007818 <__d2b>
 80063a0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063a4:	4682      	mov	sl, r0
 80063a6:	2c00      	cmp	r4, #0
 80063a8:	d07e      	beq.n	80064a8 <_dtoa_r+0x1f8>
 80063aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063b0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80063b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063b8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80063bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063c0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80063c4:	4619      	mov	r1, r3
 80063c6:	2200      	movs	r2, #0
 80063c8:	4b75      	ldr	r3, [pc, #468]	; (80065a0 <_dtoa_r+0x2f0>)
 80063ca:	f7f9 fed7 	bl	800017c <__aeabi_dsub>
 80063ce:	a368      	add	r3, pc, #416	; (adr r3, 8006570 <_dtoa_r+0x2c0>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f7fa f88a 	bl	80004ec <__aeabi_dmul>
 80063d8:	a367      	add	r3, pc, #412	; (adr r3, 8006578 <_dtoa_r+0x2c8>)
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	f7f9 fecf 	bl	8000180 <__adddf3>
 80063e2:	4606      	mov	r6, r0
 80063e4:	4620      	mov	r0, r4
 80063e6:	460f      	mov	r7, r1
 80063e8:	f7fa f816 	bl	8000418 <__aeabi_i2d>
 80063ec:	a364      	add	r3, pc, #400	; (adr r3, 8006580 <_dtoa_r+0x2d0>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f7fa f87b 	bl	80004ec <__aeabi_dmul>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4630      	mov	r0, r6
 80063fc:	4639      	mov	r1, r7
 80063fe:	f7f9 febf 	bl	8000180 <__adddf3>
 8006402:	4606      	mov	r6, r0
 8006404:	460f      	mov	r7, r1
 8006406:	f7fa fb21 	bl	8000a4c <__aeabi_d2iz>
 800640a:	2200      	movs	r2, #0
 800640c:	4683      	mov	fp, r0
 800640e:	2300      	movs	r3, #0
 8006410:	4630      	mov	r0, r6
 8006412:	4639      	mov	r1, r7
 8006414:	f7fa fadc 	bl	80009d0 <__aeabi_dcmplt>
 8006418:	b148      	cbz	r0, 800642e <_dtoa_r+0x17e>
 800641a:	4658      	mov	r0, fp
 800641c:	f7f9 fffc 	bl	8000418 <__aeabi_i2d>
 8006420:	4632      	mov	r2, r6
 8006422:	463b      	mov	r3, r7
 8006424:	f7fa faca 	bl	80009bc <__aeabi_dcmpeq>
 8006428:	b908      	cbnz	r0, 800642e <_dtoa_r+0x17e>
 800642a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800642e:	f1bb 0f16 	cmp.w	fp, #22
 8006432:	d857      	bhi.n	80064e4 <_dtoa_r+0x234>
 8006434:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006438:	4b5a      	ldr	r3, [pc, #360]	; (80065a4 <_dtoa_r+0x2f4>)
 800643a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f7fa fac5 	bl	80009d0 <__aeabi_dcmplt>
 8006446:	2800      	cmp	r0, #0
 8006448:	d04e      	beq.n	80064e8 <_dtoa_r+0x238>
 800644a:	2300      	movs	r3, #0
 800644c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006450:	930f      	str	r3, [sp, #60]	; 0x3c
 8006452:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006454:	1b1b      	subs	r3, r3, r4
 8006456:	1e5a      	subs	r2, r3, #1
 8006458:	bf46      	itte	mi
 800645a:	f1c3 0901 	rsbmi	r9, r3, #1
 800645e:	2300      	movmi	r3, #0
 8006460:	f04f 0900 	movpl.w	r9, #0
 8006464:	9209      	str	r2, [sp, #36]	; 0x24
 8006466:	bf48      	it	mi
 8006468:	9309      	strmi	r3, [sp, #36]	; 0x24
 800646a:	f1bb 0f00 	cmp.w	fp, #0
 800646e:	db3d      	blt.n	80064ec <_dtoa_r+0x23c>
 8006470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006472:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006476:	445b      	add	r3, fp
 8006478:	9309      	str	r3, [sp, #36]	; 0x24
 800647a:	2300      	movs	r3, #0
 800647c:	930a      	str	r3, [sp, #40]	; 0x28
 800647e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006480:	2b09      	cmp	r3, #9
 8006482:	d867      	bhi.n	8006554 <_dtoa_r+0x2a4>
 8006484:	2b05      	cmp	r3, #5
 8006486:	bfc4      	itt	gt
 8006488:	3b04      	subgt	r3, #4
 800648a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800648c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800648e:	bfc8      	it	gt
 8006490:	2400      	movgt	r4, #0
 8006492:	f1a3 0302 	sub.w	r3, r3, #2
 8006496:	bfd8      	it	le
 8006498:	2401      	movle	r4, #1
 800649a:	2b03      	cmp	r3, #3
 800649c:	f200 8086 	bhi.w	80065ac <_dtoa_r+0x2fc>
 80064a0:	e8df f003 	tbb	[pc, r3]
 80064a4:	5637392c 	.word	0x5637392c
 80064a8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80064ac:	441c      	add	r4, r3
 80064ae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	bfc1      	itttt	gt
 80064b6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064ba:	fa09 f903 	lslgt.w	r9, r9, r3
 80064be:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80064c2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80064c6:	bfd6      	itet	le
 80064c8:	f1c3 0320 	rsble	r3, r3, #32
 80064cc:	ea49 0003 	orrgt.w	r0, r9, r3
 80064d0:	fa06 f003 	lslle.w	r0, r6, r3
 80064d4:	f7f9 ff90 	bl	80003f8 <__aeabi_ui2d>
 80064d8:	2201      	movs	r2, #1
 80064da:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80064de:	3c01      	subs	r4, #1
 80064e0:	9213      	str	r2, [sp, #76]	; 0x4c
 80064e2:	e76f      	b.n	80063c4 <_dtoa_r+0x114>
 80064e4:	2301      	movs	r3, #1
 80064e6:	e7b3      	b.n	8006450 <_dtoa_r+0x1a0>
 80064e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80064ea:	e7b2      	b.n	8006452 <_dtoa_r+0x1a2>
 80064ec:	f1cb 0300 	rsb	r3, fp, #0
 80064f0:	930a      	str	r3, [sp, #40]	; 0x28
 80064f2:	2300      	movs	r3, #0
 80064f4:	eba9 090b 	sub.w	r9, r9, fp
 80064f8:	930e      	str	r3, [sp, #56]	; 0x38
 80064fa:	e7c0      	b.n	800647e <_dtoa_r+0x1ce>
 80064fc:	2300      	movs	r3, #0
 80064fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006500:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006502:	2b00      	cmp	r3, #0
 8006504:	dc55      	bgt.n	80065b2 <_dtoa_r+0x302>
 8006506:	2301      	movs	r3, #1
 8006508:	461a      	mov	r2, r3
 800650a:	9306      	str	r3, [sp, #24]
 800650c:	9308      	str	r3, [sp, #32]
 800650e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006510:	e00b      	b.n	800652a <_dtoa_r+0x27a>
 8006512:	2301      	movs	r3, #1
 8006514:	e7f3      	b.n	80064fe <_dtoa_r+0x24e>
 8006516:	2300      	movs	r3, #0
 8006518:	930b      	str	r3, [sp, #44]	; 0x2c
 800651a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800651c:	445b      	add	r3, fp
 800651e:	9306      	str	r3, [sp, #24]
 8006520:	3301      	adds	r3, #1
 8006522:	2b01      	cmp	r3, #1
 8006524:	9308      	str	r3, [sp, #32]
 8006526:	bfb8      	it	lt
 8006528:	2301      	movlt	r3, #1
 800652a:	2100      	movs	r1, #0
 800652c:	2204      	movs	r2, #4
 800652e:	69e8      	ldr	r0, [r5, #28]
 8006530:	f102 0614 	add.w	r6, r2, #20
 8006534:	429e      	cmp	r6, r3
 8006536:	d940      	bls.n	80065ba <_dtoa_r+0x30a>
 8006538:	6041      	str	r1, [r0, #4]
 800653a:	4628      	mov	r0, r5
 800653c:	f000 fd98 	bl	8007070 <_Balloc>
 8006540:	9003      	str	r0, [sp, #12]
 8006542:	2800      	cmp	r0, #0
 8006544:	d13c      	bne.n	80065c0 <_dtoa_r+0x310>
 8006546:	4602      	mov	r2, r0
 8006548:	f240 11af 	movw	r1, #431	; 0x1af
 800654c:	4b16      	ldr	r3, [pc, #88]	; (80065a8 <_dtoa_r+0x2f8>)
 800654e:	e6c3      	b.n	80062d8 <_dtoa_r+0x28>
 8006550:	2301      	movs	r3, #1
 8006552:	e7e1      	b.n	8006518 <_dtoa_r+0x268>
 8006554:	2401      	movs	r4, #1
 8006556:	2300      	movs	r3, #0
 8006558:	940b      	str	r4, [sp, #44]	; 0x2c
 800655a:	9322      	str	r3, [sp, #136]	; 0x88
 800655c:	f04f 33ff 	mov.w	r3, #4294967295
 8006560:	2200      	movs	r2, #0
 8006562:	9306      	str	r3, [sp, #24]
 8006564:	9308      	str	r3, [sp, #32]
 8006566:	2312      	movs	r3, #18
 8006568:	e7d1      	b.n	800650e <_dtoa_r+0x25e>
 800656a:	bf00      	nop
 800656c:	f3af 8000 	nop.w
 8006570:	636f4361 	.word	0x636f4361
 8006574:	3fd287a7 	.word	0x3fd287a7
 8006578:	8b60c8b3 	.word	0x8b60c8b3
 800657c:	3fc68a28 	.word	0x3fc68a28
 8006580:	509f79fb 	.word	0x509f79fb
 8006584:	3fd34413 	.word	0x3fd34413
 8006588:	0800a19e 	.word	0x0800a19e
 800658c:	0800a1b5 	.word	0x0800a1b5
 8006590:	7ff00000 	.word	0x7ff00000
 8006594:	0800a19a 	.word	0x0800a19a
 8006598:	0800a191 	.word	0x0800a191
 800659c:	0800a4f1 	.word	0x0800a4f1
 80065a0:	3ff80000 	.word	0x3ff80000
 80065a4:	0800a2a0 	.word	0x0800a2a0
 80065a8:	0800a20d 	.word	0x0800a20d
 80065ac:	2301      	movs	r3, #1
 80065ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b0:	e7d4      	b.n	800655c <_dtoa_r+0x2ac>
 80065b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065b4:	9306      	str	r3, [sp, #24]
 80065b6:	9308      	str	r3, [sp, #32]
 80065b8:	e7b7      	b.n	800652a <_dtoa_r+0x27a>
 80065ba:	3101      	adds	r1, #1
 80065bc:	0052      	lsls	r2, r2, #1
 80065be:	e7b7      	b.n	8006530 <_dtoa_r+0x280>
 80065c0:	69eb      	ldr	r3, [r5, #28]
 80065c2:	9a03      	ldr	r2, [sp, #12]
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	9b08      	ldr	r3, [sp, #32]
 80065c8:	2b0e      	cmp	r3, #14
 80065ca:	f200 80a8 	bhi.w	800671e <_dtoa_r+0x46e>
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	f000 80a5 	beq.w	800671e <_dtoa_r+0x46e>
 80065d4:	f1bb 0f00 	cmp.w	fp, #0
 80065d8:	dd34      	ble.n	8006644 <_dtoa_r+0x394>
 80065da:	4b9a      	ldr	r3, [pc, #616]	; (8006844 <_dtoa_r+0x594>)
 80065dc:	f00b 020f 	and.w	r2, fp, #15
 80065e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80065e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065ec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80065f0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80065f4:	d016      	beq.n	8006624 <_dtoa_r+0x374>
 80065f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065fa:	4b93      	ldr	r3, [pc, #588]	; (8006848 <_dtoa_r+0x598>)
 80065fc:	2703      	movs	r7, #3
 80065fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006602:	f7fa f89d 	bl	8000740 <__aeabi_ddiv>
 8006606:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800660a:	f004 040f 	and.w	r4, r4, #15
 800660e:	4e8e      	ldr	r6, [pc, #568]	; (8006848 <_dtoa_r+0x598>)
 8006610:	b954      	cbnz	r4, 8006628 <_dtoa_r+0x378>
 8006612:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006616:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800661a:	f7fa f891 	bl	8000740 <__aeabi_ddiv>
 800661e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006622:	e029      	b.n	8006678 <_dtoa_r+0x3c8>
 8006624:	2702      	movs	r7, #2
 8006626:	e7f2      	b.n	800660e <_dtoa_r+0x35e>
 8006628:	07e1      	lsls	r1, r4, #31
 800662a:	d508      	bpl.n	800663e <_dtoa_r+0x38e>
 800662c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006630:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006634:	f7f9 ff5a 	bl	80004ec <__aeabi_dmul>
 8006638:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800663c:	3701      	adds	r7, #1
 800663e:	1064      	asrs	r4, r4, #1
 8006640:	3608      	adds	r6, #8
 8006642:	e7e5      	b.n	8006610 <_dtoa_r+0x360>
 8006644:	f000 80a5 	beq.w	8006792 <_dtoa_r+0x4e2>
 8006648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800664c:	f1cb 0400 	rsb	r4, fp, #0
 8006650:	4b7c      	ldr	r3, [pc, #496]	; (8006844 <_dtoa_r+0x594>)
 8006652:	f004 020f 	and.w	r2, r4, #15
 8006656:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f7f9 ff45 	bl	80004ec <__aeabi_dmul>
 8006662:	2702      	movs	r7, #2
 8006664:	2300      	movs	r3, #0
 8006666:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800666a:	4e77      	ldr	r6, [pc, #476]	; (8006848 <_dtoa_r+0x598>)
 800666c:	1124      	asrs	r4, r4, #4
 800666e:	2c00      	cmp	r4, #0
 8006670:	f040 8084 	bne.w	800677c <_dtoa_r+0x4cc>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1d2      	bne.n	800661e <_dtoa_r+0x36e>
 8006678:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800667c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 8087 	beq.w	8006796 <_dtoa_r+0x4e6>
 8006688:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800668c:	2200      	movs	r2, #0
 800668e:	4b6f      	ldr	r3, [pc, #444]	; (800684c <_dtoa_r+0x59c>)
 8006690:	f7fa f99e 	bl	80009d0 <__aeabi_dcmplt>
 8006694:	2800      	cmp	r0, #0
 8006696:	d07e      	beq.n	8006796 <_dtoa_r+0x4e6>
 8006698:	9b08      	ldr	r3, [sp, #32]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d07b      	beq.n	8006796 <_dtoa_r+0x4e6>
 800669e:	9b06      	ldr	r3, [sp, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	dd38      	ble.n	8006716 <_dtoa_r+0x466>
 80066a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066a8:	2200      	movs	r2, #0
 80066aa:	4b69      	ldr	r3, [pc, #420]	; (8006850 <_dtoa_r+0x5a0>)
 80066ac:	f7f9 ff1e 	bl	80004ec <__aeabi_dmul>
 80066b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066b4:	9c06      	ldr	r4, [sp, #24]
 80066b6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80066ba:	3701      	adds	r7, #1
 80066bc:	4638      	mov	r0, r7
 80066be:	f7f9 feab 	bl	8000418 <__aeabi_i2d>
 80066c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066c6:	f7f9 ff11 	bl	80004ec <__aeabi_dmul>
 80066ca:	2200      	movs	r2, #0
 80066cc:	4b61      	ldr	r3, [pc, #388]	; (8006854 <_dtoa_r+0x5a4>)
 80066ce:	f7f9 fd57 	bl	8000180 <__adddf3>
 80066d2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80066d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066da:	9611      	str	r6, [sp, #68]	; 0x44
 80066dc:	2c00      	cmp	r4, #0
 80066de:	d15d      	bne.n	800679c <_dtoa_r+0x4ec>
 80066e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066e4:	2200      	movs	r2, #0
 80066e6:	4b5c      	ldr	r3, [pc, #368]	; (8006858 <_dtoa_r+0x5a8>)
 80066e8:	f7f9 fd48 	bl	800017c <__aeabi_dsub>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066f4:	4633      	mov	r3, r6
 80066f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066f8:	f7fa f988 	bl	8000a0c <__aeabi_dcmpgt>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	f040 8295 	bne.w	8006c2c <_dtoa_r+0x97c>
 8006702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006706:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006708:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800670c:	f7fa f960 	bl	80009d0 <__aeabi_dcmplt>
 8006710:	2800      	cmp	r0, #0
 8006712:	f040 8289 	bne.w	8006c28 <_dtoa_r+0x978>
 8006716:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800671a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800671e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006720:	2b00      	cmp	r3, #0
 8006722:	f2c0 8151 	blt.w	80069c8 <_dtoa_r+0x718>
 8006726:	f1bb 0f0e 	cmp.w	fp, #14
 800672a:	f300 814d 	bgt.w	80069c8 <_dtoa_r+0x718>
 800672e:	4b45      	ldr	r3, [pc, #276]	; (8006844 <_dtoa_r+0x594>)
 8006730:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006734:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006738:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800673c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800673e:	2b00      	cmp	r3, #0
 8006740:	f280 80da 	bge.w	80068f8 <_dtoa_r+0x648>
 8006744:	9b08      	ldr	r3, [sp, #32]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f300 80d6 	bgt.w	80068f8 <_dtoa_r+0x648>
 800674c:	f040 826b 	bne.w	8006c26 <_dtoa_r+0x976>
 8006750:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006754:	2200      	movs	r2, #0
 8006756:	4b40      	ldr	r3, [pc, #256]	; (8006858 <_dtoa_r+0x5a8>)
 8006758:	f7f9 fec8 	bl	80004ec <__aeabi_dmul>
 800675c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006760:	f7fa f94a 	bl	80009f8 <__aeabi_dcmpge>
 8006764:	9c08      	ldr	r4, [sp, #32]
 8006766:	4626      	mov	r6, r4
 8006768:	2800      	cmp	r0, #0
 800676a:	f040 8241 	bne.w	8006bf0 <_dtoa_r+0x940>
 800676e:	2331      	movs	r3, #49	; 0x31
 8006770:	9f03      	ldr	r7, [sp, #12]
 8006772:	f10b 0b01 	add.w	fp, fp, #1
 8006776:	f807 3b01 	strb.w	r3, [r7], #1
 800677a:	e23d      	b.n	8006bf8 <_dtoa_r+0x948>
 800677c:	07e2      	lsls	r2, r4, #31
 800677e:	d505      	bpl.n	800678c <_dtoa_r+0x4dc>
 8006780:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006784:	f7f9 feb2 	bl	80004ec <__aeabi_dmul>
 8006788:	2301      	movs	r3, #1
 800678a:	3701      	adds	r7, #1
 800678c:	1064      	asrs	r4, r4, #1
 800678e:	3608      	adds	r6, #8
 8006790:	e76d      	b.n	800666e <_dtoa_r+0x3be>
 8006792:	2702      	movs	r7, #2
 8006794:	e770      	b.n	8006678 <_dtoa_r+0x3c8>
 8006796:	46d8      	mov	r8, fp
 8006798:	9c08      	ldr	r4, [sp, #32]
 800679a:	e78f      	b.n	80066bc <_dtoa_r+0x40c>
 800679c:	9903      	ldr	r1, [sp, #12]
 800679e:	4b29      	ldr	r3, [pc, #164]	; (8006844 <_dtoa_r+0x594>)
 80067a0:	4421      	add	r1, r4
 80067a2:	9112      	str	r1, [sp, #72]	; 0x48
 80067a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067aa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80067ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067b2:	2900      	cmp	r1, #0
 80067b4:	d054      	beq.n	8006860 <_dtoa_r+0x5b0>
 80067b6:	2000      	movs	r0, #0
 80067b8:	4928      	ldr	r1, [pc, #160]	; (800685c <_dtoa_r+0x5ac>)
 80067ba:	f7f9 ffc1 	bl	8000740 <__aeabi_ddiv>
 80067be:	463b      	mov	r3, r7
 80067c0:	4632      	mov	r2, r6
 80067c2:	f7f9 fcdb 	bl	800017c <__aeabi_dsub>
 80067c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067ca:	9f03      	ldr	r7, [sp, #12]
 80067cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067d0:	f7fa f93c 	bl	8000a4c <__aeabi_d2iz>
 80067d4:	4604      	mov	r4, r0
 80067d6:	f7f9 fe1f 	bl	8000418 <__aeabi_i2d>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067e2:	f7f9 fccb 	bl	800017c <__aeabi_dsub>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	3430      	adds	r4, #48	; 0x30
 80067ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067f4:	f807 4b01 	strb.w	r4, [r7], #1
 80067f8:	f7fa f8ea 	bl	80009d0 <__aeabi_dcmplt>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d173      	bne.n	80068e8 <_dtoa_r+0x638>
 8006800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006804:	2000      	movs	r0, #0
 8006806:	4911      	ldr	r1, [pc, #68]	; (800684c <_dtoa_r+0x59c>)
 8006808:	f7f9 fcb8 	bl	800017c <__aeabi_dsub>
 800680c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006810:	f7fa f8de 	bl	80009d0 <__aeabi_dcmplt>
 8006814:	2800      	cmp	r0, #0
 8006816:	f040 80b6 	bne.w	8006986 <_dtoa_r+0x6d6>
 800681a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800681c:	429f      	cmp	r7, r3
 800681e:	f43f af7a 	beq.w	8006716 <_dtoa_r+0x466>
 8006822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006826:	2200      	movs	r2, #0
 8006828:	4b09      	ldr	r3, [pc, #36]	; (8006850 <_dtoa_r+0x5a0>)
 800682a:	f7f9 fe5f 	bl	80004ec <__aeabi_dmul>
 800682e:	2200      	movs	r2, #0
 8006830:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006838:	4b05      	ldr	r3, [pc, #20]	; (8006850 <_dtoa_r+0x5a0>)
 800683a:	f7f9 fe57 	bl	80004ec <__aeabi_dmul>
 800683e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006842:	e7c3      	b.n	80067cc <_dtoa_r+0x51c>
 8006844:	0800a2a0 	.word	0x0800a2a0
 8006848:	0800a278 	.word	0x0800a278
 800684c:	3ff00000 	.word	0x3ff00000
 8006850:	40240000 	.word	0x40240000
 8006854:	401c0000 	.word	0x401c0000
 8006858:	40140000 	.word	0x40140000
 800685c:	3fe00000 	.word	0x3fe00000
 8006860:	4630      	mov	r0, r6
 8006862:	4639      	mov	r1, r7
 8006864:	f7f9 fe42 	bl	80004ec <__aeabi_dmul>
 8006868:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800686a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800686e:	9c03      	ldr	r4, [sp, #12]
 8006870:	9314      	str	r3, [sp, #80]	; 0x50
 8006872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006876:	f7fa f8e9 	bl	8000a4c <__aeabi_d2iz>
 800687a:	9015      	str	r0, [sp, #84]	; 0x54
 800687c:	f7f9 fdcc 	bl	8000418 <__aeabi_i2d>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006888:	f7f9 fc78 	bl	800017c <__aeabi_dsub>
 800688c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800688e:	4606      	mov	r6, r0
 8006890:	3330      	adds	r3, #48	; 0x30
 8006892:	f804 3b01 	strb.w	r3, [r4], #1
 8006896:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006898:	460f      	mov	r7, r1
 800689a:	429c      	cmp	r4, r3
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	d124      	bne.n	80068ec <_dtoa_r+0x63c>
 80068a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068a6:	4baf      	ldr	r3, [pc, #700]	; (8006b64 <_dtoa_r+0x8b4>)
 80068a8:	f7f9 fc6a 	bl	8000180 <__adddf3>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4630      	mov	r0, r6
 80068b2:	4639      	mov	r1, r7
 80068b4:	f7fa f8aa 	bl	8000a0c <__aeabi_dcmpgt>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d163      	bne.n	8006984 <_dtoa_r+0x6d4>
 80068bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068c0:	2000      	movs	r0, #0
 80068c2:	49a8      	ldr	r1, [pc, #672]	; (8006b64 <_dtoa_r+0x8b4>)
 80068c4:	f7f9 fc5a 	bl	800017c <__aeabi_dsub>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4630      	mov	r0, r6
 80068ce:	4639      	mov	r1, r7
 80068d0:	f7fa f87e 	bl	80009d0 <__aeabi_dcmplt>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	f43f af1e 	beq.w	8006716 <_dtoa_r+0x466>
 80068da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80068dc:	1e7b      	subs	r3, r7, #1
 80068de:	9314      	str	r3, [sp, #80]	; 0x50
 80068e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80068e4:	2b30      	cmp	r3, #48	; 0x30
 80068e6:	d0f8      	beq.n	80068da <_dtoa_r+0x62a>
 80068e8:	46c3      	mov	fp, r8
 80068ea:	e03b      	b.n	8006964 <_dtoa_r+0x6b4>
 80068ec:	4b9e      	ldr	r3, [pc, #632]	; (8006b68 <_dtoa_r+0x8b8>)
 80068ee:	f7f9 fdfd 	bl	80004ec <__aeabi_dmul>
 80068f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068f6:	e7bc      	b.n	8006872 <_dtoa_r+0x5c2>
 80068f8:	9f03      	ldr	r7, [sp, #12]
 80068fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80068fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f7f9 ff1b 	bl	8000740 <__aeabi_ddiv>
 800690a:	f7fa f89f 	bl	8000a4c <__aeabi_d2iz>
 800690e:	4604      	mov	r4, r0
 8006910:	f7f9 fd82 	bl	8000418 <__aeabi_i2d>
 8006914:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006918:	f7f9 fde8 	bl	80004ec <__aeabi_dmul>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4640      	mov	r0, r8
 8006922:	4649      	mov	r1, r9
 8006924:	f7f9 fc2a 	bl	800017c <__aeabi_dsub>
 8006928:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800692c:	f807 6b01 	strb.w	r6, [r7], #1
 8006930:	9e03      	ldr	r6, [sp, #12]
 8006932:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006936:	1bbe      	subs	r6, r7, r6
 8006938:	45b4      	cmp	ip, r6
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	d136      	bne.n	80069ae <_dtoa_r+0x6fe>
 8006940:	f7f9 fc1e 	bl	8000180 <__adddf3>
 8006944:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006948:	4680      	mov	r8, r0
 800694a:	4689      	mov	r9, r1
 800694c:	f7fa f85e 	bl	8000a0c <__aeabi_dcmpgt>
 8006950:	bb58      	cbnz	r0, 80069aa <_dtoa_r+0x6fa>
 8006952:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006956:	4640      	mov	r0, r8
 8006958:	4649      	mov	r1, r9
 800695a:	f7fa f82f 	bl	80009bc <__aeabi_dcmpeq>
 800695e:	b108      	cbz	r0, 8006964 <_dtoa_r+0x6b4>
 8006960:	07e3      	lsls	r3, r4, #31
 8006962:	d422      	bmi.n	80069aa <_dtoa_r+0x6fa>
 8006964:	4651      	mov	r1, sl
 8006966:	4628      	mov	r0, r5
 8006968:	f000 fbc2 	bl	80070f0 <_Bfree>
 800696c:	2300      	movs	r3, #0
 800696e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006970:	703b      	strb	r3, [r7, #0]
 8006972:	f10b 0301 	add.w	r3, fp, #1
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800697a:	2b00      	cmp	r3, #0
 800697c:	f43f ace6 	beq.w	800634c <_dtoa_r+0x9c>
 8006980:	601f      	str	r7, [r3, #0]
 8006982:	e4e3      	b.n	800634c <_dtoa_r+0x9c>
 8006984:	4627      	mov	r7, r4
 8006986:	463b      	mov	r3, r7
 8006988:	461f      	mov	r7, r3
 800698a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800698e:	2a39      	cmp	r2, #57	; 0x39
 8006990:	d107      	bne.n	80069a2 <_dtoa_r+0x6f2>
 8006992:	9a03      	ldr	r2, [sp, #12]
 8006994:	429a      	cmp	r2, r3
 8006996:	d1f7      	bne.n	8006988 <_dtoa_r+0x6d8>
 8006998:	2230      	movs	r2, #48	; 0x30
 800699a:	9903      	ldr	r1, [sp, #12]
 800699c:	f108 0801 	add.w	r8, r8, #1
 80069a0:	700a      	strb	r2, [r1, #0]
 80069a2:	781a      	ldrb	r2, [r3, #0]
 80069a4:	3201      	adds	r2, #1
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	e79e      	b.n	80068e8 <_dtoa_r+0x638>
 80069aa:	46d8      	mov	r8, fp
 80069ac:	e7eb      	b.n	8006986 <_dtoa_r+0x6d6>
 80069ae:	2200      	movs	r2, #0
 80069b0:	4b6d      	ldr	r3, [pc, #436]	; (8006b68 <_dtoa_r+0x8b8>)
 80069b2:	f7f9 fd9b 	bl	80004ec <__aeabi_dmul>
 80069b6:	2200      	movs	r2, #0
 80069b8:	2300      	movs	r3, #0
 80069ba:	4680      	mov	r8, r0
 80069bc:	4689      	mov	r9, r1
 80069be:	f7f9 fffd 	bl	80009bc <__aeabi_dcmpeq>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d09b      	beq.n	80068fe <_dtoa_r+0x64e>
 80069c6:	e7cd      	b.n	8006964 <_dtoa_r+0x6b4>
 80069c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069ca:	2a00      	cmp	r2, #0
 80069cc:	f000 80c4 	beq.w	8006b58 <_dtoa_r+0x8a8>
 80069d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80069d2:	2a01      	cmp	r2, #1
 80069d4:	f300 80a8 	bgt.w	8006b28 <_dtoa_r+0x878>
 80069d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069da:	2a00      	cmp	r2, #0
 80069dc:	f000 80a0 	beq.w	8006b20 <_dtoa_r+0x870>
 80069e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069e4:	464f      	mov	r7, r9
 80069e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ea:	2101      	movs	r1, #1
 80069ec:	441a      	add	r2, r3
 80069ee:	4628      	mov	r0, r5
 80069f0:	4499      	add	r9, r3
 80069f2:	9209      	str	r2, [sp, #36]	; 0x24
 80069f4:	f000 fc7c 	bl	80072f0 <__i2b>
 80069f8:	4606      	mov	r6, r0
 80069fa:	b15f      	cbz	r7, 8006a14 <_dtoa_r+0x764>
 80069fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	dd08      	ble.n	8006a14 <_dtoa_r+0x764>
 8006a02:	42bb      	cmp	r3, r7
 8006a04:	bfa8      	it	ge
 8006a06:	463b      	movge	r3, r7
 8006a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a0a:	eba9 0903 	sub.w	r9, r9, r3
 8006a0e:	1aff      	subs	r7, r7, r3
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	9309      	str	r3, [sp, #36]	; 0x24
 8006a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a16:	b1f3      	cbz	r3, 8006a56 <_dtoa_r+0x7a6>
 8006a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 80a0 	beq.w	8006b60 <_dtoa_r+0x8b0>
 8006a20:	2c00      	cmp	r4, #0
 8006a22:	dd10      	ble.n	8006a46 <_dtoa_r+0x796>
 8006a24:	4631      	mov	r1, r6
 8006a26:	4622      	mov	r2, r4
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f000 fd1f 	bl	800746c <__pow5mult>
 8006a2e:	4652      	mov	r2, sl
 8006a30:	4601      	mov	r1, r0
 8006a32:	4606      	mov	r6, r0
 8006a34:	4628      	mov	r0, r5
 8006a36:	f000 fc71 	bl	800731c <__multiply>
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	4651      	mov	r1, sl
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 fb56 	bl	80070f0 <_Bfree>
 8006a44:	46c2      	mov	sl, r8
 8006a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a48:	1b1a      	subs	r2, r3, r4
 8006a4a:	d004      	beq.n	8006a56 <_dtoa_r+0x7a6>
 8006a4c:	4651      	mov	r1, sl
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 fd0c 	bl	800746c <__pow5mult>
 8006a54:	4682      	mov	sl, r0
 8006a56:	2101      	movs	r1, #1
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 fc49 	bl	80072f0 <__i2b>
 8006a5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a60:	4604      	mov	r4, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f340 8082 	ble.w	8006b6c <_dtoa_r+0x8bc>
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f000 fcfd 	bl	800746c <__pow5mult>
 8006a72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a74:	4604      	mov	r4, r0
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	dd7b      	ble.n	8006b72 <_dtoa_r+0x8c2>
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	6923      	ldr	r3, [r4, #16]
 8006a80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a84:	6918      	ldr	r0, [r3, #16]
 8006a86:	f000 fbe5 	bl	8007254 <__hi0bits>
 8006a8a:	f1c0 0020 	rsb	r0, r0, #32
 8006a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a90:	4418      	add	r0, r3
 8006a92:	f010 001f 	ands.w	r0, r0, #31
 8006a96:	f000 8092 	beq.w	8006bbe <_dtoa_r+0x90e>
 8006a9a:	f1c0 0320 	rsb	r3, r0, #32
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	f340 8085 	ble.w	8006bae <_dtoa_r+0x8fe>
 8006aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa6:	f1c0 001c 	rsb	r0, r0, #28
 8006aaa:	4403      	add	r3, r0
 8006aac:	4481      	add	r9, r0
 8006aae:	4407      	add	r7, r0
 8006ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab2:	f1b9 0f00 	cmp.w	r9, #0
 8006ab6:	dd05      	ble.n	8006ac4 <_dtoa_r+0x814>
 8006ab8:	4651      	mov	r1, sl
 8006aba:	464a      	mov	r2, r9
 8006abc:	4628      	mov	r0, r5
 8006abe:	f000 fd2f 	bl	8007520 <__lshift>
 8006ac2:	4682      	mov	sl, r0
 8006ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	dd05      	ble.n	8006ad6 <_dtoa_r+0x826>
 8006aca:	4621      	mov	r1, r4
 8006acc:	461a      	mov	r2, r3
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f000 fd26 	bl	8007520 <__lshift>
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d072      	beq.n	8006bc2 <_dtoa_r+0x912>
 8006adc:	4621      	mov	r1, r4
 8006ade:	4650      	mov	r0, sl
 8006ae0:	f000 fd8a 	bl	80075f8 <__mcmp>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	da6c      	bge.n	8006bc2 <_dtoa_r+0x912>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4651      	mov	r1, sl
 8006aec:	220a      	movs	r2, #10
 8006aee:	4628      	mov	r0, r5
 8006af0:	f000 fb20 	bl	8007134 <__multadd>
 8006af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af6:	4682      	mov	sl, r0
 8006af8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 81ac 	beq.w	8006e5a <_dtoa_r+0xbaa>
 8006b02:	2300      	movs	r3, #0
 8006b04:	4631      	mov	r1, r6
 8006b06:	220a      	movs	r2, #10
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f000 fb13 	bl	8007134 <__multadd>
 8006b0e:	9b06      	ldr	r3, [sp, #24]
 8006b10:	4606      	mov	r6, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f300 8093 	bgt.w	8006c3e <_dtoa_r+0x98e>
 8006b18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	dc59      	bgt.n	8006bd2 <_dtoa_r+0x922>
 8006b1e:	e08e      	b.n	8006c3e <_dtoa_r+0x98e>
 8006b20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b22:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b26:	e75d      	b.n	80069e4 <_dtoa_r+0x734>
 8006b28:	9b08      	ldr	r3, [sp, #32]
 8006b2a:	1e5c      	subs	r4, r3, #1
 8006b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b2e:	42a3      	cmp	r3, r4
 8006b30:	bfbf      	itttt	lt
 8006b32:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b34:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006b36:	1ae3      	sublt	r3, r4, r3
 8006b38:	18d2      	addlt	r2, r2, r3
 8006b3a:	bfa8      	it	ge
 8006b3c:	1b1c      	subge	r4, r3, r4
 8006b3e:	9b08      	ldr	r3, [sp, #32]
 8006b40:	bfbe      	ittt	lt
 8006b42:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b44:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006b46:	2400      	movlt	r4, #0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	bfb5      	itete	lt
 8006b4c:	eba9 0703 	sublt.w	r7, r9, r3
 8006b50:	464f      	movge	r7, r9
 8006b52:	2300      	movlt	r3, #0
 8006b54:	9b08      	ldrge	r3, [sp, #32]
 8006b56:	e747      	b.n	80069e8 <_dtoa_r+0x738>
 8006b58:	464f      	mov	r7, r9
 8006b5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b5c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b5e:	e74c      	b.n	80069fa <_dtoa_r+0x74a>
 8006b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b62:	e773      	b.n	8006a4c <_dtoa_r+0x79c>
 8006b64:	3fe00000 	.word	0x3fe00000
 8006b68:	40240000 	.word	0x40240000
 8006b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	dc18      	bgt.n	8006ba4 <_dtoa_r+0x8f4>
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	b9b3      	cbnz	r3, 8006ba4 <_dtoa_r+0x8f4>
 8006b76:	9b05      	ldr	r3, [sp, #20]
 8006b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b7c:	b993      	cbnz	r3, 8006ba4 <_dtoa_r+0x8f4>
 8006b7e:	9b05      	ldr	r3, [sp, #20]
 8006b80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b84:	0d1b      	lsrs	r3, r3, #20
 8006b86:	051b      	lsls	r3, r3, #20
 8006b88:	b17b      	cbz	r3, 8006baa <_dtoa_r+0x8fa>
 8006b8a:	f04f 0801 	mov.w	r8, #1
 8006b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b90:	f109 0901 	add.w	r9, r9, #1
 8006b94:	3301      	adds	r3, #1
 8006b96:	9309      	str	r3, [sp, #36]	; 0x24
 8006b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f47f af6f 	bne.w	8006a7e <_dtoa_r+0x7ce>
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	e774      	b.n	8006a8e <_dtoa_r+0x7de>
 8006ba4:	f04f 0800 	mov.w	r8, #0
 8006ba8:	e7f6      	b.n	8006b98 <_dtoa_r+0x8e8>
 8006baa:	4698      	mov	r8, r3
 8006bac:	e7f4      	b.n	8006b98 <_dtoa_r+0x8e8>
 8006bae:	d080      	beq.n	8006ab2 <_dtoa_r+0x802>
 8006bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bb2:	331c      	adds	r3, #28
 8006bb4:	441a      	add	r2, r3
 8006bb6:	4499      	add	r9, r3
 8006bb8:	441f      	add	r7, r3
 8006bba:	9209      	str	r2, [sp, #36]	; 0x24
 8006bbc:	e779      	b.n	8006ab2 <_dtoa_r+0x802>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	e7f6      	b.n	8006bb0 <_dtoa_r+0x900>
 8006bc2:	9b08      	ldr	r3, [sp, #32]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dc34      	bgt.n	8006c32 <_dtoa_r+0x982>
 8006bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	dd31      	ble.n	8006c32 <_dtoa_r+0x982>
 8006bce:	9b08      	ldr	r3, [sp, #32]
 8006bd0:	9306      	str	r3, [sp, #24]
 8006bd2:	9b06      	ldr	r3, [sp, #24]
 8006bd4:	b963      	cbnz	r3, 8006bf0 <_dtoa_r+0x940>
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	2205      	movs	r2, #5
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f000 faaa 	bl	8007134 <__multadd>
 8006be0:	4601      	mov	r1, r0
 8006be2:	4604      	mov	r4, r0
 8006be4:	4650      	mov	r0, sl
 8006be6:	f000 fd07 	bl	80075f8 <__mcmp>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	f73f adbf 	bgt.w	800676e <_dtoa_r+0x4be>
 8006bf0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bf2:	9f03      	ldr	r7, [sp, #12]
 8006bf4:	ea6f 0b03 	mvn.w	fp, r3
 8006bf8:	f04f 0800 	mov.w	r8, #0
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f000 fa76 	bl	80070f0 <_Bfree>
 8006c04:	2e00      	cmp	r6, #0
 8006c06:	f43f aead 	beq.w	8006964 <_dtoa_r+0x6b4>
 8006c0a:	f1b8 0f00 	cmp.w	r8, #0
 8006c0e:	d005      	beq.n	8006c1c <_dtoa_r+0x96c>
 8006c10:	45b0      	cmp	r8, r6
 8006c12:	d003      	beq.n	8006c1c <_dtoa_r+0x96c>
 8006c14:	4641      	mov	r1, r8
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 fa6a 	bl	80070f0 <_Bfree>
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 fa66 	bl	80070f0 <_Bfree>
 8006c24:	e69e      	b.n	8006964 <_dtoa_r+0x6b4>
 8006c26:	2400      	movs	r4, #0
 8006c28:	4626      	mov	r6, r4
 8006c2a:	e7e1      	b.n	8006bf0 <_dtoa_r+0x940>
 8006c2c:	46c3      	mov	fp, r8
 8006c2e:	4626      	mov	r6, r4
 8006c30:	e59d      	b.n	800676e <_dtoa_r+0x4be>
 8006c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80c8 	beq.w	8006dca <_dtoa_r+0xb1a>
 8006c3a:	9b08      	ldr	r3, [sp, #32]
 8006c3c:	9306      	str	r3, [sp, #24]
 8006c3e:	2f00      	cmp	r7, #0
 8006c40:	dd05      	ble.n	8006c4e <_dtoa_r+0x99e>
 8006c42:	4631      	mov	r1, r6
 8006c44:	463a      	mov	r2, r7
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 fc6a 	bl	8007520 <__lshift>
 8006c4c:	4606      	mov	r6, r0
 8006c4e:	f1b8 0f00 	cmp.w	r8, #0
 8006c52:	d05b      	beq.n	8006d0c <_dtoa_r+0xa5c>
 8006c54:	4628      	mov	r0, r5
 8006c56:	6871      	ldr	r1, [r6, #4]
 8006c58:	f000 fa0a 	bl	8007070 <_Balloc>
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	b928      	cbnz	r0, 8006c6c <_dtoa_r+0x9bc>
 8006c60:	4602      	mov	r2, r0
 8006c62:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c66:	4b81      	ldr	r3, [pc, #516]	; (8006e6c <_dtoa_r+0xbbc>)
 8006c68:	f7ff bb36 	b.w	80062d8 <_dtoa_r+0x28>
 8006c6c:	6932      	ldr	r2, [r6, #16]
 8006c6e:	f106 010c 	add.w	r1, r6, #12
 8006c72:	3202      	adds	r2, #2
 8006c74:	0092      	lsls	r2, r2, #2
 8006c76:	300c      	adds	r0, #12
 8006c78:	f002 fb02 	bl	8009280 <memcpy>
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4628      	mov	r0, r5
 8006c82:	f000 fc4d 	bl	8007520 <__lshift>
 8006c86:	46b0      	mov	r8, r6
 8006c88:	4606      	mov	r6, r0
 8006c8a:	9b03      	ldr	r3, [sp, #12]
 8006c8c:	9a03      	ldr	r2, [sp, #12]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	9308      	str	r3, [sp, #32]
 8006c92:	9b06      	ldr	r3, [sp, #24]
 8006c94:	4413      	add	r3, r2
 8006c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006ca0:	9b08      	ldr	r3, [sp, #32]
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	4650      	mov	r0, sl
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	f7ff fa75 	bl	8006198 <quorem>
 8006cae:	4641      	mov	r1, r8
 8006cb0:	9006      	str	r0, [sp, #24]
 8006cb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	f000 fc9e 	bl	80075f8 <__mcmp>
 8006cbc:	4632      	mov	r2, r6
 8006cbe:	9009      	str	r0, [sp, #36]	; 0x24
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 fcb4 	bl	8007630 <__mdiff>
 8006cc8:	68c2      	ldr	r2, [r0, #12]
 8006cca:	4607      	mov	r7, r0
 8006ccc:	bb02      	cbnz	r2, 8006d10 <_dtoa_r+0xa60>
 8006cce:	4601      	mov	r1, r0
 8006cd0:	4650      	mov	r0, sl
 8006cd2:	f000 fc91 	bl	80075f8 <__mcmp>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4628      	mov	r0, r5
 8006cdc:	920c      	str	r2, [sp, #48]	; 0x30
 8006cde:	f000 fa07 	bl	80070f0 <_Bfree>
 8006ce2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ce4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ce6:	9f08      	ldr	r7, [sp, #32]
 8006ce8:	ea43 0102 	orr.w	r1, r3, r2
 8006cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cee:	4319      	orrs	r1, r3
 8006cf0:	d110      	bne.n	8006d14 <_dtoa_r+0xa64>
 8006cf2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cf6:	d029      	beq.n	8006d4c <_dtoa_r+0xa9c>
 8006cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	dd02      	ble.n	8006d04 <_dtoa_r+0xa54>
 8006cfe:	9b06      	ldr	r3, [sp, #24]
 8006d00:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d04:	9b04      	ldr	r3, [sp, #16]
 8006d06:	f883 9000 	strb.w	r9, [r3]
 8006d0a:	e777      	b.n	8006bfc <_dtoa_r+0x94c>
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	e7ba      	b.n	8006c86 <_dtoa_r+0x9d6>
 8006d10:	2201      	movs	r2, #1
 8006d12:	e7e1      	b.n	8006cd8 <_dtoa_r+0xa28>
 8006d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	db04      	blt.n	8006d24 <_dtoa_r+0xa74>
 8006d1a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d20:	430b      	orrs	r3, r1
 8006d22:	d120      	bne.n	8006d66 <_dtoa_r+0xab6>
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	dded      	ble.n	8006d04 <_dtoa_r+0xa54>
 8006d28:	4651      	mov	r1, sl
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f000 fbf7 	bl	8007520 <__lshift>
 8006d32:	4621      	mov	r1, r4
 8006d34:	4682      	mov	sl, r0
 8006d36:	f000 fc5f 	bl	80075f8 <__mcmp>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	dc03      	bgt.n	8006d46 <_dtoa_r+0xa96>
 8006d3e:	d1e1      	bne.n	8006d04 <_dtoa_r+0xa54>
 8006d40:	f019 0f01 	tst.w	r9, #1
 8006d44:	d0de      	beq.n	8006d04 <_dtoa_r+0xa54>
 8006d46:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d4a:	d1d8      	bne.n	8006cfe <_dtoa_r+0xa4e>
 8006d4c:	2339      	movs	r3, #57	; 0x39
 8006d4e:	9a04      	ldr	r2, [sp, #16]
 8006d50:	7013      	strb	r3, [r2, #0]
 8006d52:	463b      	mov	r3, r7
 8006d54:	461f      	mov	r7, r3
 8006d56:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	2a39      	cmp	r2, #57	; 0x39
 8006d5e:	d06b      	beq.n	8006e38 <_dtoa_r+0xb88>
 8006d60:	3201      	adds	r2, #1
 8006d62:	701a      	strb	r2, [r3, #0]
 8006d64:	e74a      	b.n	8006bfc <_dtoa_r+0x94c>
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	dd07      	ble.n	8006d7a <_dtoa_r+0xaca>
 8006d6a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d6e:	d0ed      	beq.n	8006d4c <_dtoa_r+0xa9c>
 8006d70:	9a04      	ldr	r2, [sp, #16]
 8006d72:	f109 0301 	add.w	r3, r9, #1
 8006d76:	7013      	strb	r3, [r2, #0]
 8006d78:	e740      	b.n	8006bfc <_dtoa_r+0x94c>
 8006d7a:	9b08      	ldr	r3, [sp, #32]
 8006d7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d7e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d042      	beq.n	8006e0c <_dtoa_r+0xb5c>
 8006d86:	4651      	mov	r1, sl
 8006d88:	2300      	movs	r3, #0
 8006d8a:	220a      	movs	r2, #10
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f000 f9d1 	bl	8007134 <__multadd>
 8006d92:	45b0      	cmp	r8, r6
 8006d94:	4682      	mov	sl, r0
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	f04f 020a 	mov.w	r2, #10
 8006d9e:	4641      	mov	r1, r8
 8006da0:	4628      	mov	r0, r5
 8006da2:	d107      	bne.n	8006db4 <_dtoa_r+0xb04>
 8006da4:	f000 f9c6 	bl	8007134 <__multadd>
 8006da8:	4680      	mov	r8, r0
 8006daa:	4606      	mov	r6, r0
 8006dac:	9b08      	ldr	r3, [sp, #32]
 8006dae:	3301      	adds	r3, #1
 8006db0:	9308      	str	r3, [sp, #32]
 8006db2:	e775      	b.n	8006ca0 <_dtoa_r+0x9f0>
 8006db4:	f000 f9be 	bl	8007134 <__multadd>
 8006db8:	4631      	mov	r1, r6
 8006dba:	4680      	mov	r8, r0
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	220a      	movs	r2, #10
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f000 f9b7 	bl	8007134 <__multadd>
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	e7f0      	b.n	8006dac <_dtoa_r+0xafc>
 8006dca:	9b08      	ldr	r3, [sp, #32]
 8006dcc:	9306      	str	r3, [sp, #24]
 8006dce:	9f03      	ldr	r7, [sp, #12]
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4650      	mov	r0, sl
 8006dd4:	f7ff f9e0 	bl	8006198 <quorem>
 8006dd8:	9b03      	ldr	r3, [sp, #12]
 8006dda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006dde:	f807 9b01 	strb.w	r9, [r7], #1
 8006de2:	1afa      	subs	r2, r7, r3
 8006de4:	9b06      	ldr	r3, [sp, #24]
 8006de6:	4293      	cmp	r3, r2
 8006de8:	dd07      	ble.n	8006dfa <_dtoa_r+0xb4a>
 8006dea:	4651      	mov	r1, sl
 8006dec:	2300      	movs	r3, #0
 8006dee:	220a      	movs	r2, #10
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 f99f 	bl	8007134 <__multadd>
 8006df6:	4682      	mov	sl, r0
 8006df8:	e7ea      	b.n	8006dd0 <_dtoa_r+0xb20>
 8006dfa:	9b06      	ldr	r3, [sp, #24]
 8006dfc:	f04f 0800 	mov.w	r8, #0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bfcc      	ite	gt
 8006e04:	461f      	movgt	r7, r3
 8006e06:	2701      	movle	r7, #1
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	441f      	add	r7, r3
 8006e0c:	4651      	mov	r1, sl
 8006e0e:	2201      	movs	r2, #1
 8006e10:	4628      	mov	r0, r5
 8006e12:	f000 fb85 	bl	8007520 <__lshift>
 8006e16:	4621      	mov	r1, r4
 8006e18:	4682      	mov	sl, r0
 8006e1a:	f000 fbed 	bl	80075f8 <__mcmp>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	dc97      	bgt.n	8006d52 <_dtoa_r+0xaa2>
 8006e22:	d102      	bne.n	8006e2a <_dtoa_r+0xb7a>
 8006e24:	f019 0f01 	tst.w	r9, #1
 8006e28:	d193      	bne.n	8006d52 <_dtoa_r+0xaa2>
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	461f      	mov	r7, r3
 8006e2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e32:	2a30      	cmp	r2, #48	; 0x30
 8006e34:	d0fa      	beq.n	8006e2c <_dtoa_r+0xb7c>
 8006e36:	e6e1      	b.n	8006bfc <_dtoa_r+0x94c>
 8006e38:	9a03      	ldr	r2, [sp, #12]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d18a      	bne.n	8006d54 <_dtoa_r+0xaa4>
 8006e3e:	2331      	movs	r3, #49	; 0x31
 8006e40:	f10b 0b01 	add.w	fp, fp, #1
 8006e44:	e797      	b.n	8006d76 <_dtoa_r+0xac6>
 8006e46:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <_dtoa_r+0xbc0>)
 8006e48:	f7ff ba9f 	b.w	800638a <_dtoa_r+0xda>
 8006e4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f47f aa77 	bne.w	8006342 <_dtoa_r+0x92>
 8006e54:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <_dtoa_r+0xbc4>)
 8006e56:	f7ff ba98 	b.w	800638a <_dtoa_r+0xda>
 8006e5a:	9b06      	ldr	r3, [sp, #24]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dcb6      	bgt.n	8006dce <_dtoa_r+0xb1e>
 8006e60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	f73f aeb5 	bgt.w	8006bd2 <_dtoa_r+0x922>
 8006e68:	e7b1      	b.n	8006dce <_dtoa_r+0xb1e>
 8006e6a:	bf00      	nop
 8006e6c:	0800a20d 	.word	0x0800a20d
 8006e70:	0800a4f0 	.word	0x0800a4f0
 8006e74:	0800a191 	.word	0x0800a191

08006e78 <_free_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d040      	beq.n	8006f02 <_free_r+0x8a>
 8006e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e84:	1f0c      	subs	r4, r1, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bfb8      	it	lt
 8006e8a:	18e4      	addlt	r4, r4, r3
 8006e8c:	f000 f8e4 	bl	8007058 <__malloc_lock>
 8006e90:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <_free_r+0x8c>)
 8006e92:	6813      	ldr	r3, [r2, #0]
 8006e94:	b933      	cbnz	r3, 8006ea4 <_free_r+0x2c>
 8006e96:	6063      	str	r3, [r4, #4]
 8006e98:	6014      	str	r4, [r2, #0]
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ea0:	f000 b8e0 	b.w	8007064 <__malloc_unlock>
 8006ea4:	42a3      	cmp	r3, r4
 8006ea6:	d908      	bls.n	8006eba <_free_r+0x42>
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	1821      	adds	r1, r4, r0
 8006eac:	428b      	cmp	r3, r1
 8006eae:	bf01      	itttt	eq
 8006eb0:	6819      	ldreq	r1, [r3, #0]
 8006eb2:	685b      	ldreq	r3, [r3, #4]
 8006eb4:	1809      	addeq	r1, r1, r0
 8006eb6:	6021      	streq	r1, [r4, #0]
 8006eb8:	e7ed      	b.n	8006e96 <_free_r+0x1e>
 8006eba:	461a      	mov	r2, r3
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	b10b      	cbz	r3, 8006ec4 <_free_r+0x4c>
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	d9fa      	bls.n	8006eba <_free_r+0x42>
 8006ec4:	6811      	ldr	r1, [r2, #0]
 8006ec6:	1850      	adds	r0, r2, r1
 8006ec8:	42a0      	cmp	r0, r4
 8006eca:	d10b      	bne.n	8006ee4 <_free_r+0x6c>
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	4401      	add	r1, r0
 8006ed0:	1850      	adds	r0, r2, r1
 8006ed2:	4283      	cmp	r3, r0
 8006ed4:	6011      	str	r1, [r2, #0]
 8006ed6:	d1e0      	bne.n	8006e9a <_free_r+0x22>
 8006ed8:	6818      	ldr	r0, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	4408      	add	r0, r1
 8006ede:	6010      	str	r0, [r2, #0]
 8006ee0:	6053      	str	r3, [r2, #4]
 8006ee2:	e7da      	b.n	8006e9a <_free_r+0x22>
 8006ee4:	d902      	bls.n	8006eec <_free_r+0x74>
 8006ee6:	230c      	movs	r3, #12
 8006ee8:	602b      	str	r3, [r5, #0]
 8006eea:	e7d6      	b.n	8006e9a <_free_r+0x22>
 8006eec:	6820      	ldr	r0, [r4, #0]
 8006eee:	1821      	adds	r1, r4, r0
 8006ef0:	428b      	cmp	r3, r1
 8006ef2:	bf01      	itttt	eq
 8006ef4:	6819      	ldreq	r1, [r3, #0]
 8006ef6:	685b      	ldreq	r3, [r3, #4]
 8006ef8:	1809      	addeq	r1, r1, r0
 8006efa:	6021      	streq	r1, [r4, #0]
 8006efc:	6063      	str	r3, [r4, #4]
 8006efe:	6054      	str	r4, [r2, #4]
 8006f00:	e7cb      	b.n	8006e9a <_free_r+0x22>
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	20000594 	.word	0x20000594

08006f08 <malloc>:
 8006f08:	4b02      	ldr	r3, [pc, #8]	; (8006f14 <malloc+0xc>)
 8006f0a:	4601      	mov	r1, r0
 8006f0c:	6818      	ldr	r0, [r3, #0]
 8006f0e:	f000 b823 	b.w	8006f58 <_malloc_r>
 8006f12:	bf00      	nop
 8006f14:	20000064 	.word	0x20000064

08006f18 <sbrk_aligned>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	4e0e      	ldr	r6, [pc, #56]	; (8006f54 <sbrk_aligned+0x3c>)
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	6831      	ldr	r1, [r6, #0]
 8006f20:	4605      	mov	r5, r0
 8006f22:	b911      	cbnz	r1, 8006f2a <sbrk_aligned+0x12>
 8006f24:	f002 f99c 	bl	8009260 <_sbrk_r>
 8006f28:	6030      	str	r0, [r6, #0]
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f002 f997 	bl	8009260 <_sbrk_r>
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	d00a      	beq.n	8006f4c <sbrk_aligned+0x34>
 8006f36:	1cc4      	adds	r4, r0, #3
 8006f38:	f024 0403 	bic.w	r4, r4, #3
 8006f3c:	42a0      	cmp	r0, r4
 8006f3e:	d007      	beq.n	8006f50 <sbrk_aligned+0x38>
 8006f40:	1a21      	subs	r1, r4, r0
 8006f42:	4628      	mov	r0, r5
 8006f44:	f002 f98c 	bl	8009260 <_sbrk_r>
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d101      	bne.n	8006f50 <sbrk_aligned+0x38>
 8006f4c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f50:	4620      	mov	r0, r4
 8006f52:	bd70      	pop	{r4, r5, r6, pc}
 8006f54:	20000598 	.word	0x20000598

08006f58 <_malloc_r>:
 8006f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	1ccd      	adds	r5, r1, #3
 8006f5e:	f025 0503 	bic.w	r5, r5, #3
 8006f62:	3508      	adds	r5, #8
 8006f64:	2d0c      	cmp	r5, #12
 8006f66:	bf38      	it	cc
 8006f68:	250c      	movcc	r5, #12
 8006f6a:	2d00      	cmp	r5, #0
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	db01      	blt.n	8006f74 <_malloc_r+0x1c>
 8006f70:	42a9      	cmp	r1, r5
 8006f72:	d905      	bls.n	8006f80 <_malloc_r+0x28>
 8006f74:	230c      	movs	r3, #12
 8006f76:	2600      	movs	r6, #0
 8006f78:	603b      	str	r3, [r7, #0]
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007054 <_malloc_r+0xfc>
 8006f84:	f000 f868 	bl	8007058 <__malloc_lock>
 8006f88:	f8d8 3000 	ldr.w	r3, [r8]
 8006f8c:	461c      	mov	r4, r3
 8006f8e:	bb5c      	cbnz	r4, 8006fe8 <_malloc_r+0x90>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4638      	mov	r0, r7
 8006f94:	f7ff ffc0 	bl	8006f18 <sbrk_aligned>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	d155      	bne.n	800704a <_malloc_r+0xf2>
 8006f9e:	f8d8 4000 	ldr.w	r4, [r8]
 8006fa2:	4626      	mov	r6, r4
 8006fa4:	2e00      	cmp	r6, #0
 8006fa6:	d145      	bne.n	8007034 <_malloc_r+0xdc>
 8006fa8:	2c00      	cmp	r4, #0
 8006faa:	d048      	beq.n	800703e <_malloc_r+0xe6>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	eb04 0903 	add.w	r9, r4, r3
 8006fb6:	f002 f953 	bl	8009260 <_sbrk_r>
 8006fba:	4581      	cmp	r9, r0
 8006fbc:	d13f      	bne.n	800703e <_malloc_r+0xe6>
 8006fbe:	6821      	ldr	r1, [r4, #0]
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	1a6d      	subs	r5, r5, r1
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	f7ff ffa7 	bl	8006f18 <sbrk_aligned>
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d037      	beq.n	800703e <_malloc_r+0xe6>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	442b      	add	r3, r5
 8006fd2:	6023      	str	r3, [r4, #0]
 8006fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d038      	beq.n	800704e <_malloc_r+0xf6>
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	42a2      	cmp	r2, r4
 8006fe0:	d12b      	bne.n	800703a <_malloc_r+0xe2>
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	605a      	str	r2, [r3, #4]
 8006fe6:	e00f      	b.n	8007008 <_malloc_r+0xb0>
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	1b52      	subs	r2, r2, r5
 8006fec:	d41f      	bmi.n	800702e <_malloc_r+0xd6>
 8006fee:	2a0b      	cmp	r2, #11
 8006ff0:	d917      	bls.n	8007022 <_malloc_r+0xca>
 8006ff2:	1961      	adds	r1, r4, r5
 8006ff4:	42a3      	cmp	r3, r4
 8006ff6:	6025      	str	r5, [r4, #0]
 8006ff8:	bf18      	it	ne
 8006ffa:	6059      	strne	r1, [r3, #4]
 8006ffc:	6863      	ldr	r3, [r4, #4]
 8006ffe:	bf08      	it	eq
 8007000:	f8c8 1000 	streq.w	r1, [r8]
 8007004:	5162      	str	r2, [r4, r5]
 8007006:	604b      	str	r3, [r1, #4]
 8007008:	4638      	mov	r0, r7
 800700a:	f104 060b 	add.w	r6, r4, #11
 800700e:	f000 f829 	bl	8007064 <__malloc_unlock>
 8007012:	f026 0607 	bic.w	r6, r6, #7
 8007016:	1d23      	adds	r3, r4, #4
 8007018:	1af2      	subs	r2, r6, r3
 800701a:	d0ae      	beq.n	8006f7a <_malloc_r+0x22>
 800701c:	1b9b      	subs	r3, r3, r6
 800701e:	50a3      	str	r3, [r4, r2]
 8007020:	e7ab      	b.n	8006f7a <_malloc_r+0x22>
 8007022:	42a3      	cmp	r3, r4
 8007024:	6862      	ldr	r2, [r4, #4]
 8007026:	d1dd      	bne.n	8006fe4 <_malloc_r+0x8c>
 8007028:	f8c8 2000 	str.w	r2, [r8]
 800702c:	e7ec      	b.n	8007008 <_malloc_r+0xb0>
 800702e:	4623      	mov	r3, r4
 8007030:	6864      	ldr	r4, [r4, #4]
 8007032:	e7ac      	b.n	8006f8e <_malloc_r+0x36>
 8007034:	4634      	mov	r4, r6
 8007036:	6876      	ldr	r6, [r6, #4]
 8007038:	e7b4      	b.n	8006fa4 <_malloc_r+0x4c>
 800703a:	4613      	mov	r3, r2
 800703c:	e7cc      	b.n	8006fd8 <_malloc_r+0x80>
 800703e:	230c      	movs	r3, #12
 8007040:	4638      	mov	r0, r7
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	f000 f80e 	bl	8007064 <__malloc_unlock>
 8007048:	e797      	b.n	8006f7a <_malloc_r+0x22>
 800704a:	6025      	str	r5, [r4, #0]
 800704c:	e7dc      	b.n	8007008 <_malloc_r+0xb0>
 800704e:	605b      	str	r3, [r3, #4]
 8007050:	deff      	udf	#255	; 0xff
 8007052:	bf00      	nop
 8007054:	20000594 	.word	0x20000594

08007058 <__malloc_lock>:
 8007058:	4801      	ldr	r0, [pc, #4]	; (8007060 <__malloc_lock+0x8>)
 800705a:	f7ff b880 	b.w	800615e <__retarget_lock_acquire_recursive>
 800705e:	bf00      	nop
 8007060:	20000590 	.word	0x20000590

08007064 <__malloc_unlock>:
 8007064:	4801      	ldr	r0, [pc, #4]	; (800706c <__malloc_unlock+0x8>)
 8007066:	f7ff b87b 	b.w	8006160 <__retarget_lock_release_recursive>
 800706a:	bf00      	nop
 800706c:	20000590 	.word	0x20000590

08007070 <_Balloc>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	69c6      	ldr	r6, [r0, #28]
 8007074:	4604      	mov	r4, r0
 8007076:	460d      	mov	r5, r1
 8007078:	b976      	cbnz	r6, 8007098 <_Balloc+0x28>
 800707a:	2010      	movs	r0, #16
 800707c:	f7ff ff44 	bl	8006f08 <malloc>
 8007080:	4602      	mov	r2, r0
 8007082:	61e0      	str	r0, [r4, #28]
 8007084:	b920      	cbnz	r0, 8007090 <_Balloc+0x20>
 8007086:	216b      	movs	r1, #107	; 0x6b
 8007088:	4b17      	ldr	r3, [pc, #92]	; (80070e8 <_Balloc+0x78>)
 800708a:	4818      	ldr	r0, [pc, #96]	; (80070ec <_Balloc+0x7c>)
 800708c:	f002 f90c 	bl	80092a8 <__assert_func>
 8007090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007094:	6006      	str	r6, [r0, #0]
 8007096:	60c6      	str	r6, [r0, #12]
 8007098:	69e6      	ldr	r6, [r4, #28]
 800709a:	68f3      	ldr	r3, [r6, #12]
 800709c:	b183      	cbz	r3, 80070c0 <_Balloc+0x50>
 800709e:	69e3      	ldr	r3, [r4, #28]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070a6:	b9b8      	cbnz	r0, 80070d8 <_Balloc+0x68>
 80070a8:	2101      	movs	r1, #1
 80070aa:	fa01 f605 	lsl.w	r6, r1, r5
 80070ae:	1d72      	adds	r2, r6, #5
 80070b0:	4620      	mov	r0, r4
 80070b2:	0092      	lsls	r2, r2, #2
 80070b4:	f002 f916 	bl	80092e4 <_calloc_r>
 80070b8:	b160      	cbz	r0, 80070d4 <_Balloc+0x64>
 80070ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070be:	e00e      	b.n	80070de <_Balloc+0x6e>
 80070c0:	2221      	movs	r2, #33	; 0x21
 80070c2:	2104      	movs	r1, #4
 80070c4:	4620      	mov	r0, r4
 80070c6:	f002 f90d 	bl	80092e4 <_calloc_r>
 80070ca:	69e3      	ldr	r3, [r4, #28]
 80070cc:	60f0      	str	r0, [r6, #12]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e4      	bne.n	800709e <_Balloc+0x2e>
 80070d4:	2000      	movs	r0, #0
 80070d6:	bd70      	pop	{r4, r5, r6, pc}
 80070d8:	6802      	ldr	r2, [r0, #0]
 80070da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070de:	2300      	movs	r3, #0
 80070e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070e4:	e7f7      	b.n	80070d6 <_Balloc+0x66>
 80070e6:	bf00      	nop
 80070e8:	0800a19e 	.word	0x0800a19e
 80070ec:	0800a21e 	.word	0x0800a21e

080070f0 <_Bfree>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	69c6      	ldr	r6, [r0, #28]
 80070f4:	4605      	mov	r5, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	b976      	cbnz	r6, 8007118 <_Bfree+0x28>
 80070fa:	2010      	movs	r0, #16
 80070fc:	f7ff ff04 	bl	8006f08 <malloc>
 8007100:	4602      	mov	r2, r0
 8007102:	61e8      	str	r0, [r5, #28]
 8007104:	b920      	cbnz	r0, 8007110 <_Bfree+0x20>
 8007106:	218f      	movs	r1, #143	; 0x8f
 8007108:	4b08      	ldr	r3, [pc, #32]	; (800712c <_Bfree+0x3c>)
 800710a:	4809      	ldr	r0, [pc, #36]	; (8007130 <_Bfree+0x40>)
 800710c:	f002 f8cc 	bl	80092a8 <__assert_func>
 8007110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007114:	6006      	str	r6, [r0, #0]
 8007116:	60c6      	str	r6, [r0, #12]
 8007118:	b13c      	cbz	r4, 800712a <_Bfree+0x3a>
 800711a:	69eb      	ldr	r3, [r5, #28]
 800711c:	6862      	ldr	r2, [r4, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007124:	6021      	str	r1, [r4, #0]
 8007126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800712a:	bd70      	pop	{r4, r5, r6, pc}
 800712c:	0800a19e 	.word	0x0800a19e
 8007130:	0800a21e 	.word	0x0800a21e

08007134 <__multadd>:
 8007134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007138:	4607      	mov	r7, r0
 800713a:	460c      	mov	r4, r1
 800713c:	461e      	mov	r6, r3
 800713e:	2000      	movs	r0, #0
 8007140:	690d      	ldr	r5, [r1, #16]
 8007142:	f101 0c14 	add.w	ip, r1, #20
 8007146:	f8dc 3000 	ldr.w	r3, [ip]
 800714a:	3001      	adds	r0, #1
 800714c:	b299      	uxth	r1, r3
 800714e:	fb02 6101 	mla	r1, r2, r1, r6
 8007152:	0c1e      	lsrs	r6, r3, #16
 8007154:	0c0b      	lsrs	r3, r1, #16
 8007156:	fb02 3306 	mla	r3, r2, r6, r3
 800715a:	b289      	uxth	r1, r1
 800715c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007160:	4285      	cmp	r5, r0
 8007162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007166:	f84c 1b04 	str.w	r1, [ip], #4
 800716a:	dcec      	bgt.n	8007146 <__multadd+0x12>
 800716c:	b30e      	cbz	r6, 80071b2 <__multadd+0x7e>
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	42ab      	cmp	r3, r5
 8007172:	dc19      	bgt.n	80071a8 <__multadd+0x74>
 8007174:	6861      	ldr	r1, [r4, #4]
 8007176:	4638      	mov	r0, r7
 8007178:	3101      	adds	r1, #1
 800717a:	f7ff ff79 	bl	8007070 <_Balloc>
 800717e:	4680      	mov	r8, r0
 8007180:	b928      	cbnz	r0, 800718e <__multadd+0x5a>
 8007182:	4602      	mov	r2, r0
 8007184:	21ba      	movs	r1, #186	; 0xba
 8007186:	4b0c      	ldr	r3, [pc, #48]	; (80071b8 <__multadd+0x84>)
 8007188:	480c      	ldr	r0, [pc, #48]	; (80071bc <__multadd+0x88>)
 800718a:	f002 f88d 	bl	80092a8 <__assert_func>
 800718e:	6922      	ldr	r2, [r4, #16]
 8007190:	f104 010c 	add.w	r1, r4, #12
 8007194:	3202      	adds	r2, #2
 8007196:	0092      	lsls	r2, r2, #2
 8007198:	300c      	adds	r0, #12
 800719a:	f002 f871 	bl	8009280 <memcpy>
 800719e:	4621      	mov	r1, r4
 80071a0:	4638      	mov	r0, r7
 80071a2:	f7ff ffa5 	bl	80070f0 <_Bfree>
 80071a6:	4644      	mov	r4, r8
 80071a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071ac:	3501      	adds	r5, #1
 80071ae:	615e      	str	r6, [r3, #20]
 80071b0:	6125      	str	r5, [r4, #16]
 80071b2:	4620      	mov	r0, r4
 80071b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b8:	0800a20d 	.word	0x0800a20d
 80071bc:	0800a21e 	.word	0x0800a21e

080071c0 <__s2b>:
 80071c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c4:	4615      	mov	r5, r2
 80071c6:	2209      	movs	r2, #9
 80071c8:	461f      	mov	r7, r3
 80071ca:	3308      	adds	r3, #8
 80071cc:	460c      	mov	r4, r1
 80071ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80071d2:	4606      	mov	r6, r0
 80071d4:	2201      	movs	r2, #1
 80071d6:	2100      	movs	r1, #0
 80071d8:	429a      	cmp	r2, r3
 80071da:	db09      	blt.n	80071f0 <__s2b+0x30>
 80071dc:	4630      	mov	r0, r6
 80071de:	f7ff ff47 	bl	8007070 <_Balloc>
 80071e2:	b940      	cbnz	r0, 80071f6 <__s2b+0x36>
 80071e4:	4602      	mov	r2, r0
 80071e6:	21d3      	movs	r1, #211	; 0xd3
 80071e8:	4b18      	ldr	r3, [pc, #96]	; (800724c <__s2b+0x8c>)
 80071ea:	4819      	ldr	r0, [pc, #100]	; (8007250 <__s2b+0x90>)
 80071ec:	f002 f85c 	bl	80092a8 <__assert_func>
 80071f0:	0052      	lsls	r2, r2, #1
 80071f2:	3101      	adds	r1, #1
 80071f4:	e7f0      	b.n	80071d8 <__s2b+0x18>
 80071f6:	9b08      	ldr	r3, [sp, #32]
 80071f8:	2d09      	cmp	r5, #9
 80071fa:	6143      	str	r3, [r0, #20]
 80071fc:	f04f 0301 	mov.w	r3, #1
 8007200:	6103      	str	r3, [r0, #16]
 8007202:	dd16      	ble.n	8007232 <__s2b+0x72>
 8007204:	f104 0909 	add.w	r9, r4, #9
 8007208:	46c8      	mov	r8, r9
 800720a:	442c      	add	r4, r5
 800720c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007210:	4601      	mov	r1, r0
 8007212:	220a      	movs	r2, #10
 8007214:	4630      	mov	r0, r6
 8007216:	3b30      	subs	r3, #48	; 0x30
 8007218:	f7ff ff8c 	bl	8007134 <__multadd>
 800721c:	45a0      	cmp	r8, r4
 800721e:	d1f5      	bne.n	800720c <__s2b+0x4c>
 8007220:	f1a5 0408 	sub.w	r4, r5, #8
 8007224:	444c      	add	r4, r9
 8007226:	1b2d      	subs	r5, r5, r4
 8007228:	1963      	adds	r3, r4, r5
 800722a:	42bb      	cmp	r3, r7
 800722c:	db04      	blt.n	8007238 <__s2b+0x78>
 800722e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007232:	2509      	movs	r5, #9
 8007234:	340a      	adds	r4, #10
 8007236:	e7f6      	b.n	8007226 <__s2b+0x66>
 8007238:	f814 3b01 	ldrb.w	r3, [r4], #1
 800723c:	4601      	mov	r1, r0
 800723e:	220a      	movs	r2, #10
 8007240:	4630      	mov	r0, r6
 8007242:	3b30      	subs	r3, #48	; 0x30
 8007244:	f7ff ff76 	bl	8007134 <__multadd>
 8007248:	e7ee      	b.n	8007228 <__s2b+0x68>
 800724a:	bf00      	nop
 800724c:	0800a20d 	.word	0x0800a20d
 8007250:	0800a21e 	.word	0x0800a21e

08007254 <__hi0bits>:
 8007254:	0c02      	lsrs	r2, r0, #16
 8007256:	0412      	lsls	r2, r2, #16
 8007258:	4603      	mov	r3, r0
 800725a:	b9ca      	cbnz	r2, 8007290 <__hi0bits+0x3c>
 800725c:	0403      	lsls	r3, r0, #16
 800725e:	2010      	movs	r0, #16
 8007260:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007264:	bf04      	itt	eq
 8007266:	021b      	lsleq	r3, r3, #8
 8007268:	3008      	addeq	r0, #8
 800726a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800726e:	bf04      	itt	eq
 8007270:	011b      	lsleq	r3, r3, #4
 8007272:	3004      	addeq	r0, #4
 8007274:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007278:	bf04      	itt	eq
 800727a:	009b      	lsleq	r3, r3, #2
 800727c:	3002      	addeq	r0, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	db05      	blt.n	800728e <__hi0bits+0x3a>
 8007282:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007286:	f100 0001 	add.w	r0, r0, #1
 800728a:	bf08      	it	eq
 800728c:	2020      	moveq	r0, #32
 800728e:	4770      	bx	lr
 8007290:	2000      	movs	r0, #0
 8007292:	e7e5      	b.n	8007260 <__hi0bits+0xc>

08007294 <__lo0bits>:
 8007294:	6803      	ldr	r3, [r0, #0]
 8007296:	4602      	mov	r2, r0
 8007298:	f013 0007 	ands.w	r0, r3, #7
 800729c:	d00b      	beq.n	80072b6 <__lo0bits+0x22>
 800729e:	07d9      	lsls	r1, r3, #31
 80072a0:	d421      	bmi.n	80072e6 <__lo0bits+0x52>
 80072a2:	0798      	lsls	r0, r3, #30
 80072a4:	bf49      	itett	mi
 80072a6:	085b      	lsrmi	r3, r3, #1
 80072a8:	089b      	lsrpl	r3, r3, #2
 80072aa:	2001      	movmi	r0, #1
 80072ac:	6013      	strmi	r3, [r2, #0]
 80072ae:	bf5c      	itt	pl
 80072b0:	2002      	movpl	r0, #2
 80072b2:	6013      	strpl	r3, [r2, #0]
 80072b4:	4770      	bx	lr
 80072b6:	b299      	uxth	r1, r3
 80072b8:	b909      	cbnz	r1, 80072be <__lo0bits+0x2a>
 80072ba:	2010      	movs	r0, #16
 80072bc:	0c1b      	lsrs	r3, r3, #16
 80072be:	b2d9      	uxtb	r1, r3
 80072c0:	b909      	cbnz	r1, 80072c6 <__lo0bits+0x32>
 80072c2:	3008      	adds	r0, #8
 80072c4:	0a1b      	lsrs	r3, r3, #8
 80072c6:	0719      	lsls	r1, r3, #28
 80072c8:	bf04      	itt	eq
 80072ca:	091b      	lsreq	r3, r3, #4
 80072cc:	3004      	addeq	r0, #4
 80072ce:	0799      	lsls	r1, r3, #30
 80072d0:	bf04      	itt	eq
 80072d2:	089b      	lsreq	r3, r3, #2
 80072d4:	3002      	addeq	r0, #2
 80072d6:	07d9      	lsls	r1, r3, #31
 80072d8:	d403      	bmi.n	80072e2 <__lo0bits+0x4e>
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	f100 0001 	add.w	r0, r0, #1
 80072e0:	d003      	beq.n	80072ea <__lo0bits+0x56>
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	4770      	bx	lr
 80072e6:	2000      	movs	r0, #0
 80072e8:	4770      	bx	lr
 80072ea:	2020      	movs	r0, #32
 80072ec:	4770      	bx	lr
	...

080072f0 <__i2b>:
 80072f0:	b510      	push	{r4, lr}
 80072f2:	460c      	mov	r4, r1
 80072f4:	2101      	movs	r1, #1
 80072f6:	f7ff febb 	bl	8007070 <_Balloc>
 80072fa:	4602      	mov	r2, r0
 80072fc:	b928      	cbnz	r0, 800730a <__i2b+0x1a>
 80072fe:	f240 1145 	movw	r1, #325	; 0x145
 8007302:	4b04      	ldr	r3, [pc, #16]	; (8007314 <__i2b+0x24>)
 8007304:	4804      	ldr	r0, [pc, #16]	; (8007318 <__i2b+0x28>)
 8007306:	f001 ffcf 	bl	80092a8 <__assert_func>
 800730a:	2301      	movs	r3, #1
 800730c:	6144      	str	r4, [r0, #20]
 800730e:	6103      	str	r3, [r0, #16]
 8007310:	bd10      	pop	{r4, pc}
 8007312:	bf00      	nop
 8007314:	0800a20d 	.word	0x0800a20d
 8007318:	0800a21e 	.word	0x0800a21e

0800731c <__multiply>:
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	4691      	mov	r9, r2
 8007322:	690a      	ldr	r2, [r1, #16]
 8007324:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007328:	460c      	mov	r4, r1
 800732a:	429a      	cmp	r2, r3
 800732c:	bfbe      	ittt	lt
 800732e:	460b      	movlt	r3, r1
 8007330:	464c      	movlt	r4, r9
 8007332:	4699      	movlt	r9, r3
 8007334:	6927      	ldr	r7, [r4, #16]
 8007336:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800733a:	68a3      	ldr	r3, [r4, #8]
 800733c:	6861      	ldr	r1, [r4, #4]
 800733e:	eb07 060a 	add.w	r6, r7, sl
 8007342:	42b3      	cmp	r3, r6
 8007344:	b085      	sub	sp, #20
 8007346:	bfb8      	it	lt
 8007348:	3101      	addlt	r1, #1
 800734a:	f7ff fe91 	bl	8007070 <_Balloc>
 800734e:	b930      	cbnz	r0, 800735e <__multiply+0x42>
 8007350:	4602      	mov	r2, r0
 8007352:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007356:	4b43      	ldr	r3, [pc, #268]	; (8007464 <__multiply+0x148>)
 8007358:	4843      	ldr	r0, [pc, #268]	; (8007468 <__multiply+0x14c>)
 800735a:	f001 ffa5 	bl	80092a8 <__assert_func>
 800735e:	f100 0514 	add.w	r5, r0, #20
 8007362:	462b      	mov	r3, r5
 8007364:	2200      	movs	r2, #0
 8007366:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800736a:	4543      	cmp	r3, r8
 800736c:	d321      	bcc.n	80073b2 <__multiply+0x96>
 800736e:	f104 0314 	add.w	r3, r4, #20
 8007372:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007376:	f109 0314 	add.w	r3, r9, #20
 800737a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800737e:	9202      	str	r2, [sp, #8]
 8007380:	1b3a      	subs	r2, r7, r4
 8007382:	3a15      	subs	r2, #21
 8007384:	f022 0203 	bic.w	r2, r2, #3
 8007388:	3204      	adds	r2, #4
 800738a:	f104 0115 	add.w	r1, r4, #21
 800738e:	428f      	cmp	r7, r1
 8007390:	bf38      	it	cc
 8007392:	2204      	movcc	r2, #4
 8007394:	9201      	str	r2, [sp, #4]
 8007396:	9a02      	ldr	r2, [sp, #8]
 8007398:	9303      	str	r3, [sp, #12]
 800739a:	429a      	cmp	r2, r3
 800739c:	d80c      	bhi.n	80073b8 <__multiply+0x9c>
 800739e:	2e00      	cmp	r6, #0
 80073a0:	dd03      	ble.n	80073aa <__multiply+0x8e>
 80073a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d05a      	beq.n	8007460 <__multiply+0x144>
 80073aa:	6106      	str	r6, [r0, #16]
 80073ac:	b005      	add	sp, #20
 80073ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b2:	f843 2b04 	str.w	r2, [r3], #4
 80073b6:	e7d8      	b.n	800736a <__multiply+0x4e>
 80073b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80073bc:	f1ba 0f00 	cmp.w	sl, #0
 80073c0:	d023      	beq.n	800740a <__multiply+0xee>
 80073c2:	46a9      	mov	r9, r5
 80073c4:	f04f 0c00 	mov.w	ip, #0
 80073c8:	f104 0e14 	add.w	lr, r4, #20
 80073cc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073d0:	f8d9 1000 	ldr.w	r1, [r9]
 80073d4:	fa1f fb82 	uxth.w	fp, r2
 80073d8:	b289      	uxth	r1, r1
 80073da:	fb0a 110b 	mla	r1, sl, fp, r1
 80073de:	4461      	add	r1, ip
 80073e0:	f8d9 c000 	ldr.w	ip, [r9]
 80073e4:	0c12      	lsrs	r2, r2, #16
 80073e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80073ea:	fb0a c202 	mla	r2, sl, r2, ip
 80073ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073f2:	b289      	uxth	r1, r1
 80073f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073f8:	4577      	cmp	r7, lr
 80073fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073fe:	f849 1b04 	str.w	r1, [r9], #4
 8007402:	d8e3      	bhi.n	80073cc <__multiply+0xb0>
 8007404:	9a01      	ldr	r2, [sp, #4]
 8007406:	f845 c002 	str.w	ip, [r5, r2]
 800740a:	9a03      	ldr	r2, [sp, #12]
 800740c:	3304      	adds	r3, #4
 800740e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007412:	f1b9 0f00 	cmp.w	r9, #0
 8007416:	d021      	beq.n	800745c <__multiply+0x140>
 8007418:	46ae      	mov	lr, r5
 800741a:	f04f 0a00 	mov.w	sl, #0
 800741e:	6829      	ldr	r1, [r5, #0]
 8007420:	f104 0c14 	add.w	ip, r4, #20
 8007424:	f8bc b000 	ldrh.w	fp, [ip]
 8007428:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800742c:	b289      	uxth	r1, r1
 800742e:	fb09 220b 	mla	r2, r9, fp, r2
 8007432:	4452      	add	r2, sl
 8007434:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007438:	f84e 1b04 	str.w	r1, [lr], #4
 800743c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007440:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007444:	f8be 1000 	ldrh.w	r1, [lr]
 8007448:	4567      	cmp	r7, ip
 800744a:	fb09 110a 	mla	r1, r9, sl, r1
 800744e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007452:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007456:	d8e5      	bhi.n	8007424 <__multiply+0x108>
 8007458:	9a01      	ldr	r2, [sp, #4]
 800745a:	50a9      	str	r1, [r5, r2]
 800745c:	3504      	adds	r5, #4
 800745e:	e79a      	b.n	8007396 <__multiply+0x7a>
 8007460:	3e01      	subs	r6, #1
 8007462:	e79c      	b.n	800739e <__multiply+0x82>
 8007464:	0800a20d 	.word	0x0800a20d
 8007468:	0800a21e 	.word	0x0800a21e

0800746c <__pow5mult>:
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007470:	4615      	mov	r5, r2
 8007472:	f012 0203 	ands.w	r2, r2, #3
 8007476:	4606      	mov	r6, r0
 8007478:	460f      	mov	r7, r1
 800747a:	d007      	beq.n	800748c <__pow5mult+0x20>
 800747c:	4c25      	ldr	r4, [pc, #148]	; (8007514 <__pow5mult+0xa8>)
 800747e:	3a01      	subs	r2, #1
 8007480:	2300      	movs	r3, #0
 8007482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007486:	f7ff fe55 	bl	8007134 <__multadd>
 800748a:	4607      	mov	r7, r0
 800748c:	10ad      	asrs	r5, r5, #2
 800748e:	d03d      	beq.n	800750c <__pow5mult+0xa0>
 8007490:	69f4      	ldr	r4, [r6, #28]
 8007492:	b97c      	cbnz	r4, 80074b4 <__pow5mult+0x48>
 8007494:	2010      	movs	r0, #16
 8007496:	f7ff fd37 	bl	8006f08 <malloc>
 800749a:	4602      	mov	r2, r0
 800749c:	61f0      	str	r0, [r6, #28]
 800749e:	b928      	cbnz	r0, 80074ac <__pow5mult+0x40>
 80074a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80074a4:	4b1c      	ldr	r3, [pc, #112]	; (8007518 <__pow5mult+0xac>)
 80074a6:	481d      	ldr	r0, [pc, #116]	; (800751c <__pow5mult+0xb0>)
 80074a8:	f001 fefe 	bl	80092a8 <__assert_func>
 80074ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074b0:	6004      	str	r4, [r0, #0]
 80074b2:	60c4      	str	r4, [r0, #12]
 80074b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80074b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074bc:	b94c      	cbnz	r4, 80074d2 <__pow5mult+0x66>
 80074be:	f240 2171 	movw	r1, #625	; 0x271
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7ff ff14 	bl	80072f0 <__i2b>
 80074c8:	2300      	movs	r3, #0
 80074ca:	4604      	mov	r4, r0
 80074cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80074d0:	6003      	str	r3, [r0, #0]
 80074d2:	f04f 0900 	mov.w	r9, #0
 80074d6:	07eb      	lsls	r3, r5, #31
 80074d8:	d50a      	bpl.n	80074f0 <__pow5mult+0x84>
 80074da:	4639      	mov	r1, r7
 80074dc:	4622      	mov	r2, r4
 80074de:	4630      	mov	r0, r6
 80074e0:	f7ff ff1c 	bl	800731c <__multiply>
 80074e4:	4680      	mov	r8, r0
 80074e6:	4639      	mov	r1, r7
 80074e8:	4630      	mov	r0, r6
 80074ea:	f7ff fe01 	bl	80070f0 <_Bfree>
 80074ee:	4647      	mov	r7, r8
 80074f0:	106d      	asrs	r5, r5, #1
 80074f2:	d00b      	beq.n	800750c <__pow5mult+0xa0>
 80074f4:	6820      	ldr	r0, [r4, #0]
 80074f6:	b938      	cbnz	r0, 8007508 <__pow5mult+0x9c>
 80074f8:	4622      	mov	r2, r4
 80074fa:	4621      	mov	r1, r4
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7ff ff0d 	bl	800731c <__multiply>
 8007502:	6020      	str	r0, [r4, #0]
 8007504:	f8c0 9000 	str.w	r9, [r0]
 8007508:	4604      	mov	r4, r0
 800750a:	e7e4      	b.n	80074d6 <__pow5mult+0x6a>
 800750c:	4638      	mov	r0, r7
 800750e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007512:	bf00      	nop
 8007514:	0800a368 	.word	0x0800a368
 8007518:	0800a19e 	.word	0x0800a19e
 800751c:	0800a21e 	.word	0x0800a21e

08007520 <__lshift>:
 8007520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007524:	460c      	mov	r4, r1
 8007526:	4607      	mov	r7, r0
 8007528:	4691      	mov	r9, r2
 800752a:	6923      	ldr	r3, [r4, #16]
 800752c:	6849      	ldr	r1, [r1, #4]
 800752e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007532:	68a3      	ldr	r3, [r4, #8]
 8007534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007538:	f108 0601 	add.w	r6, r8, #1
 800753c:	42b3      	cmp	r3, r6
 800753e:	db0b      	blt.n	8007558 <__lshift+0x38>
 8007540:	4638      	mov	r0, r7
 8007542:	f7ff fd95 	bl	8007070 <_Balloc>
 8007546:	4605      	mov	r5, r0
 8007548:	b948      	cbnz	r0, 800755e <__lshift+0x3e>
 800754a:	4602      	mov	r2, r0
 800754c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007550:	4b27      	ldr	r3, [pc, #156]	; (80075f0 <__lshift+0xd0>)
 8007552:	4828      	ldr	r0, [pc, #160]	; (80075f4 <__lshift+0xd4>)
 8007554:	f001 fea8 	bl	80092a8 <__assert_func>
 8007558:	3101      	adds	r1, #1
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	e7ee      	b.n	800753c <__lshift+0x1c>
 800755e:	2300      	movs	r3, #0
 8007560:	f100 0114 	add.w	r1, r0, #20
 8007564:	f100 0210 	add.w	r2, r0, #16
 8007568:	4618      	mov	r0, r3
 800756a:	4553      	cmp	r3, sl
 800756c:	db33      	blt.n	80075d6 <__lshift+0xb6>
 800756e:	6920      	ldr	r0, [r4, #16]
 8007570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007574:	f104 0314 	add.w	r3, r4, #20
 8007578:	f019 091f 	ands.w	r9, r9, #31
 800757c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007580:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007584:	d02b      	beq.n	80075de <__lshift+0xbe>
 8007586:	468a      	mov	sl, r1
 8007588:	2200      	movs	r2, #0
 800758a:	f1c9 0e20 	rsb	lr, r9, #32
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	fa00 f009 	lsl.w	r0, r0, r9
 8007594:	4310      	orrs	r0, r2
 8007596:	f84a 0b04 	str.w	r0, [sl], #4
 800759a:	f853 2b04 	ldr.w	r2, [r3], #4
 800759e:	459c      	cmp	ip, r3
 80075a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80075a4:	d8f3      	bhi.n	800758e <__lshift+0x6e>
 80075a6:	ebac 0304 	sub.w	r3, ip, r4
 80075aa:	3b15      	subs	r3, #21
 80075ac:	f023 0303 	bic.w	r3, r3, #3
 80075b0:	3304      	adds	r3, #4
 80075b2:	f104 0015 	add.w	r0, r4, #21
 80075b6:	4584      	cmp	ip, r0
 80075b8:	bf38      	it	cc
 80075ba:	2304      	movcc	r3, #4
 80075bc:	50ca      	str	r2, [r1, r3]
 80075be:	b10a      	cbz	r2, 80075c4 <__lshift+0xa4>
 80075c0:	f108 0602 	add.w	r6, r8, #2
 80075c4:	3e01      	subs	r6, #1
 80075c6:	4638      	mov	r0, r7
 80075c8:	4621      	mov	r1, r4
 80075ca:	612e      	str	r6, [r5, #16]
 80075cc:	f7ff fd90 	bl	80070f0 <_Bfree>
 80075d0:	4628      	mov	r0, r5
 80075d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80075da:	3301      	adds	r3, #1
 80075dc:	e7c5      	b.n	800756a <__lshift+0x4a>
 80075de:	3904      	subs	r1, #4
 80075e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e4:	459c      	cmp	ip, r3
 80075e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80075ea:	d8f9      	bhi.n	80075e0 <__lshift+0xc0>
 80075ec:	e7ea      	b.n	80075c4 <__lshift+0xa4>
 80075ee:	bf00      	nop
 80075f0:	0800a20d 	.word	0x0800a20d
 80075f4:	0800a21e 	.word	0x0800a21e

080075f8 <__mcmp>:
 80075f8:	4603      	mov	r3, r0
 80075fa:	690a      	ldr	r2, [r1, #16]
 80075fc:	6900      	ldr	r0, [r0, #16]
 80075fe:	b530      	push	{r4, r5, lr}
 8007600:	1a80      	subs	r0, r0, r2
 8007602:	d10d      	bne.n	8007620 <__mcmp+0x28>
 8007604:	3314      	adds	r3, #20
 8007606:	3114      	adds	r1, #20
 8007608:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800760c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007610:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007614:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007618:	4295      	cmp	r5, r2
 800761a:	d002      	beq.n	8007622 <__mcmp+0x2a>
 800761c:	d304      	bcc.n	8007628 <__mcmp+0x30>
 800761e:	2001      	movs	r0, #1
 8007620:	bd30      	pop	{r4, r5, pc}
 8007622:	42a3      	cmp	r3, r4
 8007624:	d3f4      	bcc.n	8007610 <__mcmp+0x18>
 8007626:	e7fb      	b.n	8007620 <__mcmp+0x28>
 8007628:	f04f 30ff 	mov.w	r0, #4294967295
 800762c:	e7f8      	b.n	8007620 <__mcmp+0x28>
	...

08007630 <__mdiff>:
 8007630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	460d      	mov	r5, r1
 8007636:	4607      	mov	r7, r0
 8007638:	4611      	mov	r1, r2
 800763a:	4628      	mov	r0, r5
 800763c:	4614      	mov	r4, r2
 800763e:	f7ff ffdb 	bl	80075f8 <__mcmp>
 8007642:	1e06      	subs	r6, r0, #0
 8007644:	d111      	bne.n	800766a <__mdiff+0x3a>
 8007646:	4631      	mov	r1, r6
 8007648:	4638      	mov	r0, r7
 800764a:	f7ff fd11 	bl	8007070 <_Balloc>
 800764e:	4602      	mov	r2, r0
 8007650:	b928      	cbnz	r0, 800765e <__mdiff+0x2e>
 8007652:	f240 2137 	movw	r1, #567	; 0x237
 8007656:	4b3a      	ldr	r3, [pc, #232]	; (8007740 <__mdiff+0x110>)
 8007658:	483a      	ldr	r0, [pc, #232]	; (8007744 <__mdiff+0x114>)
 800765a:	f001 fe25 	bl	80092a8 <__assert_func>
 800765e:	2301      	movs	r3, #1
 8007660:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007664:	4610      	mov	r0, r2
 8007666:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766a:	bfa4      	itt	ge
 800766c:	4623      	movge	r3, r4
 800766e:	462c      	movge	r4, r5
 8007670:	4638      	mov	r0, r7
 8007672:	6861      	ldr	r1, [r4, #4]
 8007674:	bfa6      	itte	ge
 8007676:	461d      	movge	r5, r3
 8007678:	2600      	movge	r6, #0
 800767a:	2601      	movlt	r6, #1
 800767c:	f7ff fcf8 	bl	8007070 <_Balloc>
 8007680:	4602      	mov	r2, r0
 8007682:	b918      	cbnz	r0, 800768c <__mdiff+0x5c>
 8007684:	f240 2145 	movw	r1, #581	; 0x245
 8007688:	4b2d      	ldr	r3, [pc, #180]	; (8007740 <__mdiff+0x110>)
 800768a:	e7e5      	b.n	8007658 <__mdiff+0x28>
 800768c:	f102 0814 	add.w	r8, r2, #20
 8007690:	46c2      	mov	sl, r8
 8007692:	f04f 0c00 	mov.w	ip, #0
 8007696:	6927      	ldr	r7, [r4, #16]
 8007698:	60c6      	str	r6, [r0, #12]
 800769a:	692e      	ldr	r6, [r5, #16]
 800769c:	f104 0014 	add.w	r0, r4, #20
 80076a0:	f105 0914 	add.w	r9, r5, #20
 80076a4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80076a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076ac:	3410      	adds	r4, #16
 80076ae:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80076b2:	f859 3b04 	ldr.w	r3, [r9], #4
 80076b6:	fa1f f18b 	uxth.w	r1, fp
 80076ba:	4461      	add	r1, ip
 80076bc:	fa1f fc83 	uxth.w	ip, r3
 80076c0:	0c1b      	lsrs	r3, r3, #16
 80076c2:	eba1 010c 	sub.w	r1, r1, ip
 80076c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80076ce:	b289      	uxth	r1, r1
 80076d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80076d4:	454e      	cmp	r6, r9
 80076d6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80076da:	f84a 1b04 	str.w	r1, [sl], #4
 80076de:	d8e6      	bhi.n	80076ae <__mdiff+0x7e>
 80076e0:	1b73      	subs	r3, r6, r5
 80076e2:	3b15      	subs	r3, #21
 80076e4:	f023 0303 	bic.w	r3, r3, #3
 80076e8:	3515      	adds	r5, #21
 80076ea:	3304      	adds	r3, #4
 80076ec:	42ae      	cmp	r6, r5
 80076ee:	bf38      	it	cc
 80076f0:	2304      	movcc	r3, #4
 80076f2:	4418      	add	r0, r3
 80076f4:	4443      	add	r3, r8
 80076f6:	461e      	mov	r6, r3
 80076f8:	4605      	mov	r5, r0
 80076fa:	4575      	cmp	r5, lr
 80076fc:	d30e      	bcc.n	800771c <__mdiff+0xec>
 80076fe:	f10e 0103 	add.w	r1, lr, #3
 8007702:	1a09      	subs	r1, r1, r0
 8007704:	f021 0103 	bic.w	r1, r1, #3
 8007708:	3803      	subs	r0, #3
 800770a:	4586      	cmp	lr, r0
 800770c:	bf38      	it	cc
 800770e:	2100      	movcc	r1, #0
 8007710:	440b      	add	r3, r1
 8007712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007716:	b189      	cbz	r1, 800773c <__mdiff+0x10c>
 8007718:	6117      	str	r7, [r2, #16]
 800771a:	e7a3      	b.n	8007664 <__mdiff+0x34>
 800771c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007720:	fa1f f188 	uxth.w	r1, r8
 8007724:	4461      	add	r1, ip
 8007726:	140c      	asrs	r4, r1, #16
 8007728:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800772c:	b289      	uxth	r1, r1
 800772e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007732:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007736:	f846 1b04 	str.w	r1, [r6], #4
 800773a:	e7de      	b.n	80076fa <__mdiff+0xca>
 800773c:	3f01      	subs	r7, #1
 800773e:	e7e8      	b.n	8007712 <__mdiff+0xe2>
 8007740:	0800a20d 	.word	0x0800a20d
 8007744:	0800a21e 	.word	0x0800a21e

08007748 <__ulp>:
 8007748:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <__ulp+0x3c>)
 800774a:	400b      	ands	r3, r1
 800774c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007750:	2b00      	cmp	r3, #0
 8007752:	dc08      	bgt.n	8007766 <__ulp+0x1e>
 8007754:	425b      	negs	r3, r3
 8007756:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800775a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800775e:	da04      	bge.n	800776a <__ulp+0x22>
 8007760:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007764:	4113      	asrs	r3, r2
 8007766:	2200      	movs	r2, #0
 8007768:	e008      	b.n	800777c <__ulp+0x34>
 800776a:	f1a2 0314 	sub.w	r3, r2, #20
 800776e:	2b1e      	cmp	r3, #30
 8007770:	bfd6      	itet	le
 8007772:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007776:	2201      	movgt	r2, #1
 8007778:	40da      	lsrle	r2, r3
 800777a:	2300      	movs	r3, #0
 800777c:	4619      	mov	r1, r3
 800777e:	4610      	mov	r0, r2
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	7ff00000 	.word	0x7ff00000

08007788 <__b2d>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	6905      	ldr	r5, [r0, #16]
 800778c:	f100 0714 	add.w	r7, r0, #20
 8007790:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007794:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007798:	1f2e      	subs	r6, r5, #4
 800779a:	4620      	mov	r0, r4
 800779c:	f7ff fd5a 	bl	8007254 <__hi0bits>
 80077a0:	f1c0 0220 	rsb	r2, r0, #32
 80077a4:	280a      	cmp	r0, #10
 80077a6:	4603      	mov	r3, r0
 80077a8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007814 <__b2d+0x8c>
 80077ac:	600a      	str	r2, [r1, #0]
 80077ae:	dc12      	bgt.n	80077d6 <__b2d+0x4e>
 80077b0:	f1c0 0e0b 	rsb	lr, r0, #11
 80077b4:	fa24 f20e 	lsr.w	r2, r4, lr
 80077b8:	42b7      	cmp	r7, r6
 80077ba:	ea42 010c 	orr.w	r1, r2, ip
 80077be:	bf2c      	ite	cs
 80077c0:	2200      	movcs	r2, #0
 80077c2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80077c6:	3315      	adds	r3, #21
 80077c8:	fa04 f303 	lsl.w	r3, r4, r3
 80077cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80077d0:	431a      	orrs	r2, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077d6:	42b7      	cmp	r7, r6
 80077d8:	bf2e      	itee	cs
 80077da:	2200      	movcs	r2, #0
 80077dc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80077e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80077e4:	3b0b      	subs	r3, #11
 80077e6:	d012      	beq.n	800780e <__b2d+0x86>
 80077e8:	f1c3 0520 	rsb	r5, r3, #32
 80077ec:	fa22 f105 	lsr.w	r1, r2, r5
 80077f0:	409c      	lsls	r4, r3
 80077f2:	430c      	orrs	r4, r1
 80077f4:	42be      	cmp	r6, r7
 80077f6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80077fa:	bf94      	ite	ls
 80077fc:	2400      	movls	r4, #0
 80077fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007802:	409a      	lsls	r2, r3
 8007804:	40ec      	lsrs	r4, r5
 8007806:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800780a:	4322      	orrs	r2, r4
 800780c:	e7e1      	b.n	80077d2 <__b2d+0x4a>
 800780e:	ea44 010c 	orr.w	r1, r4, ip
 8007812:	e7de      	b.n	80077d2 <__b2d+0x4a>
 8007814:	3ff00000 	.word	0x3ff00000

08007818 <__d2b>:
 8007818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800781a:	2101      	movs	r1, #1
 800781c:	4617      	mov	r7, r2
 800781e:	461c      	mov	r4, r3
 8007820:	9e08      	ldr	r6, [sp, #32]
 8007822:	f7ff fc25 	bl	8007070 <_Balloc>
 8007826:	4605      	mov	r5, r0
 8007828:	b930      	cbnz	r0, 8007838 <__d2b+0x20>
 800782a:	4602      	mov	r2, r0
 800782c:	f240 310f 	movw	r1, #783	; 0x30f
 8007830:	4b22      	ldr	r3, [pc, #136]	; (80078bc <__d2b+0xa4>)
 8007832:	4823      	ldr	r0, [pc, #140]	; (80078c0 <__d2b+0xa8>)
 8007834:	f001 fd38 	bl	80092a8 <__assert_func>
 8007838:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800783c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007840:	bb24      	cbnz	r4, 800788c <__d2b+0x74>
 8007842:	2f00      	cmp	r7, #0
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	d026      	beq.n	8007896 <__d2b+0x7e>
 8007848:	4668      	mov	r0, sp
 800784a:	9700      	str	r7, [sp, #0]
 800784c:	f7ff fd22 	bl	8007294 <__lo0bits>
 8007850:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007854:	b1e8      	cbz	r0, 8007892 <__d2b+0x7a>
 8007856:	f1c0 0320 	rsb	r3, r0, #32
 800785a:	fa02 f303 	lsl.w	r3, r2, r3
 800785e:	430b      	orrs	r3, r1
 8007860:	40c2      	lsrs	r2, r0
 8007862:	616b      	str	r3, [r5, #20]
 8007864:	9201      	str	r2, [sp, #4]
 8007866:	9b01      	ldr	r3, [sp, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	bf14      	ite	ne
 800786c:	2102      	movne	r1, #2
 800786e:	2101      	moveq	r1, #1
 8007870:	61ab      	str	r3, [r5, #24]
 8007872:	6129      	str	r1, [r5, #16]
 8007874:	b1bc      	cbz	r4, 80078a6 <__d2b+0x8e>
 8007876:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800787a:	4404      	add	r4, r0
 800787c:	6034      	str	r4, [r6, #0]
 800787e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007884:	6018      	str	r0, [r3, #0]
 8007886:	4628      	mov	r0, r5
 8007888:	b003      	add	sp, #12
 800788a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800788c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007890:	e7d7      	b.n	8007842 <__d2b+0x2a>
 8007892:	6169      	str	r1, [r5, #20]
 8007894:	e7e7      	b.n	8007866 <__d2b+0x4e>
 8007896:	a801      	add	r0, sp, #4
 8007898:	f7ff fcfc 	bl	8007294 <__lo0bits>
 800789c:	9b01      	ldr	r3, [sp, #4]
 800789e:	2101      	movs	r1, #1
 80078a0:	616b      	str	r3, [r5, #20]
 80078a2:	3020      	adds	r0, #32
 80078a4:	e7e5      	b.n	8007872 <__d2b+0x5a>
 80078a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078aa:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80078ae:	6030      	str	r0, [r6, #0]
 80078b0:	6918      	ldr	r0, [r3, #16]
 80078b2:	f7ff fccf 	bl	8007254 <__hi0bits>
 80078b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80078ba:	e7e2      	b.n	8007882 <__d2b+0x6a>
 80078bc:	0800a20d 	.word	0x0800a20d
 80078c0:	0800a21e 	.word	0x0800a21e

080078c4 <__ratio>:
 80078c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c8:	4688      	mov	r8, r1
 80078ca:	4669      	mov	r1, sp
 80078cc:	4681      	mov	r9, r0
 80078ce:	f7ff ff5b 	bl	8007788 <__b2d>
 80078d2:	460f      	mov	r7, r1
 80078d4:	4604      	mov	r4, r0
 80078d6:	460d      	mov	r5, r1
 80078d8:	4640      	mov	r0, r8
 80078da:	a901      	add	r1, sp, #4
 80078dc:	f7ff ff54 	bl	8007788 <__b2d>
 80078e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80078e8:	468b      	mov	fp, r1
 80078ea:	eba3 0c02 	sub.w	ip, r3, r2
 80078ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80078f2:	1a9b      	subs	r3, r3, r2
 80078f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bfd5      	itete	le
 80078fc:	460a      	movle	r2, r1
 80078fe:	462a      	movgt	r2, r5
 8007900:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007904:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007908:	bfd8      	it	le
 800790a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800790e:	465b      	mov	r3, fp
 8007910:	4602      	mov	r2, r0
 8007912:	4639      	mov	r1, r7
 8007914:	4620      	mov	r0, r4
 8007916:	f7f8 ff13 	bl	8000740 <__aeabi_ddiv>
 800791a:	b003      	add	sp, #12
 800791c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007920 <__copybits>:
 8007920:	3901      	subs	r1, #1
 8007922:	b570      	push	{r4, r5, r6, lr}
 8007924:	1149      	asrs	r1, r1, #5
 8007926:	6914      	ldr	r4, [r2, #16]
 8007928:	3101      	adds	r1, #1
 800792a:	f102 0314 	add.w	r3, r2, #20
 800792e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007932:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007936:	1f05      	subs	r5, r0, #4
 8007938:	42a3      	cmp	r3, r4
 800793a:	d30c      	bcc.n	8007956 <__copybits+0x36>
 800793c:	1aa3      	subs	r3, r4, r2
 800793e:	3b11      	subs	r3, #17
 8007940:	f023 0303 	bic.w	r3, r3, #3
 8007944:	3211      	adds	r2, #17
 8007946:	42a2      	cmp	r2, r4
 8007948:	bf88      	it	hi
 800794a:	2300      	movhi	r3, #0
 800794c:	4418      	add	r0, r3
 800794e:	2300      	movs	r3, #0
 8007950:	4288      	cmp	r0, r1
 8007952:	d305      	bcc.n	8007960 <__copybits+0x40>
 8007954:	bd70      	pop	{r4, r5, r6, pc}
 8007956:	f853 6b04 	ldr.w	r6, [r3], #4
 800795a:	f845 6f04 	str.w	r6, [r5, #4]!
 800795e:	e7eb      	b.n	8007938 <__copybits+0x18>
 8007960:	f840 3b04 	str.w	r3, [r0], #4
 8007964:	e7f4      	b.n	8007950 <__copybits+0x30>

08007966 <__any_on>:
 8007966:	f100 0214 	add.w	r2, r0, #20
 800796a:	6900      	ldr	r0, [r0, #16]
 800796c:	114b      	asrs	r3, r1, #5
 800796e:	4298      	cmp	r0, r3
 8007970:	b510      	push	{r4, lr}
 8007972:	db11      	blt.n	8007998 <__any_on+0x32>
 8007974:	dd0a      	ble.n	800798c <__any_on+0x26>
 8007976:	f011 011f 	ands.w	r1, r1, #31
 800797a:	d007      	beq.n	800798c <__any_on+0x26>
 800797c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007980:	fa24 f001 	lsr.w	r0, r4, r1
 8007984:	fa00 f101 	lsl.w	r1, r0, r1
 8007988:	428c      	cmp	r4, r1
 800798a:	d10b      	bne.n	80079a4 <__any_on+0x3e>
 800798c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007990:	4293      	cmp	r3, r2
 8007992:	d803      	bhi.n	800799c <__any_on+0x36>
 8007994:	2000      	movs	r0, #0
 8007996:	bd10      	pop	{r4, pc}
 8007998:	4603      	mov	r3, r0
 800799a:	e7f7      	b.n	800798c <__any_on+0x26>
 800799c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079a0:	2900      	cmp	r1, #0
 80079a2:	d0f5      	beq.n	8007990 <__any_on+0x2a>
 80079a4:	2001      	movs	r0, #1
 80079a6:	e7f6      	b.n	8007996 <__any_on+0x30>

080079a8 <sulp>:
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	460f      	mov	r7, r1
 80079ae:	4690      	mov	r8, r2
 80079b0:	f7ff feca 	bl	8007748 <__ulp>
 80079b4:	4604      	mov	r4, r0
 80079b6:	460d      	mov	r5, r1
 80079b8:	f1b8 0f00 	cmp.w	r8, #0
 80079bc:	d011      	beq.n	80079e2 <sulp+0x3a>
 80079be:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80079c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	dd0b      	ble.n	80079e2 <sulp+0x3a>
 80079ca:	2400      	movs	r4, #0
 80079cc:	051b      	lsls	r3, r3, #20
 80079ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80079d6:	4622      	mov	r2, r4
 80079d8:	462b      	mov	r3, r5
 80079da:	f7f8 fd87 	bl	80004ec <__aeabi_dmul>
 80079de:	4604      	mov	r4, r0
 80079e0:	460d      	mov	r5, r1
 80079e2:	4620      	mov	r0, r4
 80079e4:	4629      	mov	r1, r5
 80079e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079ea:	0000      	movs	r0, r0
 80079ec:	0000      	movs	r0, r0
	...

080079f0 <_strtod_l>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	b09f      	sub	sp, #124	; 0x7c
 80079f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80079f8:	2200      	movs	r2, #0
 80079fa:	4604      	mov	r4, r0
 80079fc:	921a      	str	r2, [sp, #104]	; 0x68
 80079fe:	460d      	mov	r5, r1
 8007a00:	f04f 0800 	mov.w	r8, #0
 8007a04:	f04f 0900 	mov.w	r9, #0
 8007a08:	460a      	mov	r2, r1
 8007a0a:	9219      	str	r2, [sp, #100]	; 0x64
 8007a0c:	7811      	ldrb	r1, [r2, #0]
 8007a0e:	292b      	cmp	r1, #43	; 0x2b
 8007a10:	d04a      	beq.n	8007aa8 <_strtod_l+0xb8>
 8007a12:	d838      	bhi.n	8007a86 <_strtod_l+0x96>
 8007a14:	290d      	cmp	r1, #13
 8007a16:	d832      	bhi.n	8007a7e <_strtod_l+0x8e>
 8007a18:	2908      	cmp	r1, #8
 8007a1a:	d832      	bhi.n	8007a82 <_strtod_l+0x92>
 8007a1c:	2900      	cmp	r1, #0
 8007a1e:	d03b      	beq.n	8007a98 <_strtod_l+0xa8>
 8007a20:	2200      	movs	r2, #0
 8007a22:	920e      	str	r2, [sp, #56]	; 0x38
 8007a24:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007a26:	7832      	ldrb	r2, [r6, #0]
 8007a28:	2a30      	cmp	r2, #48	; 0x30
 8007a2a:	f040 80b2 	bne.w	8007b92 <_strtod_l+0x1a2>
 8007a2e:	7872      	ldrb	r2, [r6, #1]
 8007a30:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007a34:	2a58      	cmp	r2, #88	; 0x58
 8007a36:	d16e      	bne.n	8007b16 <_strtod_l+0x126>
 8007a38:	9302      	str	r3, [sp, #8]
 8007a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	ab1a      	add	r3, sp, #104	; 0x68
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	4a8c      	ldr	r2, [pc, #560]	; (8007c78 <_strtod_l+0x288>)
 8007a46:	ab1b      	add	r3, sp, #108	; 0x6c
 8007a48:	a919      	add	r1, sp, #100	; 0x64
 8007a4a:	f001 fcc7 	bl	80093dc <__gethex>
 8007a4e:	f010 070f 	ands.w	r7, r0, #15
 8007a52:	4605      	mov	r5, r0
 8007a54:	d005      	beq.n	8007a62 <_strtod_l+0x72>
 8007a56:	2f06      	cmp	r7, #6
 8007a58:	d128      	bne.n	8007aac <_strtod_l+0xbc>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	3601      	adds	r6, #1
 8007a5e:	9619      	str	r6, [sp, #100]	; 0x64
 8007a60:	930e      	str	r3, [sp, #56]	; 0x38
 8007a62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f040 85a0 	bne.w	80085aa <_strtod_l+0xbba>
 8007a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a6c:	b1cb      	cbz	r3, 8007aa2 <_strtod_l+0xb2>
 8007a6e:	4642      	mov	r2, r8
 8007a70:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a74:	4610      	mov	r0, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	b01f      	add	sp, #124	; 0x7c
 8007a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7e:	2920      	cmp	r1, #32
 8007a80:	d1ce      	bne.n	8007a20 <_strtod_l+0x30>
 8007a82:	3201      	adds	r2, #1
 8007a84:	e7c1      	b.n	8007a0a <_strtod_l+0x1a>
 8007a86:	292d      	cmp	r1, #45	; 0x2d
 8007a88:	d1ca      	bne.n	8007a20 <_strtod_l+0x30>
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	910e      	str	r1, [sp, #56]	; 0x38
 8007a8e:	1c51      	adds	r1, r2, #1
 8007a90:	9119      	str	r1, [sp, #100]	; 0x64
 8007a92:	7852      	ldrb	r2, [r2, #1]
 8007a94:	2a00      	cmp	r2, #0
 8007a96:	d1c5      	bne.n	8007a24 <_strtod_l+0x34>
 8007a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a9a:	9519      	str	r5, [sp, #100]	; 0x64
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f040 8582 	bne.w	80085a6 <_strtod_l+0xbb6>
 8007aa2:	4642      	mov	r2, r8
 8007aa4:	464b      	mov	r3, r9
 8007aa6:	e7e5      	b.n	8007a74 <_strtod_l+0x84>
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	e7ef      	b.n	8007a8c <_strtod_l+0x9c>
 8007aac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007aae:	b13a      	cbz	r2, 8007ac0 <_strtod_l+0xd0>
 8007ab0:	2135      	movs	r1, #53	; 0x35
 8007ab2:	a81c      	add	r0, sp, #112	; 0x70
 8007ab4:	f7ff ff34 	bl	8007920 <__copybits>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007abc:	f7ff fb18 	bl	80070f0 <_Bfree>
 8007ac0:	3f01      	subs	r7, #1
 8007ac2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007ac4:	2f04      	cmp	r7, #4
 8007ac6:	d806      	bhi.n	8007ad6 <_strtod_l+0xe6>
 8007ac8:	e8df f007 	tbb	[pc, r7]
 8007acc:	201d0314 	.word	0x201d0314
 8007ad0:	14          	.byte	0x14
 8007ad1:	00          	.byte	0x00
 8007ad2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007ad6:	05e9      	lsls	r1, r5, #23
 8007ad8:	bf48      	it	mi
 8007ada:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007ade:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ae2:	0d1b      	lsrs	r3, r3, #20
 8007ae4:	051b      	lsls	r3, r3, #20
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1bb      	bne.n	8007a62 <_strtod_l+0x72>
 8007aea:	f7fe fb0d 	bl	8006108 <__errno>
 8007aee:	2322      	movs	r3, #34	; 0x22
 8007af0:	6003      	str	r3, [r0, #0]
 8007af2:	e7b6      	b.n	8007a62 <_strtod_l+0x72>
 8007af4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007af8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007afc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007b04:	e7e7      	b.n	8007ad6 <_strtod_l+0xe6>
 8007b06:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007c7c <_strtod_l+0x28c>
 8007b0a:	e7e4      	b.n	8007ad6 <_strtod_l+0xe6>
 8007b0c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007b10:	f04f 38ff 	mov.w	r8, #4294967295
 8007b14:	e7df      	b.n	8007ad6 <_strtod_l+0xe6>
 8007b16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	9219      	str	r2, [sp, #100]	; 0x64
 8007b1c:	785b      	ldrb	r3, [r3, #1]
 8007b1e:	2b30      	cmp	r3, #48	; 0x30
 8007b20:	d0f9      	beq.n	8007b16 <_strtod_l+0x126>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d09d      	beq.n	8007a62 <_strtod_l+0x72>
 8007b26:	2301      	movs	r3, #1
 8007b28:	f04f 0a00 	mov.w	sl, #0
 8007b2c:	220a      	movs	r2, #10
 8007b2e:	46d3      	mov	fp, sl
 8007b30:	9305      	str	r3, [sp, #20]
 8007b32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b34:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007b38:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b3a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007b3c:	7806      	ldrb	r6, [r0, #0]
 8007b3e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b42:	b2d9      	uxtb	r1, r3
 8007b44:	2909      	cmp	r1, #9
 8007b46:	d926      	bls.n	8007b96 <_strtod_l+0x1a6>
 8007b48:	2201      	movs	r2, #1
 8007b4a:	494d      	ldr	r1, [pc, #308]	; (8007c80 <_strtod_l+0x290>)
 8007b4c:	f001 fb75 	bl	800923a <strncmp>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d030      	beq.n	8007bb6 <_strtod_l+0x1c6>
 8007b54:	2000      	movs	r0, #0
 8007b56:	4632      	mov	r2, r6
 8007b58:	4603      	mov	r3, r0
 8007b5a:	465e      	mov	r6, fp
 8007b5c:	9008      	str	r0, [sp, #32]
 8007b5e:	2a65      	cmp	r2, #101	; 0x65
 8007b60:	d001      	beq.n	8007b66 <_strtod_l+0x176>
 8007b62:	2a45      	cmp	r2, #69	; 0x45
 8007b64:	d113      	bne.n	8007b8e <_strtod_l+0x19e>
 8007b66:	b91e      	cbnz	r6, 8007b70 <_strtod_l+0x180>
 8007b68:	9a05      	ldr	r2, [sp, #20]
 8007b6a:	4302      	orrs	r2, r0
 8007b6c:	d094      	beq.n	8007a98 <_strtod_l+0xa8>
 8007b6e:	2600      	movs	r6, #0
 8007b70:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007b72:	1c6a      	adds	r2, r5, #1
 8007b74:	9219      	str	r2, [sp, #100]	; 0x64
 8007b76:	786a      	ldrb	r2, [r5, #1]
 8007b78:	2a2b      	cmp	r2, #43	; 0x2b
 8007b7a:	d074      	beq.n	8007c66 <_strtod_l+0x276>
 8007b7c:	2a2d      	cmp	r2, #45	; 0x2d
 8007b7e:	d078      	beq.n	8007c72 <_strtod_l+0x282>
 8007b80:	f04f 0c00 	mov.w	ip, #0
 8007b84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007b88:	2909      	cmp	r1, #9
 8007b8a:	d97f      	bls.n	8007c8c <_strtod_l+0x29c>
 8007b8c:	9519      	str	r5, [sp, #100]	; 0x64
 8007b8e:	2700      	movs	r7, #0
 8007b90:	e09e      	b.n	8007cd0 <_strtod_l+0x2e0>
 8007b92:	2300      	movs	r3, #0
 8007b94:	e7c8      	b.n	8007b28 <_strtod_l+0x138>
 8007b96:	f1bb 0f08 	cmp.w	fp, #8
 8007b9a:	bfd8      	it	le
 8007b9c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007b9e:	f100 0001 	add.w	r0, r0, #1
 8007ba2:	bfd6      	itet	le
 8007ba4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ba8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007bac:	930a      	strle	r3, [sp, #40]	; 0x28
 8007bae:	f10b 0b01 	add.w	fp, fp, #1
 8007bb2:	9019      	str	r0, [sp, #100]	; 0x64
 8007bb4:	e7c1      	b.n	8007b3a <_strtod_l+0x14a>
 8007bb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	9219      	str	r2, [sp, #100]	; 0x64
 8007bbc:	785a      	ldrb	r2, [r3, #1]
 8007bbe:	f1bb 0f00 	cmp.w	fp, #0
 8007bc2:	d037      	beq.n	8007c34 <_strtod_l+0x244>
 8007bc4:	465e      	mov	r6, fp
 8007bc6:	9008      	str	r0, [sp, #32]
 8007bc8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007bcc:	2b09      	cmp	r3, #9
 8007bce:	d912      	bls.n	8007bf6 <_strtod_l+0x206>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e7c4      	b.n	8007b5e <_strtod_l+0x16e>
 8007bd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	9219      	str	r2, [sp, #100]	; 0x64
 8007bdc:	785a      	ldrb	r2, [r3, #1]
 8007bde:	2a30      	cmp	r2, #48	; 0x30
 8007be0:	d0f8      	beq.n	8007bd4 <_strtod_l+0x1e4>
 8007be2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	f200 84e4 	bhi.w	80085b4 <_strtod_l+0xbc4>
 8007bec:	9008      	str	r0, [sp, #32]
 8007bee:	2000      	movs	r0, #0
 8007bf0:	4606      	mov	r6, r0
 8007bf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bf6:	3a30      	subs	r2, #48	; 0x30
 8007bf8:	f100 0301 	add.w	r3, r0, #1
 8007bfc:	d014      	beq.n	8007c28 <_strtod_l+0x238>
 8007bfe:	9908      	ldr	r1, [sp, #32]
 8007c00:	eb00 0c06 	add.w	ip, r0, r6
 8007c04:	4419      	add	r1, r3
 8007c06:	9108      	str	r1, [sp, #32]
 8007c08:	4633      	mov	r3, r6
 8007c0a:	210a      	movs	r1, #10
 8007c0c:	4563      	cmp	r3, ip
 8007c0e:	d113      	bne.n	8007c38 <_strtod_l+0x248>
 8007c10:	1833      	adds	r3, r6, r0
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	f106 0601 	add.w	r6, r6, #1
 8007c18:	4406      	add	r6, r0
 8007c1a:	dc1a      	bgt.n	8007c52 <_strtod_l+0x262>
 8007c1c:	230a      	movs	r3, #10
 8007c1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c20:	fb03 2301 	mla	r3, r3, r1, r2
 8007c24:	930a      	str	r3, [sp, #40]	; 0x28
 8007c26:	2300      	movs	r3, #0
 8007c28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	1c51      	adds	r1, r2, #1
 8007c2e:	9119      	str	r1, [sp, #100]	; 0x64
 8007c30:	7852      	ldrb	r2, [r2, #1]
 8007c32:	e7c9      	b.n	8007bc8 <_strtod_l+0x1d8>
 8007c34:	4658      	mov	r0, fp
 8007c36:	e7d2      	b.n	8007bde <_strtod_l+0x1ee>
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	f103 0301 	add.w	r3, r3, #1
 8007c3e:	dc03      	bgt.n	8007c48 <_strtod_l+0x258>
 8007c40:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007c42:	434f      	muls	r7, r1
 8007c44:	970a      	str	r7, [sp, #40]	; 0x28
 8007c46:	e7e1      	b.n	8007c0c <_strtod_l+0x21c>
 8007c48:	2b10      	cmp	r3, #16
 8007c4a:	bfd8      	it	le
 8007c4c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007c50:	e7dc      	b.n	8007c0c <_strtod_l+0x21c>
 8007c52:	2e10      	cmp	r6, #16
 8007c54:	bfdc      	itt	le
 8007c56:	230a      	movle	r3, #10
 8007c58:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007c5c:	e7e3      	b.n	8007c26 <_strtod_l+0x236>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9308      	str	r3, [sp, #32]
 8007c62:	2301      	movs	r3, #1
 8007c64:	e780      	b.n	8007b68 <_strtod_l+0x178>
 8007c66:	f04f 0c00 	mov.w	ip, #0
 8007c6a:	1caa      	adds	r2, r5, #2
 8007c6c:	9219      	str	r2, [sp, #100]	; 0x64
 8007c6e:	78aa      	ldrb	r2, [r5, #2]
 8007c70:	e788      	b.n	8007b84 <_strtod_l+0x194>
 8007c72:	f04f 0c01 	mov.w	ip, #1
 8007c76:	e7f8      	b.n	8007c6a <_strtod_l+0x27a>
 8007c78:	0800a378 	.word	0x0800a378
 8007c7c:	7ff00000 	.word	0x7ff00000
 8007c80:	0800a374 	.word	0x0800a374
 8007c84:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c86:	1c51      	adds	r1, r2, #1
 8007c88:	9119      	str	r1, [sp, #100]	; 0x64
 8007c8a:	7852      	ldrb	r2, [r2, #1]
 8007c8c:	2a30      	cmp	r2, #48	; 0x30
 8007c8e:	d0f9      	beq.n	8007c84 <_strtod_l+0x294>
 8007c90:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007c94:	2908      	cmp	r1, #8
 8007c96:	f63f af7a 	bhi.w	8007b8e <_strtod_l+0x19e>
 8007c9a:	3a30      	subs	r2, #48	; 0x30
 8007c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ca0:	920c      	str	r2, [sp, #48]	; 0x30
 8007ca2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ca4:	1c57      	adds	r7, r2, #1
 8007ca6:	9719      	str	r7, [sp, #100]	; 0x64
 8007ca8:	7852      	ldrb	r2, [r2, #1]
 8007caa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007cae:	f1be 0f09 	cmp.w	lr, #9
 8007cb2:	d938      	bls.n	8007d26 <_strtod_l+0x336>
 8007cb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007cb6:	1a7f      	subs	r7, r7, r1
 8007cb8:	2f08      	cmp	r7, #8
 8007cba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007cbe:	dc03      	bgt.n	8007cc8 <_strtod_l+0x2d8>
 8007cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cc2:	428f      	cmp	r7, r1
 8007cc4:	bfa8      	it	ge
 8007cc6:	460f      	movge	r7, r1
 8007cc8:	f1bc 0f00 	cmp.w	ip, #0
 8007ccc:	d000      	beq.n	8007cd0 <_strtod_l+0x2e0>
 8007cce:	427f      	negs	r7, r7
 8007cd0:	2e00      	cmp	r6, #0
 8007cd2:	d14f      	bne.n	8007d74 <_strtod_l+0x384>
 8007cd4:	9905      	ldr	r1, [sp, #20]
 8007cd6:	4301      	orrs	r1, r0
 8007cd8:	f47f aec3 	bne.w	8007a62 <_strtod_l+0x72>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f47f aedb 	bne.w	8007a98 <_strtod_l+0xa8>
 8007ce2:	2a69      	cmp	r2, #105	; 0x69
 8007ce4:	d029      	beq.n	8007d3a <_strtod_l+0x34a>
 8007ce6:	dc26      	bgt.n	8007d36 <_strtod_l+0x346>
 8007ce8:	2a49      	cmp	r2, #73	; 0x49
 8007cea:	d026      	beq.n	8007d3a <_strtod_l+0x34a>
 8007cec:	2a4e      	cmp	r2, #78	; 0x4e
 8007cee:	f47f aed3 	bne.w	8007a98 <_strtod_l+0xa8>
 8007cf2:	499a      	ldr	r1, [pc, #616]	; (8007f5c <_strtod_l+0x56c>)
 8007cf4:	a819      	add	r0, sp, #100	; 0x64
 8007cf6:	f001 fdb3 	bl	8009860 <__match>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	f43f aecc 	beq.w	8007a98 <_strtod_l+0xa8>
 8007d00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b28      	cmp	r3, #40	; 0x28
 8007d06:	d12f      	bne.n	8007d68 <_strtod_l+0x378>
 8007d08:	4995      	ldr	r1, [pc, #596]	; (8007f60 <_strtod_l+0x570>)
 8007d0a:	aa1c      	add	r2, sp, #112	; 0x70
 8007d0c:	a819      	add	r0, sp, #100	; 0x64
 8007d0e:	f001 fdbb 	bl	8009888 <__hexnan>
 8007d12:	2805      	cmp	r0, #5
 8007d14:	d128      	bne.n	8007d68 <_strtod_l+0x378>
 8007d16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d18:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007d1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007d20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007d24:	e69d      	b.n	8007a62 <_strtod_l+0x72>
 8007d26:	210a      	movs	r1, #10
 8007d28:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d2a:	fb01 2107 	mla	r1, r1, r7, r2
 8007d2e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007d32:	9209      	str	r2, [sp, #36]	; 0x24
 8007d34:	e7b5      	b.n	8007ca2 <_strtod_l+0x2b2>
 8007d36:	2a6e      	cmp	r2, #110	; 0x6e
 8007d38:	e7d9      	b.n	8007cee <_strtod_l+0x2fe>
 8007d3a:	498a      	ldr	r1, [pc, #552]	; (8007f64 <_strtod_l+0x574>)
 8007d3c:	a819      	add	r0, sp, #100	; 0x64
 8007d3e:	f001 fd8f 	bl	8009860 <__match>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f43f aea8 	beq.w	8007a98 <_strtod_l+0xa8>
 8007d48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d4a:	4987      	ldr	r1, [pc, #540]	; (8007f68 <_strtod_l+0x578>)
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	a819      	add	r0, sp, #100	; 0x64
 8007d50:	9319      	str	r3, [sp, #100]	; 0x64
 8007d52:	f001 fd85 	bl	8009860 <__match>
 8007d56:	b910      	cbnz	r0, 8007d5e <_strtod_l+0x36e>
 8007d58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	9319      	str	r3, [sp, #100]	; 0x64
 8007d5e:	f04f 0800 	mov.w	r8, #0
 8007d62:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007f6c <_strtod_l+0x57c>
 8007d66:	e67c      	b.n	8007a62 <_strtod_l+0x72>
 8007d68:	4881      	ldr	r0, [pc, #516]	; (8007f70 <_strtod_l+0x580>)
 8007d6a:	f001 fa97 	bl	800929c <nan>
 8007d6e:	4680      	mov	r8, r0
 8007d70:	4689      	mov	r9, r1
 8007d72:	e676      	b.n	8007a62 <_strtod_l+0x72>
 8007d74:	9b08      	ldr	r3, [sp, #32]
 8007d76:	f1bb 0f00 	cmp.w	fp, #0
 8007d7a:	bf08      	it	eq
 8007d7c:	46b3      	moveq	fp, r6
 8007d7e:	1afb      	subs	r3, r7, r3
 8007d80:	2e10      	cmp	r6, #16
 8007d82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007d84:	4635      	mov	r5, r6
 8007d86:	9309      	str	r3, [sp, #36]	; 0x24
 8007d88:	bfa8      	it	ge
 8007d8a:	2510      	movge	r5, #16
 8007d8c:	f7f8 fb34 	bl	80003f8 <__aeabi_ui2d>
 8007d90:	2e09      	cmp	r6, #9
 8007d92:	4680      	mov	r8, r0
 8007d94:	4689      	mov	r9, r1
 8007d96:	dd13      	ble.n	8007dc0 <_strtod_l+0x3d0>
 8007d98:	4b76      	ldr	r3, [pc, #472]	; (8007f74 <_strtod_l+0x584>)
 8007d9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007d9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007da2:	f7f8 fba3 	bl	80004ec <__aeabi_dmul>
 8007da6:	4680      	mov	r8, r0
 8007da8:	4650      	mov	r0, sl
 8007daa:	4689      	mov	r9, r1
 8007dac:	f7f8 fb24 	bl	80003f8 <__aeabi_ui2d>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4640      	mov	r0, r8
 8007db6:	4649      	mov	r1, r9
 8007db8:	f7f8 f9e2 	bl	8000180 <__adddf3>
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	4689      	mov	r9, r1
 8007dc0:	2e0f      	cmp	r6, #15
 8007dc2:	dc36      	bgt.n	8007e32 <_strtod_l+0x442>
 8007dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f43f ae4b 	beq.w	8007a62 <_strtod_l+0x72>
 8007dcc:	dd22      	ble.n	8007e14 <_strtod_l+0x424>
 8007dce:	2b16      	cmp	r3, #22
 8007dd0:	dc09      	bgt.n	8007de6 <_strtod_l+0x3f6>
 8007dd2:	4968      	ldr	r1, [pc, #416]	; (8007f74 <_strtod_l+0x584>)
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dda:	464b      	mov	r3, r9
 8007ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007de0:	f7f8 fb84 	bl	80004ec <__aeabi_dmul>
 8007de4:	e7c3      	b.n	8007d6e <_strtod_l+0x37e>
 8007de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007de8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007dec:	4293      	cmp	r3, r2
 8007dee:	db20      	blt.n	8007e32 <_strtod_l+0x442>
 8007df0:	4c60      	ldr	r4, [pc, #384]	; (8007f74 <_strtod_l+0x584>)
 8007df2:	f1c6 060f 	rsb	r6, r6, #15
 8007df6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007dfa:	4642      	mov	r2, r8
 8007dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e00:	464b      	mov	r3, r9
 8007e02:	f7f8 fb73 	bl	80004ec <__aeabi_dmul>
 8007e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e08:	1b9e      	subs	r6, r3, r6
 8007e0a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007e0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e12:	e7e5      	b.n	8007de0 <_strtod_l+0x3f0>
 8007e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e16:	3316      	adds	r3, #22
 8007e18:	db0b      	blt.n	8007e32 <_strtod_l+0x442>
 8007e1a:	9b08      	ldr	r3, [sp, #32]
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	1bdf      	subs	r7, r3, r7
 8007e20:	4b54      	ldr	r3, [pc, #336]	; (8007f74 <_strtod_l+0x584>)
 8007e22:	4649      	mov	r1, r9
 8007e24:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2c:	f7f8 fc88 	bl	8000740 <__aeabi_ddiv>
 8007e30:	e79d      	b.n	8007d6e <_strtod_l+0x37e>
 8007e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e34:	1b75      	subs	r5, r6, r5
 8007e36:	441d      	add	r5, r3
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	dd70      	ble.n	8007f1e <_strtod_l+0x52e>
 8007e3c:	f015 030f 	ands.w	r3, r5, #15
 8007e40:	d00a      	beq.n	8007e58 <_strtod_l+0x468>
 8007e42:	494c      	ldr	r1, [pc, #304]	; (8007f74 <_strtod_l+0x584>)
 8007e44:	4642      	mov	r2, r8
 8007e46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e4e:	464b      	mov	r3, r9
 8007e50:	f7f8 fb4c 	bl	80004ec <__aeabi_dmul>
 8007e54:	4680      	mov	r8, r0
 8007e56:	4689      	mov	r9, r1
 8007e58:	f035 050f 	bics.w	r5, r5, #15
 8007e5c:	d04d      	beq.n	8007efa <_strtod_l+0x50a>
 8007e5e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007e62:	dd22      	ble.n	8007eaa <_strtod_l+0x4ba>
 8007e64:	2600      	movs	r6, #0
 8007e66:	46b3      	mov	fp, r6
 8007e68:	960b      	str	r6, [sp, #44]	; 0x2c
 8007e6a:	9608      	str	r6, [sp, #32]
 8007e6c:	2322      	movs	r3, #34	; 0x22
 8007e6e:	f04f 0800 	mov.w	r8, #0
 8007e72:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007f6c <_strtod_l+0x57c>
 8007e76:	6023      	str	r3, [r4, #0]
 8007e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f43f adf1 	beq.w	8007a62 <_strtod_l+0x72>
 8007e80:	4620      	mov	r0, r4
 8007e82:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e84:	f7ff f934 	bl	80070f0 <_Bfree>
 8007e88:	4620      	mov	r0, r4
 8007e8a:	9908      	ldr	r1, [sp, #32]
 8007e8c:	f7ff f930 	bl	80070f0 <_Bfree>
 8007e90:	4659      	mov	r1, fp
 8007e92:	4620      	mov	r0, r4
 8007e94:	f7ff f92c 	bl	80070f0 <_Bfree>
 8007e98:	4620      	mov	r0, r4
 8007e9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e9c:	f7ff f928 	bl	80070f0 <_Bfree>
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7ff f924 	bl	80070f0 <_Bfree>
 8007ea8:	e5db      	b.n	8007a62 <_strtod_l+0x72>
 8007eaa:	4b33      	ldr	r3, [pc, #204]	; (8007f78 <_strtod_l+0x588>)
 8007eac:	4640      	mov	r0, r8
 8007eae:	9305      	str	r3, [sp, #20]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	469a      	mov	sl, r3
 8007eb6:	112d      	asrs	r5, r5, #4
 8007eb8:	2d01      	cmp	r5, #1
 8007eba:	dc21      	bgt.n	8007f00 <_strtod_l+0x510>
 8007ebc:	b10b      	cbz	r3, 8007ec2 <_strtod_l+0x4d2>
 8007ebe:	4680      	mov	r8, r0
 8007ec0:	4689      	mov	r9, r1
 8007ec2:	492d      	ldr	r1, [pc, #180]	; (8007f78 <_strtod_l+0x588>)
 8007ec4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007ec8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007ecc:	4642      	mov	r2, r8
 8007ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ed2:	464b      	mov	r3, r9
 8007ed4:	f7f8 fb0a 	bl	80004ec <__aeabi_dmul>
 8007ed8:	4b24      	ldr	r3, [pc, #144]	; (8007f6c <_strtod_l+0x57c>)
 8007eda:	460a      	mov	r2, r1
 8007edc:	400b      	ands	r3, r1
 8007ede:	4927      	ldr	r1, [pc, #156]	; (8007f7c <_strtod_l+0x58c>)
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	428b      	cmp	r3, r1
 8007ee4:	d8be      	bhi.n	8007e64 <_strtod_l+0x474>
 8007ee6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007eea:	428b      	cmp	r3, r1
 8007eec:	bf86      	itte	hi
 8007eee:	f04f 38ff 	movhi.w	r8, #4294967295
 8007ef2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007f80 <_strtod_l+0x590>
 8007ef6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007efa:	2300      	movs	r3, #0
 8007efc:	9305      	str	r3, [sp, #20]
 8007efe:	e07b      	b.n	8007ff8 <_strtod_l+0x608>
 8007f00:	07ea      	lsls	r2, r5, #31
 8007f02:	d505      	bpl.n	8007f10 <_strtod_l+0x520>
 8007f04:	9b05      	ldr	r3, [sp, #20]
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	f7f8 faef 	bl	80004ec <__aeabi_dmul>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	9a05      	ldr	r2, [sp, #20]
 8007f12:	f10a 0a01 	add.w	sl, sl, #1
 8007f16:	3208      	adds	r2, #8
 8007f18:	106d      	asrs	r5, r5, #1
 8007f1a:	9205      	str	r2, [sp, #20]
 8007f1c:	e7cc      	b.n	8007eb8 <_strtod_l+0x4c8>
 8007f1e:	d0ec      	beq.n	8007efa <_strtod_l+0x50a>
 8007f20:	426d      	negs	r5, r5
 8007f22:	f015 020f 	ands.w	r2, r5, #15
 8007f26:	d00a      	beq.n	8007f3e <_strtod_l+0x54e>
 8007f28:	4b12      	ldr	r3, [pc, #72]	; (8007f74 <_strtod_l+0x584>)
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f30:	4649      	mov	r1, r9
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	f7f8 fc03 	bl	8000740 <__aeabi_ddiv>
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	4689      	mov	r9, r1
 8007f3e:	112d      	asrs	r5, r5, #4
 8007f40:	d0db      	beq.n	8007efa <_strtod_l+0x50a>
 8007f42:	2d1f      	cmp	r5, #31
 8007f44:	dd1e      	ble.n	8007f84 <_strtod_l+0x594>
 8007f46:	2600      	movs	r6, #0
 8007f48:	46b3      	mov	fp, r6
 8007f4a:	960b      	str	r6, [sp, #44]	; 0x2c
 8007f4c:	9608      	str	r6, [sp, #32]
 8007f4e:	2322      	movs	r3, #34	; 0x22
 8007f50:	f04f 0800 	mov.w	r8, #0
 8007f54:	f04f 0900 	mov.w	r9, #0
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	e78d      	b.n	8007e78 <_strtod_l+0x488>
 8007f5c:	0800a167 	.word	0x0800a167
 8007f60:	0800a38c 	.word	0x0800a38c
 8007f64:	0800a15f 	.word	0x0800a15f
 8007f68:	0800a194 	.word	0x0800a194
 8007f6c:	7ff00000 	.word	0x7ff00000
 8007f70:	0800a538 	.word	0x0800a538
 8007f74:	0800a2a0 	.word	0x0800a2a0
 8007f78:	0800a278 	.word	0x0800a278
 8007f7c:	7ca00000 	.word	0x7ca00000
 8007f80:	7fefffff 	.word	0x7fefffff
 8007f84:	f015 0310 	ands.w	r3, r5, #16
 8007f88:	bf18      	it	ne
 8007f8a:	236a      	movne	r3, #106	; 0x6a
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	9305      	str	r3, [sp, #20]
 8007f90:	4649      	mov	r1, r9
 8007f92:	2300      	movs	r3, #0
 8007f94:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008260 <_strtod_l+0x870>
 8007f98:	07ea      	lsls	r2, r5, #31
 8007f9a:	d504      	bpl.n	8007fa6 <_strtod_l+0x5b6>
 8007f9c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007fa0:	f7f8 faa4 	bl	80004ec <__aeabi_dmul>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	106d      	asrs	r5, r5, #1
 8007fa8:	f10a 0a08 	add.w	sl, sl, #8
 8007fac:	d1f4      	bne.n	8007f98 <_strtod_l+0x5a8>
 8007fae:	b10b      	cbz	r3, 8007fb4 <_strtod_l+0x5c4>
 8007fb0:	4680      	mov	r8, r0
 8007fb2:	4689      	mov	r9, r1
 8007fb4:	9b05      	ldr	r3, [sp, #20]
 8007fb6:	b1bb      	cbz	r3, 8007fe8 <_strtod_l+0x5f8>
 8007fb8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007fbc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	dd10      	ble.n	8007fe8 <_strtod_l+0x5f8>
 8007fc6:	2b1f      	cmp	r3, #31
 8007fc8:	f340 8128 	ble.w	800821c <_strtod_l+0x82c>
 8007fcc:	2b34      	cmp	r3, #52	; 0x34
 8007fce:	bfd8      	it	le
 8007fd0:	f04f 33ff 	movle.w	r3, #4294967295
 8007fd4:	f04f 0800 	mov.w	r8, #0
 8007fd8:	bfcf      	iteee	gt
 8007fda:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007fde:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007fe2:	4093      	lslle	r3, r2
 8007fe4:	ea03 0901 	andle.w	r9, r3, r1
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2300      	movs	r3, #0
 8007fec:	4640      	mov	r0, r8
 8007fee:	4649      	mov	r1, r9
 8007ff0:	f7f8 fce4 	bl	80009bc <__aeabi_dcmpeq>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d1a6      	bne.n	8007f46 <_strtod_l+0x556>
 8007ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ffa:	465a      	mov	r2, fp
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	4620      	mov	r0, r4
 8008000:	4633      	mov	r3, r6
 8008002:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008004:	f7ff f8dc 	bl	80071c0 <__s2b>
 8008008:	900b      	str	r0, [sp, #44]	; 0x2c
 800800a:	2800      	cmp	r0, #0
 800800c:	f43f af2a 	beq.w	8007e64 <_strtod_l+0x474>
 8008010:	2600      	movs	r6, #0
 8008012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008014:	9b08      	ldr	r3, [sp, #32]
 8008016:	2a00      	cmp	r2, #0
 8008018:	eba3 0307 	sub.w	r3, r3, r7
 800801c:	bfa8      	it	ge
 800801e:	2300      	movge	r3, #0
 8008020:	46b3      	mov	fp, r6
 8008022:	9312      	str	r3, [sp, #72]	; 0x48
 8008024:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008028:	9316      	str	r3, [sp, #88]	; 0x58
 800802a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800802c:	4620      	mov	r0, r4
 800802e:	6859      	ldr	r1, [r3, #4]
 8008030:	f7ff f81e 	bl	8007070 <_Balloc>
 8008034:	9008      	str	r0, [sp, #32]
 8008036:	2800      	cmp	r0, #0
 8008038:	f43f af18 	beq.w	8007e6c <_strtod_l+0x47c>
 800803c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800803e:	300c      	adds	r0, #12
 8008040:	691a      	ldr	r2, [r3, #16]
 8008042:	f103 010c 	add.w	r1, r3, #12
 8008046:	3202      	adds	r2, #2
 8008048:	0092      	lsls	r2, r2, #2
 800804a:	f001 f919 	bl	8009280 <memcpy>
 800804e:	ab1c      	add	r3, sp, #112	; 0x70
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	ab1b      	add	r3, sp, #108	; 0x6c
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	4642      	mov	r2, r8
 8008058:	464b      	mov	r3, r9
 800805a:	4620      	mov	r0, r4
 800805c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008060:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008064:	f7ff fbd8 	bl	8007818 <__d2b>
 8008068:	901a      	str	r0, [sp, #104]	; 0x68
 800806a:	2800      	cmp	r0, #0
 800806c:	f43f aefe 	beq.w	8007e6c <_strtod_l+0x47c>
 8008070:	2101      	movs	r1, #1
 8008072:	4620      	mov	r0, r4
 8008074:	f7ff f93c 	bl	80072f0 <__i2b>
 8008078:	4683      	mov	fp, r0
 800807a:	2800      	cmp	r0, #0
 800807c:	f43f aef6 	beq.w	8007e6c <_strtod_l+0x47c>
 8008080:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008082:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008084:	2f00      	cmp	r7, #0
 8008086:	bfab      	itete	ge
 8008088:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800808a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800808c:	eb07 0a03 	addge.w	sl, r7, r3
 8008090:	1bdd      	sublt	r5, r3, r7
 8008092:	9b05      	ldr	r3, [sp, #20]
 8008094:	bfa8      	it	ge
 8008096:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008098:	eba7 0703 	sub.w	r7, r7, r3
 800809c:	4417      	add	r7, r2
 800809e:	4b71      	ldr	r3, [pc, #452]	; (8008264 <_strtod_l+0x874>)
 80080a0:	f107 37ff 	add.w	r7, r7, #4294967295
 80080a4:	bfb8      	it	lt
 80080a6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80080aa:	429f      	cmp	r7, r3
 80080ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080b0:	f280 80c7 	bge.w	8008242 <_strtod_l+0x852>
 80080b4:	1bdb      	subs	r3, r3, r7
 80080b6:	2b1f      	cmp	r3, #31
 80080b8:	f04f 0101 	mov.w	r1, #1
 80080bc:	eba2 0203 	sub.w	r2, r2, r3
 80080c0:	f300 80b3 	bgt.w	800822a <_strtod_l+0x83a>
 80080c4:	fa01 f303 	lsl.w	r3, r1, r3
 80080c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80080ca:	2300      	movs	r3, #0
 80080cc:	9310      	str	r3, [sp, #64]	; 0x40
 80080ce:	eb0a 0702 	add.w	r7, sl, r2
 80080d2:	9b05      	ldr	r3, [sp, #20]
 80080d4:	45ba      	cmp	sl, r7
 80080d6:	4415      	add	r5, r2
 80080d8:	441d      	add	r5, r3
 80080da:	4653      	mov	r3, sl
 80080dc:	bfa8      	it	ge
 80080de:	463b      	movge	r3, r7
 80080e0:	42ab      	cmp	r3, r5
 80080e2:	bfa8      	it	ge
 80080e4:	462b      	movge	r3, r5
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	bfc2      	ittt	gt
 80080ea:	1aff      	subgt	r7, r7, r3
 80080ec:	1aed      	subgt	r5, r5, r3
 80080ee:	ebaa 0a03 	subgt.w	sl, sl, r3
 80080f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	dd17      	ble.n	8008128 <_strtod_l+0x738>
 80080f8:	4659      	mov	r1, fp
 80080fa:	461a      	mov	r2, r3
 80080fc:	4620      	mov	r0, r4
 80080fe:	f7ff f9b5 	bl	800746c <__pow5mult>
 8008102:	4683      	mov	fp, r0
 8008104:	2800      	cmp	r0, #0
 8008106:	f43f aeb1 	beq.w	8007e6c <_strtod_l+0x47c>
 800810a:	4601      	mov	r1, r0
 800810c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800810e:	4620      	mov	r0, r4
 8008110:	f7ff f904 	bl	800731c <__multiply>
 8008114:	900a      	str	r0, [sp, #40]	; 0x28
 8008116:	2800      	cmp	r0, #0
 8008118:	f43f aea8 	beq.w	8007e6c <_strtod_l+0x47c>
 800811c:	4620      	mov	r0, r4
 800811e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008120:	f7fe ffe6 	bl	80070f0 <_Bfree>
 8008124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008126:	931a      	str	r3, [sp, #104]	; 0x68
 8008128:	2f00      	cmp	r7, #0
 800812a:	f300 808f 	bgt.w	800824c <_strtod_l+0x85c>
 800812e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008130:	2b00      	cmp	r3, #0
 8008132:	dd08      	ble.n	8008146 <_strtod_l+0x756>
 8008134:	4620      	mov	r0, r4
 8008136:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008138:	9908      	ldr	r1, [sp, #32]
 800813a:	f7ff f997 	bl	800746c <__pow5mult>
 800813e:	9008      	str	r0, [sp, #32]
 8008140:	2800      	cmp	r0, #0
 8008142:	f43f ae93 	beq.w	8007e6c <_strtod_l+0x47c>
 8008146:	2d00      	cmp	r5, #0
 8008148:	dd08      	ble.n	800815c <_strtod_l+0x76c>
 800814a:	462a      	mov	r2, r5
 800814c:	4620      	mov	r0, r4
 800814e:	9908      	ldr	r1, [sp, #32]
 8008150:	f7ff f9e6 	bl	8007520 <__lshift>
 8008154:	9008      	str	r0, [sp, #32]
 8008156:	2800      	cmp	r0, #0
 8008158:	f43f ae88 	beq.w	8007e6c <_strtod_l+0x47c>
 800815c:	f1ba 0f00 	cmp.w	sl, #0
 8008160:	dd08      	ble.n	8008174 <_strtod_l+0x784>
 8008162:	4659      	mov	r1, fp
 8008164:	4652      	mov	r2, sl
 8008166:	4620      	mov	r0, r4
 8008168:	f7ff f9da 	bl	8007520 <__lshift>
 800816c:	4683      	mov	fp, r0
 800816e:	2800      	cmp	r0, #0
 8008170:	f43f ae7c 	beq.w	8007e6c <_strtod_l+0x47c>
 8008174:	4620      	mov	r0, r4
 8008176:	9a08      	ldr	r2, [sp, #32]
 8008178:	991a      	ldr	r1, [sp, #104]	; 0x68
 800817a:	f7ff fa59 	bl	8007630 <__mdiff>
 800817e:	4606      	mov	r6, r0
 8008180:	2800      	cmp	r0, #0
 8008182:	f43f ae73 	beq.w	8007e6c <_strtod_l+0x47c>
 8008186:	2500      	movs	r5, #0
 8008188:	68c3      	ldr	r3, [r0, #12]
 800818a:	4659      	mov	r1, fp
 800818c:	60c5      	str	r5, [r0, #12]
 800818e:	930a      	str	r3, [sp, #40]	; 0x28
 8008190:	f7ff fa32 	bl	80075f8 <__mcmp>
 8008194:	42a8      	cmp	r0, r5
 8008196:	da6b      	bge.n	8008270 <_strtod_l+0x880>
 8008198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819a:	ea53 0308 	orrs.w	r3, r3, r8
 800819e:	f040 808f 	bne.w	80082c0 <_strtod_l+0x8d0>
 80081a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f040 808a 	bne.w	80082c0 <_strtod_l+0x8d0>
 80081ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081b0:	0d1b      	lsrs	r3, r3, #20
 80081b2:	051b      	lsls	r3, r3, #20
 80081b4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081b8:	f240 8082 	bls.w	80082c0 <_strtod_l+0x8d0>
 80081bc:	6973      	ldr	r3, [r6, #20]
 80081be:	b913      	cbnz	r3, 80081c6 <_strtod_l+0x7d6>
 80081c0:	6933      	ldr	r3, [r6, #16]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	dd7c      	ble.n	80082c0 <_strtod_l+0x8d0>
 80081c6:	4631      	mov	r1, r6
 80081c8:	2201      	movs	r2, #1
 80081ca:	4620      	mov	r0, r4
 80081cc:	f7ff f9a8 	bl	8007520 <__lshift>
 80081d0:	4659      	mov	r1, fp
 80081d2:	4606      	mov	r6, r0
 80081d4:	f7ff fa10 	bl	80075f8 <__mcmp>
 80081d8:	2800      	cmp	r0, #0
 80081da:	dd71      	ble.n	80082c0 <_strtod_l+0x8d0>
 80081dc:	9905      	ldr	r1, [sp, #20]
 80081de:	464b      	mov	r3, r9
 80081e0:	4a21      	ldr	r2, [pc, #132]	; (8008268 <_strtod_l+0x878>)
 80081e2:	2900      	cmp	r1, #0
 80081e4:	f000 808d 	beq.w	8008302 <_strtod_l+0x912>
 80081e8:	ea02 0109 	and.w	r1, r2, r9
 80081ec:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80081f0:	f300 8087 	bgt.w	8008302 <_strtod_l+0x912>
 80081f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80081f8:	f77f aea9 	ble.w	8007f4e <_strtod_l+0x55e>
 80081fc:	4640      	mov	r0, r8
 80081fe:	4649      	mov	r1, r9
 8008200:	4b1a      	ldr	r3, [pc, #104]	; (800826c <_strtod_l+0x87c>)
 8008202:	2200      	movs	r2, #0
 8008204:	f7f8 f972 	bl	80004ec <__aeabi_dmul>
 8008208:	4b17      	ldr	r3, [pc, #92]	; (8008268 <_strtod_l+0x878>)
 800820a:	4680      	mov	r8, r0
 800820c:	400b      	ands	r3, r1
 800820e:	4689      	mov	r9, r1
 8008210:	2b00      	cmp	r3, #0
 8008212:	f47f ae35 	bne.w	8007e80 <_strtod_l+0x490>
 8008216:	2322      	movs	r3, #34	; 0x22
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	e631      	b.n	8007e80 <_strtod_l+0x490>
 800821c:	f04f 32ff 	mov.w	r2, #4294967295
 8008220:	fa02 f303 	lsl.w	r3, r2, r3
 8008224:	ea03 0808 	and.w	r8, r3, r8
 8008228:	e6de      	b.n	8007fe8 <_strtod_l+0x5f8>
 800822a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800822e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8008232:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8008236:	37e2      	adds	r7, #226	; 0xe2
 8008238:	fa01 f307 	lsl.w	r3, r1, r7
 800823c:	9310      	str	r3, [sp, #64]	; 0x40
 800823e:	9113      	str	r1, [sp, #76]	; 0x4c
 8008240:	e745      	b.n	80080ce <_strtod_l+0x6de>
 8008242:	2300      	movs	r3, #0
 8008244:	9310      	str	r3, [sp, #64]	; 0x40
 8008246:	2301      	movs	r3, #1
 8008248:	9313      	str	r3, [sp, #76]	; 0x4c
 800824a:	e740      	b.n	80080ce <_strtod_l+0x6de>
 800824c:	463a      	mov	r2, r7
 800824e:	4620      	mov	r0, r4
 8008250:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008252:	f7ff f965 	bl	8007520 <__lshift>
 8008256:	901a      	str	r0, [sp, #104]	; 0x68
 8008258:	2800      	cmp	r0, #0
 800825a:	f47f af68 	bne.w	800812e <_strtod_l+0x73e>
 800825e:	e605      	b.n	8007e6c <_strtod_l+0x47c>
 8008260:	0800a3a0 	.word	0x0800a3a0
 8008264:	fffffc02 	.word	0xfffffc02
 8008268:	7ff00000 	.word	0x7ff00000
 800826c:	39500000 	.word	0x39500000
 8008270:	46ca      	mov	sl, r9
 8008272:	d165      	bne.n	8008340 <_strtod_l+0x950>
 8008274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008276:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800827a:	b352      	cbz	r2, 80082d2 <_strtod_l+0x8e2>
 800827c:	4a9e      	ldr	r2, [pc, #632]	; (80084f8 <_strtod_l+0xb08>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d12a      	bne.n	80082d8 <_strtod_l+0x8e8>
 8008282:	9b05      	ldr	r3, [sp, #20]
 8008284:	4641      	mov	r1, r8
 8008286:	b1fb      	cbz	r3, 80082c8 <_strtod_l+0x8d8>
 8008288:	4b9c      	ldr	r3, [pc, #624]	; (80084fc <_strtod_l+0xb0c>)
 800828a:	f04f 32ff 	mov.w	r2, #4294967295
 800828e:	ea09 0303 	and.w	r3, r9, r3
 8008292:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008296:	d81a      	bhi.n	80082ce <_strtod_l+0x8de>
 8008298:	0d1b      	lsrs	r3, r3, #20
 800829a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800829e:	fa02 f303 	lsl.w	r3, r2, r3
 80082a2:	4299      	cmp	r1, r3
 80082a4:	d118      	bne.n	80082d8 <_strtod_l+0x8e8>
 80082a6:	4b96      	ldr	r3, [pc, #600]	; (8008500 <_strtod_l+0xb10>)
 80082a8:	459a      	cmp	sl, r3
 80082aa:	d102      	bne.n	80082b2 <_strtod_l+0x8c2>
 80082ac:	3101      	adds	r1, #1
 80082ae:	f43f addd 	beq.w	8007e6c <_strtod_l+0x47c>
 80082b2:	f04f 0800 	mov.w	r8, #0
 80082b6:	4b91      	ldr	r3, [pc, #580]	; (80084fc <_strtod_l+0xb0c>)
 80082b8:	ea0a 0303 	and.w	r3, sl, r3
 80082bc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80082c0:	9b05      	ldr	r3, [sp, #20]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d19a      	bne.n	80081fc <_strtod_l+0x80c>
 80082c6:	e5db      	b.n	8007e80 <_strtod_l+0x490>
 80082c8:	f04f 33ff 	mov.w	r3, #4294967295
 80082cc:	e7e9      	b.n	80082a2 <_strtod_l+0x8b2>
 80082ce:	4613      	mov	r3, r2
 80082d0:	e7e7      	b.n	80082a2 <_strtod_l+0x8b2>
 80082d2:	ea53 0308 	orrs.w	r3, r3, r8
 80082d6:	d081      	beq.n	80081dc <_strtod_l+0x7ec>
 80082d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082da:	b1e3      	cbz	r3, 8008316 <_strtod_l+0x926>
 80082dc:	ea13 0f0a 	tst.w	r3, sl
 80082e0:	d0ee      	beq.n	80082c0 <_strtod_l+0x8d0>
 80082e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e4:	4640      	mov	r0, r8
 80082e6:	4649      	mov	r1, r9
 80082e8:	9a05      	ldr	r2, [sp, #20]
 80082ea:	b1c3      	cbz	r3, 800831e <_strtod_l+0x92e>
 80082ec:	f7ff fb5c 	bl	80079a8 <sulp>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80082f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80082f8:	f7f7 ff42 	bl	8000180 <__adddf3>
 80082fc:	4680      	mov	r8, r0
 80082fe:	4689      	mov	r9, r1
 8008300:	e7de      	b.n	80082c0 <_strtod_l+0x8d0>
 8008302:	4013      	ands	r3, r2
 8008304:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008308:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800830c:	f04f 38ff 	mov.w	r8, #4294967295
 8008310:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008314:	e7d4      	b.n	80082c0 <_strtod_l+0x8d0>
 8008316:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008318:	ea13 0f08 	tst.w	r3, r8
 800831c:	e7e0      	b.n	80082e0 <_strtod_l+0x8f0>
 800831e:	f7ff fb43 	bl	80079a8 <sulp>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008328:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800832a:	f7f7 ff27 	bl	800017c <__aeabi_dsub>
 800832e:	2200      	movs	r2, #0
 8008330:	2300      	movs	r3, #0
 8008332:	4680      	mov	r8, r0
 8008334:	4689      	mov	r9, r1
 8008336:	f7f8 fb41 	bl	80009bc <__aeabi_dcmpeq>
 800833a:	2800      	cmp	r0, #0
 800833c:	d0c0      	beq.n	80082c0 <_strtod_l+0x8d0>
 800833e:	e606      	b.n	8007f4e <_strtod_l+0x55e>
 8008340:	4659      	mov	r1, fp
 8008342:	4630      	mov	r0, r6
 8008344:	f7ff fabe 	bl	80078c4 <__ratio>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008350:	2200      	movs	r2, #0
 8008352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008356:	f7f8 fb45 	bl	80009e4 <__aeabi_dcmple>
 800835a:	2800      	cmp	r0, #0
 800835c:	d06f      	beq.n	800843e <_strtod_l+0xa4e>
 800835e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008360:	2b00      	cmp	r3, #0
 8008362:	d17c      	bne.n	800845e <_strtod_l+0xa6e>
 8008364:	f1b8 0f00 	cmp.w	r8, #0
 8008368:	d159      	bne.n	800841e <_strtod_l+0xa2e>
 800836a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800836e:	2b00      	cmp	r3, #0
 8008370:	d17b      	bne.n	800846a <_strtod_l+0xa7a>
 8008372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008376:	2200      	movs	r2, #0
 8008378:	4b62      	ldr	r3, [pc, #392]	; (8008504 <_strtod_l+0xb14>)
 800837a:	f7f8 fb29 	bl	80009d0 <__aeabi_dcmplt>
 800837e:	2800      	cmp	r0, #0
 8008380:	d15a      	bne.n	8008438 <_strtod_l+0xa48>
 8008382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008386:	2200      	movs	r2, #0
 8008388:	4b5f      	ldr	r3, [pc, #380]	; (8008508 <_strtod_l+0xb18>)
 800838a:	f7f8 f8af 	bl	80004ec <__aeabi_dmul>
 800838e:	4605      	mov	r5, r0
 8008390:	460f      	mov	r7, r1
 8008392:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008396:	9506      	str	r5, [sp, #24]
 8008398:	9307      	str	r3, [sp, #28]
 800839a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800839e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80083a2:	4b56      	ldr	r3, [pc, #344]	; (80084fc <_strtod_l+0xb0c>)
 80083a4:	4a55      	ldr	r2, [pc, #340]	; (80084fc <_strtod_l+0xb0c>)
 80083a6:	ea0a 0303 	and.w	r3, sl, r3
 80083aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80083ac:	4b57      	ldr	r3, [pc, #348]	; (800850c <_strtod_l+0xb1c>)
 80083ae:	ea0a 0202 	and.w	r2, sl, r2
 80083b2:	429a      	cmp	r2, r3
 80083b4:	f040 80b0 	bne.w	8008518 <_strtod_l+0xb28>
 80083b8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80083bc:	4640      	mov	r0, r8
 80083be:	4649      	mov	r1, r9
 80083c0:	f7ff f9c2 	bl	8007748 <__ulp>
 80083c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083c8:	f7f8 f890 	bl	80004ec <__aeabi_dmul>
 80083cc:	4642      	mov	r2, r8
 80083ce:	464b      	mov	r3, r9
 80083d0:	f7f7 fed6 	bl	8000180 <__adddf3>
 80083d4:	f8df a124 	ldr.w	sl, [pc, #292]	; 80084fc <_strtod_l+0xb0c>
 80083d8:	4a4d      	ldr	r2, [pc, #308]	; (8008510 <_strtod_l+0xb20>)
 80083da:	ea01 0a0a 	and.w	sl, r1, sl
 80083de:	4592      	cmp	sl, r2
 80083e0:	4680      	mov	r8, r0
 80083e2:	d948      	bls.n	8008476 <_strtod_l+0xa86>
 80083e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083e6:	4b46      	ldr	r3, [pc, #280]	; (8008500 <_strtod_l+0xb10>)
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d103      	bne.n	80083f4 <_strtod_l+0xa04>
 80083ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ee:	3301      	adds	r3, #1
 80083f0:	f43f ad3c 	beq.w	8007e6c <_strtod_l+0x47c>
 80083f4:	f04f 38ff 	mov.w	r8, #4294967295
 80083f8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008500 <_strtod_l+0xb10>
 80083fc:	4620      	mov	r0, r4
 80083fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008400:	f7fe fe76 	bl	80070f0 <_Bfree>
 8008404:	4620      	mov	r0, r4
 8008406:	9908      	ldr	r1, [sp, #32]
 8008408:	f7fe fe72 	bl	80070f0 <_Bfree>
 800840c:	4659      	mov	r1, fp
 800840e:	4620      	mov	r0, r4
 8008410:	f7fe fe6e 	bl	80070f0 <_Bfree>
 8008414:	4631      	mov	r1, r6
 8008416:	4620      	mov	r0, r4
 8008418:	f7fe fe6a 	bl	80070f0 <_Bfree>
 800841c:	e605      	b.n	800802a <_strtod_l+0x63a>
 800841e:	f1b8 0f01 	cmp.w	r8, #1
 8008422:	d103      	bne.n	800842c <_strtod_l+0xa3c>
 8008424:	f1b9 0f00 	cmp.w	r9, #0
 8008428:	f43f ad91 	beq.w	8007f4e <_strtod_l+0x55e>
 800842c:	2200      	movs	r2, #0
 800842e:	4b39      	ldr	r3, [pc, #228]	; (8008514 <_strtod_l+0xb24>)
 8008430:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008432:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008436:	e016      	b.n	8008466 <_strtod_l+0xa76>
 8008438:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800843a:	4f33      	ldr	r7, [pc, #204]	; (8008508 <_strtod_l+0xb18>)
 800843c:	e7a9      	b.n	8008392 <_strtod_l+0x9a2>
 800843e:	4b32      	ldr	r3, [pc, #200]	; (8008508 <_strtod_l+0xb18>)
 8008440:	2200      	movs	r2, #0
 8008442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008446:	f7f8 f851 	bl	80004ec <__aeabi_dmul>
 800844a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844c:	4605      	mov	r5, r0
 800844e:	460f      	mov	r7, r1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d09e      	beq.n	8008392 <_strtod_l+0x9a2>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800845c:	e79d      	b.n	800839a <_strtod_l+0x9aa>
 800845e:	2200      	movs	r2, #0
 8008460:	4b28      	ldr	r3, [pc, #160]	; (8008504 <_strtod_l+0xb14>)
 8008462:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008466:	4f27      	ldr	r7, [pc, #156]	; (8008504 <_strtod_l+0xb14>)
 8008468:	e797      	b.n	800839a <_strtod_l+0x9aa>
 800846a:	2200      	movs	r2, #0
 800846c:	4b29      	ldr	r3, [pc, #164]	; (8008514 <_strtod_l+0xb24>)
 800846e:	4645      	mov	r5, r8
 8008470:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008474:	e7f7      	b.n	8008466 <_strtod_l+0xa76>
 8008476:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800847a:	9b05      	ldr	r3, [sp, #20]
 800847c:	46ca      	mov	sl, r9
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1bc      	bne.n	80083fc <_strtod_l+0xa0c>
 8008482:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008486:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008488:	0d1b      	lsrs	r3, r3, #20
 800848a:	051b      	lsls	r3, r3, #20
 800848c:	429a      	cmp	r2, r3
 800848e:	d1b5      	bne.n	80083fc <_strtod_l+0xa0c>
 8008490:	4628      	mov	r0, r5
 8008492:	4639      	mov	r1, r7
 8008494:	f7f8 fe6c 	bl	8001170 <__aeabi_d2lz>
 8008498:	f7f7 fffa 	bl	8000490 <__aeabi_l2d>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4628      	mov	r0, r5
 80084a2:	4639      	mov	r1, r7
 80084a4:	f7f7 fe6a 	bl	800017c <__aeabi_dsub>
 80084a8:	460b      	mov	r3, r1
 80084aa:	4602      	mov	r2, r0
 80084ac:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80084b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80084b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b6:	ea4a 0a08 	orr.w	sl, sl, r8
 80084ba:	ea5a 0a03 	orrs.w	sl, sl, r3
 80084be:	d06c      	beq.n	800859a <_strtod_l+0xbaa>
 80084c0:	a309      	add	r3, pc, #36	; (adr r3, 80084e8 <_strtod_l+0xaf8>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f7f8 fa83 	bl	80009d0 <__aeabi_dcmplt>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	f47f acd8 	bne.w	8007e80 <_strtod_l+0x490>
 80084d0:	a307      	add	r3, pc, #28	; (adr r3, 80084f0 <_strtod_l+0xb00>)
 80084d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084da:	f7f8 fa97 	bl	8000a0c <__aeabi_dcmpgt>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d08c      	beq.n	80083fc <_strtod_l+0xa0c>
 80084e2:	e4cd      	b.n	8007e80 <_strtod_l+0x490>
 80084e4:	f3af 8000 	nop.w
 80084e8:	94a03595 	.word	0x94a03595
 80084ec:	3fdfffff 	.word	0x3fdfffff
 80084f0:	35afe535 	.word	0x35afe535
 80084f4:	3fe00000 	.word	0x3fe00000
 80084f8:	000fffff 	.word	0x000fffff
 80084fc:	7ff00000 	.word	0x7ff00000
 8008500:	7fefffff 	.word	0x7fefffff
 8008504:	3ff00000 	.word	0x3ff00000
 8008508:	3fe00000 	.word	0x3fe00000
 800850c:	7fe00000 	.word	0x7fe00000
 8008510:	7c9fffff 	.word	0x7c9fffff
 8008514:	bff00000 	.word	0xbff00000
 8008518:	9b05      	ldr	r3, [sp, #20]
 800851a:	b333      	cbz	r3, 800856a <_strtod_l+0xb7a>
 800851c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800851e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008522:	d822      	bhi.n	800856a <_strtod_l+0xb7a>
 8008524:	a328      	add	r3, pc, #160	; (adr r3, 80085c8 <_strtod_l+0xbd8>)
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	4628      	mov	r0, r5
 800852c:	4639      	mov	r1, r7
 800852e:	f7f8 fa59 	bl	80009e4 <__aeabi_dcmple>
 8008532:	b1a0      	cbz	r0, 800855e <_strtod_l+0xb6e>
 8008534:	4639      	mov	r1, r7
 8008536:	4628      	mov	r0, r5
 8008538:	f7f8 fab0 	bl	8000a9c <__aeabi_d2uiz>
 800853c:	2801      	cmp	r0, #1
 800853e:	bf38      	it	cc
 8008540:	2001      	movcc	r0, #1
 8008542:	f7f7 ff59 	bl	80003f8 <__aeabi_ui2d>
 8008546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008548:	4605      	mov	r5, r0
 800854a:	460f      	mov	r7, r1
 800854c:	bb03      	cbnz	r3, 8008590 <_strtod_l+0xba0>
 800854e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008552:	9014      	str	r0, [sp, #80]	; 0x50
 8008554:	9315      	str	r3, [sp, #84]	; 0x54
 8008556:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800855a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800855e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008560:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008562:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008566:	1a9b      	subs	r3, r3, r2
 8008568:	9311      	str	r3, [sp, #68]	; 0x44
 800856a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800856c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800856e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008572:	f7ff f8e9 	bl	8007748 <__ulp>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4640      	mov	r0, r8
 800857c:	4649      	mov	r1, r9
 800857e:	f7f7 ffb5 	bl	80004ec <__aeabi_dmul>
 8008582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008586:	f7f7 fdfb 	bl	8000180 <__adddf3>
 800858a:	4680      	mov	r8, r0
 800858c:	4689      	mov	r9, r1
 800858e:	e774      	b.n	800847a <_strtod_l+0xa8a>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008598:	e7dd      	b.n	8008556 <_strtod_l+0xb66>
 800859a:	a30d      	add	r3, pc, #52	; (adr r3, 80085d0 <_strtod_l+0xbe0>)
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	f7f8 fa16 	bl	80009d0 <__aeabi_dcmplt>
 80085a4:	e79b      	b.n	80084de <_strtod_l+0xaee>
 80085a6:	2300      	movs	r3, #0
 80085a8:	930e      	str	r3, [sp, #56]	; 0x38
 80085aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	f7ff ba5b 	b.w	8007a6a <_strtod_l+0x7a>
 80085b4:	2a65      	cmp	r2, #101	; 0x65
 80085b6:	f43f ab52 	beq.w	8007c5e <_strtod_l+0x26e>
 80085ba:	2a45      	cmp	r2, #69	; 0x45
 80085bc:	f43f ab4f 	beq.w	8007c5e <_strtod_l+0x26e>
 80085c0:	2301      	movs	r3, #1
 80085c2:	f7ff bb87 	b.w	8007cd4 <_strtod_l+0x2e4>
 80085c6:	bf00      	nop
 80085c8:	ffc00000 	.word	0xffc00000
 80085cc:	41dfffff 	.word	0x41dfffff
 80085d0:	94a03595 	.word	0x94a03595
 80085d4:	3fcfffff 	.word	0x3fcfffff

080085d8 <_strtod_r>:
 80085d8:	4b01      	ldr	r3, [pc, #4]	; (80085e0 <_strtod_r+0x8>)
 80085da:	f7ff ba09 	b.w	80079f0 <_strtod_l>
 80085de:	bf00      	nop
 80085e0:	20000068 	.word	0x20000068

080085e4 <_strtol_l.constprop.0>:
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ea:	4686      	mov	lr, r0
 80085ec:	4690      	mov	r8, r2
 80085ee:	d001      	beq.n	80085f4 <_strtol_l.constprop.0+0x10>
 80085f0:	2b24      	cmp	r3, #36	; 0x24
 80085f2:	d906      	bls.n	8008602 <_strtol_l.constprop.0+0x1e>
 80085f4:	f7fd fd88 	bl	8006108 <__errno>
 80085f8:	2316      	movs	r3, #22
 80085fa:	6003      	str	r3, [r0, #0]
 80085fc:	2000      	movs	r0, #0
 80085fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008602:	460d      	mov	r5, r1
 8008604:	4835      	ldr	r0, [pc, #212]	; (80086dc <_strtol_l.constprop.0+0xf8>)
 8008606:	462a      	mov	r2, r5
 8008608:	f815 4b01 	ldrb.w	r4, [r5], #1
 800860c:	5d06      	ldrb	r6, [r0, r4]
 800860e:	f016 0608 	ands.w	r6, r6, #8
 8008612:	d1f8      	bne.n	8008606 <_strtol_l.constprop.0+0x22>
 8008614:	2c2d      	cmp	r4, #45	; 0x2d
 8008616:	d12e      	bne.n	8008676 <_strtol_l.constprop.0+0x92>
 8008618:	2601      	movs	r6, #1
 800861a:	782c      	ldrb	r4, [r5, #0]
 800861c:	1c95      	adds	r5, r2, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d057      	beq.n	80086d2 <_strtol_l.constprop.0+0xee>
 8008622:	2b10      	cmp	r3, #16
 8008624:	d109      	bne.n	800863a <_strtol_l.constprop.0+0x56>
 8008626:	2c30      	cmp	r4, #48	; 0x30
 8008628:	d107      	bne.n	800863a <_strtol_l.constprop.0+0x56>
 800862a:	782a      	ldrb	r2, [r5, #0]
 800862c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008630:	2a58      	cmp	r2, #88	; 0x58
 8008632:	d149      	bne.n	80086c8 <_strtol_l.constprop.0+0xe4>
 8008634:	2310      	movs	r3, #16
 8008636:	786c      	ldrb	r4, [r5, #1]
 8008638:	3502      	adds	r5, #2
 800863a:	2200      	movs	r2, #0
 800863c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008640:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008644:	fbbc f9f3 	udiv	r9, ip, r3
 8008648:	4610      	mov	r0, r2
 800864a:	fb03 ca19 	mls	sl, r3, r9, ip
 800864e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008652:	2f09      	cmp	r7, #9
 8008654:	d814      	bhi.n	8008680 <_strtol_l.constprop.0+0x9c>
 8008656:	463c      	mov	r4, r7
 8008658:	42a3      	cmp	r3, r4
 800865a:	dd20      	ble.n	800869e <_strtol_l.constprop.0+0xba>
 800865c:	1c57      	adds	r7, r2, #1
 800865e:	d007      	beq.n	8008670 <_strtol_l.constprop.0+0x8c>
 8008660:	4581      	cmp	r9, r0
 8008662:	d319      	bcc.n	8008698 <_strtol_l.constprop.0+0xb4>
 8008664:	d101      	bne.n	800866a <_strtol_l.constprop.0+0x86>
 8008666:	45a2      	cmp	sl, r4
 8008668:	db16      	blt.n	8008698 <_strtol_l.constprop.0+0xb4>
 800866a:	2201      	movs	r2, #1
 800866c:	fb00 4003 	mla	r0, r0, r3, r4
 8008670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008674:	e7eb      	b.n	800864e <_strtol_l.constprop.0+0x6a>
 8008676:	2c2b      	cmp	r4, #43	; 0x2b
 8008678:	bf04      	itt	eq
 800867a:	782c      	ldrbeq	r4, [r5, #0]
 800867c:	1c95      	addeq	r5, r2, #2
 800867e:	e7ce      	b.n	800861e <_strtol_l.constprop.0+0x3a>
 8008680:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008684:	2f19      	cmp	r7, #25
 8008686:	d801      	bhi.n	800868c <_strtol_l.constprop.0+0xa8>
 8008688:	3c37      	subs	r4, #55	; 0x37
 800868a:	e7e5      	b.n	8008658 <_strtol_l.constprop.0+0x74>
 800868c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008690:	2f19      	cmp	r7, #25
 8008692:	d804      	bhi.n	800869e <_strtol_l.constprop.0+0xba>
 8008694:	3c57      	subs	r4, #87	; 0x57
 8008696:	e7df      	b.n	8008658 <_strtol_l.constprop.0+0x74>
 8008698:	f04f 32ff 	mov.w	r2, #4294967295
 800869c:	e7e8      	b.n	8008670 <_strtol_l.constprop.0+0x8c>
 800869e:	1c53      	adds	r3, r2, #1
 80086a0:	d108      	bne.n	80086b4 <_strtol_l.constprop.0+0xd0>
 80086a2:	2322      	movs	r3, #34	; 0x22
 80086a4:	4660      	mov	r0, ip
 80086a6:	f8ce 3000 	str.w	r3, [lr]
 80086aa:	f1b8 0f00 	cmp.w	r8, #0
 80086ae:	d0a6      	beq.n	80085fe <_strtol_l.constprop.0+0x1a>
 80086b0:	1e69      	subs	r1, r5, #1
 80086b2:	e006      	b.n	80086c2 <_strtol_l.constprop.0+0xde>
 80086b4:	b106      	cbz	r6, 80086b8 <_strtol_l.constprop.0+0xd4>
 80086b6:	4240      	negs	r0, r0
 80086b8:	f1b8 0f00 	cmp.w	r8, #0
 80086bc:	d09f      	beq.n	80085fe <_strtol_l.constprop.0+0x1a>
 80086be:	2a00      	cmp	r2, #0
 80086c0:	d1f6      	bne.n	80086b0 <_strtol_l.constprop.0+0xcc>
 80086c2:	f8c8 1000 	str.w	r1, [r8]
 80086c6:	e79a      	b.n	80085fe <_strtol_l.constprop.0+0x1a>
 80086c8:	2430      	movs	r4, #48	; 0x30
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1b5      	bne.n	800863a <_strtol_l.constprop.0+0x56>
 80086ce:	2308      	movs	r3, #8
 80086d0:	e7b3      	b.n	800863a <_strtol_l.constprop.0+0x56>
 80086d2:	2c30      	cmp	r4, #48	; 0x30
 80086d4:	d0a9      	beq.n	800862a <_strtol_l.constprop.0+0x46>
 80086d6:	230a      	movs	r3, #10
 80086d8:	e7af      	b.n	800863a <_strtol_l.constprop.0+0x56>
 80086da:	bf00      	nop
 80086dc:	0800a3c9 	.word	0x0800a3c9

080086e0 <_strtol_r>:
 80086e0:	f7ff bf80 	b.w	80085e4 <_strtol_l.constprop.0>

080086e4 <__ssputs_r>:
 80086e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e8:	461f      	mov	r7, r3
 80086ea:	688e      	ldr	r6, [r1, #8]
 80086ec:	4682      	mov	sl, r0
 80086ee:	42be      	cmp	r6, r7
 80086f0:	460c      	mov	r4, r1
 80086f2:	4690      	mov	r8, r2
 80086f4:	680b      	ldr	r3, [r1, #0]
 80086f6:	d82c      	bhi.n	8008752 <__ssputs_r+0x6e>
 80086f8:	898a      	ldrh	r2, [r1, #12]
 80086fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086fe:	d026      	beq.n	800874e <__ssputs_r+0x6a>
 8008700:	6965      	ldr	r5, [r4, #20]
 8008702:	6909      	ldr	r1, [r1, #16]
 8008704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008708:	eba3 0901 	sub.w	r9, r3, r1
 800870c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008710:	1c7b      	adds	r3, r7, #1
 8008712:	444b      	add	r3, r9
 8008714:	106d      	asrs	r5, r5, #1
 8008716:	429d      	cmp	r5, r3
 8008718:	bf38      	it	cc
 800871a:	461d      	movcc	r5, r3
 800871c:	0553      	lsls	r3, r2, #21
 800871e:	d527      	bpl.n	8008770 <__ssputs_r+0x8c>
 8008720:	4629      	mov	r1, r5
 8008722:	f7fe fc19 	bl	8006f58 <_malloc_r>
 8008726:	4606      	mov	r6, r0
 8008728:	b360      	cbz	r0, 8008784 <__ssputs_r+0xa0>
 800872a:	464a      	mov	r2, r9
 800872c:	6921      	ldr	r1, [r4, #16]
 800872e:	f000 fda7 	bl	8009280 <memcpy>
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	6126      	str	r6, [r4, #16]
 8008740:	444e      	add	r6, r9
 8008742:	6026      	str	r6, [r4, #0]
 8008744:	463e      	mov	r6, r7
 8008746:	6165      	str	r5, [r4, #20]
 8008748:	eba5 0509 	sub.w	r5, r5, r9
 800874c:	60a5      	str	r5, [r4, #8]
 800874e:	42be      	cmp	r6, r7
 8008750:	d900      	bls.n	8008754 <__ssputs_r+0x70>
 8008752:	463e      	mov	r6, r7
 8008754:	4632      	mov	r2, r6
 8008756:	4641      	mov	r1, r8
 8008758:	6820      	ldr	r0, [r4, #0]
 800875a:	f000 fd54 	bl	8009206 <memmove>
 800875e:	2000      	movs	r0, #0
 8008760:	68a3      	ldr	r3, [r4, #8]
 8008762:	1b9b      	subs	r3, r3, r6
 8008764:	60a3      	str	r3, [r4, #8]
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	4433      	add	r3, r6
 800876a:	6023      	str	r3, [r4, #0]
 800876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008770:	462a      	mov	r2, r5
 8008772:	f001 f936 	bl	80099e2 <_realloc_r>
 8008776:	4606      	mov	r6, r0
 8008778:	2800      	cmp	r0, #0
 800877a:	d1e0      	bne.n	800873e <__ssputs_r+0x5a>
 800877c:	4650      	mov	r0, sl
 800877e:	6921      	ldr	r1, [r4, #16]
 8008780:	f7fe fb7a 	bl	8006e78 <_free_r>
 8008784:	230c      	movs	r3, #12
 8008786:	f8ca 3000 	str.w	r3, [sl]
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	f04f 30ff 	mov.w	r0, #4294967295
 8008790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	e7e9      	b.n	800876c <__ssputs_r+0x88>

08008798 <_svfiprintf_r>:
 8008798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	4698      	mov	r8, r3
 800879e:	898b      	ldrh	r3, [r1, #12]
 80087a0:	4607      	mov	r7, r0
 80087a2:	061b      	lsls	r3, r3, #24
 80087a4:	460d      	mov	r5, r1
 80087a6:	4614      	mov	r4, r2
 80087a8:	b09d      	sub	sp, #116	; 0x74
 80087aa:	d50e      	bpl.n	80087ca <_svfiprintf_r+0x32>
 80087ac:	690b      	ldr	r3, [r1, #16]
 80087ae:	b963      	cbnz	r3, 80087ca <_svfiprintf_r+0x32>
 80087b0:	2140      	movs	r1, #64	; 0x40
 80087b2:	f7fe fbd1 	bl	8006f58 <_malloc_r>
 80087b6:	6028      	str	r0, [r5, #0]
 80087b8:	6128      	str	r0, [r5, #16]
 80087ba:	b920      	cbnz	r0, 80087c6 <_svfiprintf_r+0x2e>
 80087bc:	230c      	movs	r3, #12
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295
 80087c4:	e0d0      	b.n	8008968 <_svfiprintf_r+0x1d0>
 80087c6:	2340      	movs	r3, #64	; 0x40
 80087c8:	616b      	str	r3, [r5, #20]
 80087ca:	2300      	movs	r3, #0
 80087cc:	9309      	str	r3, [sp, #36]	; 0x24
 80087ce:	2320      	movs	r3, #32
 80087d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087d4:	2330      	movs	r3, #48	; 0x30
 80087d6:	f04f 0901 	mov.w	r9, #1
 80087da:	f8cd 800c 	str.w	r8, [sp, #12]
 80087de:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008980 <_svfiprintf_r+0x1e8>
 80087e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087e6:	4623      	mov	r3, r4
 80087e8:	469a      	mov	sl, r3
 80087ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ee:	b10a      	cbz	r2, 80087f4 <_svfiprintf_r+0x5c>
 80087f0:	2a25      	cmp	r2, #37	; 0x25
 80087f2:	d1f9      	bne.n	80087e8 <_svfiprintf_r+0x50>
 80087f4:	ebba 0b04 	subs.w	fp, sl, r4
 80087f8:	d00b      	beq.n	8008812 <_svfiprintf_r+0x7a>
 80087fa:	465b      	mov	r3, fp
 80087fc:	4622      	mov	r2, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	4638      	mov	r0, r7
 8008802:	f7ff ff6f 	bl	80086e4 <__ssputs_r>
 8008806:	3001      	adds	r0, #1
 8008808:	f000 80a9 	beq.w	800895e <_svfiprintf_r+0x1c6>
 800880c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800880e:	445a      	add	r2, fp
 8008810:	9209      	str	r2, [sp, #36]	; 0x24
 8008812:	f89a 3000 	ldrb.w	r3, [sl]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 80a1 	beq.w	800895e <_svfiprintf_r+0x1c6>
 800881c:	2300      	movs	r3, #0
 800881e:	f04f 32ff 	mov.w	r2, #4294967295
 8008822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008826:	f10a 0a01 	add.w	sl, sl, #1
 800882a:	9304      	str	r3, [sp, #16]
 800882c:	9307      	str	r3, [sp, #28]
 800882e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008832:	931a      	str	r3, [sp, #104]	; 0x68
 8008834:	4654      	mov	r4, sl
 8008836:	2205      	movs	r2, #5
 8008838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883c:	4850      	ldr	r0, [pc, #320]	; (8008980 <_svfiprintf_r+0x1e8>)
 800883e:	f7fd fc98 	bl	8006172 <memchr>
 8008842:	9a04      	ldr	r2, [sp, #16]
 8008844:	b9d8      	cbnz	r0, 800887e <_svfiprintf_r+0xe6>
 8008846:	06d0      	lsls	r0, r2, #27
 8008848:	bf44      	itt	mi
 800884a:	2320      	movmi	r3, #32
 800884c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008850:	0711      	lsls	r1, r2, #28
 8008852:	bf44      	itt	mi
 8008854:	232b      	movmi	r3, #43	; 0x2b
 8008856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800885a:	f89a 3000 	ldrb.w	r3, [sl]
 800885e:	2b2a      	cmp	r3, #42	; 0x2a
 8008860:	d015      	beq.n	800888e <_svfiprintf_r+0xf6>
 8008862:	4654      	mov	r4, sl
 8008864:	2000      	movs	r0, #0
 8008866:	f04f 0c0a 	mov.w	ip, #10
 800886a:	9a07      	ldr	r2, [sp, #28]
 800886c:	4621      	mov	r1, r4
 800886e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008872:	3b30      	subs	r3, #48	; 0x30
 8008874:	2b09      	cmp	r3, #9
 8008876:	d94d      	bls.n	8008914 <_svfiprintf_r+0x17c>
 8008878:	b1b0      	cbz	r0, 80088a8 <_svfiprintf_r+0x110>
 800887a:	9207      	str	r2, [sp, #28]
 800887c:	e014      	b.n	80088a8 <_svfiprintf_r+0x110>
 800887e:	eba0 0308 	sub.w	r3, r0, r8
 8008882:	fa09 f303 	lsl.w	r3, r9, r3
 8008886:	4313      	orrs	r3, r2
 8008888:	46a2      	mov	sl, r4
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	e7d2      	b.n	8008834 <_svfiprintf_r+0x9c>
 800888e:	9b03      	ldr	r3, [sp, #12]
 8008890:	1d19      	adds	r1, r3, #4
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	9103      	str	r1, [sp, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	bfbb      	ittet	lt
 800889a:	425b      	neglt	r3, r3
 800889c:	f042 0202 	orrlt.w	r2, r2, #2
 80088a0:	9307      	strge	r3, [sp, #28]
 80088a2:	9307      	strlt	r3, [sp, #28]
 80088a4:	bfb8      	it	lt
 80088a6:	9204      	strlt	r2, [sp, #16]
 80088a8:	7823      	ldrb	r3, [r4, #0]
 80088aa:	2b2e      	cmp	r3, #46	; 0x2e
 80088ac:	d10c      	bne.n	80088c8 <_svfiprintf_r+0x130>
 80088ae:	7863      	ldrb	r3, [r4, #1]
 80088b0:	2b2a      	cmp	r3, #42	; 0x2a
 80088b2:	d134      	bne.n	800891e <_svfiprintf_r+0x186>
 80088b4:	9b03      	ldr	r3, [sp, #12]
 80088b6:	3402      	adds	r4, #2
 80088b8:	1d1a      	adds	r2, r3, #4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	9203      	str	r2, [sp, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bfb8      	it	lt
 80088c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80088c6:	9305      	str	r3, [sp, #20]
 80088c8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008984 <_svfiprintf_r+0x1ec>
 80088cc:	2203      	movs	r2, #3
 80088ce:	4650      	mov	r0, sl
 80088d0:	7821      	ldrb	r1, [r4, #0]
 80088d2:	f7fd fc4e 	bl	8006172 <memchr>
 80088d6:	b138      	cbz	r0, 80088e8 <_svfiprintf_r+0x150>
 80088d8:	2240      	movs	r2, #64	; 0x40
 80088da:	9b04      	ldr	r3, [sp, #16]
 80088dc:	eba0 000a 	sub.w	r0, r0, sl
 80088e0:	4082      	lsls	r2, r0
 80088e2:	4313      	orrs	r3, r2
 80088e4:	3401      	adds	r4, #1
 80088e6:	9304      	str	r3, [sp, #16]
 80088e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ec:	2206      	movs	r2, #6
 80088ee:	4826      	ldr	r0, [pc, #152]	; (8008988 <_svfiprintf_r+0x1f0>)
 80088f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088f4:	f7fd fc3d 	bl	8006172 <memchr>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d038      	beq.n	800896e <_svfiprintf_r+0x1d6>
 80088fc:	4b23      	ldr	r3, [pc, #140]	; (800898c <_svfiprintf_r+0x1f4>)
 80088fe:	bb1b      	cbnz	r3, 8008948 <_svfiprintf_r+0x1b0>
 8008900:	9b03      	ldr	r3, [sp, #12]
 8008902:	3307      	adds	r3, #7
 8008904:	f023 0307 	bic.w	r3, r3, #7
 8008908:	3308      	adds	r3, #8
 800890a:	9303      	str	r3, [sp, #12]
 800890c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890e:	4433      	add	r3, r6
 8008910:	9309      	str	r3, [sp, #36]	; 0x24
 8008912:	e768      	b.n	80087e6 <_svfiprintf_r+0x4e>
 8008914:	460c      	mov	r4, r1
 8008916:	2001      	movs	r0, #1
 8008918:	fb0c 3202 	mla	r2, ip, r2, r3
 800891c:	e7a6      	b.n	800886c <_svfiprintf_r+0xd4>
 800891e:	2300      	movs	r3, #0
 8008920:	f04f 0c0a 	mov.w	ip, #10
 8008924:	4619      	mov	r1, r3
 8008926:	3401      	adds	r4, #1
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	4620      	mov	r0, r4
 800892c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008930:	3a30      	subs	r2, #48	; 0x30
 8008932:	2a09      	cmp	r2, #9
 8008934:	d903      	bls.n	800893e <_svfiprintf_r+0x1a6>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0c6      	beq.n	80088c8 <_svfiprintf_r+0x130>
 800893a:	9105      	str	r1, [sp, #20]
 800893c:	e7c4      	b.n	80088c8 <_svfiprintf_r+0x130>
 800893e:	4604      	mov	r4, r0
 8008940:	2301      	movs	r3, #1
 8008942:	fb0c 2101 	mla	r1, ip, r1, r2
 8008946:	e7f0      	b.n	800892a <_svfiprintf_r+0x192>
 8008948:	ab03      	add	r3, sp, #12
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	462a      	mov	r2, r5
 800894e:	4638      	mov	r0, r7
 8008950:	4b0f      	ldr	r3, [pc, #60]	; (8008990 <_svfiprintf_r+0x1f8>)
 8008952:	a904      	add	r1, sp, #16
 8008954:	f7fc fc22 	bl	800519c <_printf_float>
 8008958:	1c42      	adds	r2, r0, #1
 800895a:	4606      	mov	r6, r0
 800895c:	d1d6      	bne.n	800890c <_svfiprintf_r+0x174>
 800895e:	89ab      	ldrh	r3, [r5, #12]
 8008960:	065b      	lsls	r3, r3, #25
 8008962:	f53f af2d 	bmi.w	80087c0 <_svfiprintf_r+0x28>
 8008966:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008968:	b01d      	add	sp, #116	; 0x74
 800896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896e:	ab03      	add	r3, sp, #12
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	462a      	mov	r2, r5
 8008974:	4638      	mov	r0, r7
 8008976:	4b06      	ldr	r3, [pc, #24]	; (8008990 <_svfiprintf_r+0x1f8>)
 8008978:	a904      	add	r1, sp, #16
 800897a:	f7fc feaf 	bl	80056dc <_printf_i>
 800897e:	e7eb      	b.n	8008958 <_svfiprintf_r+0x1c0>
 8008980:	0800a4c9 	.word	0x0800a4c9
 8008984:	0800a4cf 	.word	0x0800a4cf
 8008988:	0800a4d3 	.word	0x0800a4d3
 800898c:	0800519d 	.word	0x0800519d
 8008990:	080086e5 	.word	0x080086e5

08008994 <_sungetc_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	1c4b      	adds	r3, r1, #1
 8008998:	4614      	mov	r4, r2
 800899a:	d103      	bne.n	80089a4 <_sungetc_r+0x10>
 800899c:	f04f 35ff 	mov.w	r5, #4294967295
 80089a0:	4628      	mov	r0, r5
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	8993      	ldrh	r3, [r2, #12]
 80089a6:	b2cd      	uxtb	r5, r1
 80089a8:	f023 0320 	bic.w	r3, r3, #32
 80089ac:	8193      	strh	r3, [r2, #12]
 80089ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089b0:	6852      	ldr	r2, [r2, #4]
 80089b2:	b18b      	cbz	r3, 80089d8 <_sungetc_r+0x44>
 80089b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089b6:	4293      	cmp	r3, r2
 80089b8:	dd08      	ble.n	80089cc <_sungetc_r+0x38>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	1e5a      	subs	r2, r3, #1
 80089be:	6022      	str	r2, [r4, #0]
 80089c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80089c4:	6863      	ldr	r3, [r4, #4]
 80089c6:	3301      	adds	r3, #1
 80089c8:	6063      	str	r3, [r4, #4]
 80089ca:	e7e9      	b.n	80089a0 <_sungetc_r+0xc>
 80089cc:	4621      	mov	r1, r4
 80089ce:	f000 fbe2 	bl	8009196 <__submore>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d0f1      	beq.n	80089ba <_sungetc_r+0x26>
 80089d6:	e7e1      	b.n	800899c <_sungetc_r+0x8>
 80089d8:	6921      	ldr	r1, [r4, #16]
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	b151      	cbz	r1, 80089f4 <_sungetc_r+0x60>
 80089de:	4299      	cmp	r1, r3
 80089e0:	d208      	bcs.n	80089f4 <_sungetc_r+0x60>
 80089e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80089e6:	42a9      	cmp	r1, r5
 80089e8:	d104      	bne.n	80089f4 <_sungetc_r+0x60>
 80089ea:	3b01      	subs	r3, #1
 80089ec:	3201      	adds	r2, #1
 80089ee:	6023      	str	r3, [r4, #0]
 80089f0:	6062      	str	r2, [r4, #4]
 80089f2:	e7d5      	b.n	80089a0 <_sungetc_r+0xc>
 80089f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80089f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089fc:	6363      	str	r3, [r4, #52]	; 0x34
 80089fe:	2303      	movs	r3, #3
 8008a00:	63a3      	str	r3, [r4, #56]	; 0x38
 8008a02:	4623      	mov	r3, r4
 8008a04:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e7dc      	b.n	80089c8 <_sungetc_r+0x34>

08008a0e <__ssrefill_r>:
 8008a0e:	b510      	push	{r4, lr}
 8008a10:	460c      	mov	r4, r1
 8008a12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008a14:	b169      	cbz	r1, 8008a32 <__ssrefill_r+0x24>
 8008a16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a1a:	4299      	cmp	r1, r3
 8008a1c:	d001      	beq.n	8008a22 <__ssrefill_r+0x14>
 8008a1e:	f7fe fa2b 	bl	8006e78 <_free_r>
 8008a22:	2000      	movs	r0, #0
 8008a24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a26:	6360      	str	r0, [r4, #52]	; 0x34
 8008a28:	6063      	str	r3, [r4, #4]
 8008a2a:	b113      	cbz	r3, 8008a32 <__ssrefill_r+0x24>
 8008a2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	bd10      	pop	{r4, pc}
 8008a32:	6923      	ldr	r3, [r4, #16]
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	6063      	str	r3, [r4, #4]
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	f043 0320 	orr.w	r3, r3, #32
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	e7f3      	b.n	8008a30 <__ssrefill_r+0x22>

08008a48 <__ssvfiscanf_r>:
 8008a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	2100      	movs	r1, #0
 8008a50:	4606      	mov	r6, r0
 8008a52:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008a56:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008a5a:	49a6      	ldr	r1, [pc, #664]	; (8008cf4 <__ssvfiscanf_r+0x2ac>)
 8008a5c:	f10d 0804 	add.w	r8, sp, #4
 8008a60:	91a0      	str	r1, [sp, #640]	; 0x280
 8008a62:	49a5      	ldr	r1, [pc, #660]	; (8008cf8 <__ssvfiscanf_r+0x2b0>)
 8008a64:	4fa5      	ldr	r7, [pc, #660]	; (8008cfc <__ssvfiscanf_r+0x2b4>)
 8008a66:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008d00 <__ssvfiscanf_r+0x2b8>
 8008a6a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008a6e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	7813      	ldrb	r3, [r2, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 815a 	beq.w	8008d2e <__ssvfiscanf_r+0x2e6>
 8008a7a:	5cf9      	ldrb	r1, [r7, r3]
 8008a7c:	1c55      	adds	r5, r2, #1
 8008a7e:	f011 0108 	ands.w	r1, r1, #8
 8008a82:	d019      	beq.n	8008ab8 <__ssvfiscanf_r+0x70>
 8008a84:	6863      	ldr	r3, [r4, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	dd0f      	ble.n	8008aaa <__ssvfiscanf_r+0x62>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	781a      	ldrb	r2, [r3, #0]
 8008a8e:	5cba      	ldrb	r2, [r7, r2]
 8008a90:	0712      	lsls	r2, r2, #28
 8008a92:	d401      	bmi.n	8008a98 <__ssvfiscanf_r+0x50>
 8008a94:	462a      	mov	r2, r5
 8008a96:	e7ec      	b.n	8008a72 <__ssvfiscanf_r+0x2a>
 8008a98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	3201      	adds	r2, #1
 8008a9e:	9245      	str	r2, [sp, #276]	; 0x114
 8008aa0:	6862      	ldr	r2, [r4, #4]
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	3a01      	subs	r2, #1
 8008aa6:	6062      	str	r2, [r4, #4]
 8008aa8:	e7ec      	b.n	8008a84 <__ssvfiscanf_r+0x3c>
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4630      	mov	r0, r6
 8008aae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ab0:	4798      	blx	r3
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d0e9      	beq.n	8008a8a <__ssvfiscanf_r+0x42>
 8008ab6:	e7ed      	b.n	8008a94 <__ssvfiscanf_r+0x4c>
 8008ab8:	2b25      	cmp	r3, #37	; 0x25
 8008aba:	d012      	beq.n	8008ae2 <__ssvfiscanf_r+0x9a>
 8008abc:	469a      	mov	sl, r3
 8008abe:	6863      	ldr	r3, [r4, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f340 8092 	ble.w	8008bea <__ssvfiscanf_r+0x1a2>
 8008ac6:	6822      	ldr	r2, [r4, #0]
 8008ac8:	7813      	ldrb	r3, [r2, #0]
 8008aca:	4553      	cmp	r3, sl
 8008acc:	f040 812f 	bne.w	8008d2e <__ssvfiscanf_r+0x2e6>
 8008ad0:	6863      	ldr	r3, [r4, #4]
 8008ad2:	3201      	adds	r2, #1
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	6063      	str	r3, [r4, #4]
 8008ad8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008ada:	6022      	str	r2, [r4, #0]
 8008adc:	3301      	adds	r3, #1
 8008ade:	9345      	str	r3, [sp, #276]	; 0x114
 8008ae0:	e7d8      	b.n	8008a94 <__ssvfiscanf_r+0x4c>
 8008ae2:	9141      	str	r1, [sp, #260]	; 0x104
 8008ae4:	9143      	str	r1, [sp, #268]	; 0x10c
 8008ae6:	7853      	ldrb	r3, [r2, #1]
 8008ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aea:	bf04      	itt	eq
 8008aec:	2310      	moveq	r3, #16
 8008aee:	1c95      	addeq	r5, r2, #2
 8008af0:	f04f 020a 	mov.w	r2, #10
 8008af4:	bf08      	it	eq
 8008af6:	9341      	streq	r3, [sp, #260]	; 0x104
 8008af8:	46aa      	mov	sl, r5
 8008afa:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008afe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008b02:	2b09      	cmp	r3, #9
 8008b04:	d91c      	bls.n	8008b40 <__ssvfiscanf_r+0xf8>
 8008b06:	2203      	movs	r2, #3
 8008b08:	487d      	ldr	r0, [pc, #500]	; (8008d00 <__ssvfiscanf_r+0x2b8>)
 8008b0a:	f7fd fb32 	bl	8006172 <memchr>
 8008b0e:	b138      	cbz	r0, 8008b20 <__ssvfiscanf_r+0xd8>
 8008b10:	2301      	movs	r3, #1
 8008b12:	4655      	mov	r5, sl
 8008b14:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b16:	eba0 0009 	sub.w	r0, r0, r9
 8008b1a:	4083      	lsls	r3, r0
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	9341      	str	r3, [sp, #260]	; 0x104
 8008b20:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b24:	2b78      	cmp	r3, #120	; 0x78
 8008b26:	d806      	bhi.n	8008b36 <__ssvfiscanf_r+0xee>
 8008b28:	2b57      	cmp	r3, #87	; 0x57
 8008b2a:	d810      	bhi.n	8008b4e <__ssvfiscanf_r+0x106>
 8008b2c:	2b25      	cmp	r3, #37	; 0x25
 8008b2e:	d0c5      	beq.n	8008abc <__ssvfiscanf_r+0x74>
 8008b30:	d856      	bhi.n	8008be0 <__ssvfiscanf_r+0x198>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d064      	beq.n	8008c00 <__ssvfiscanf_r+0x1b8>
 8008b36:	2303      	movs	r3, #3
 8008b38:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b3a:	230a      	movs	r3, #10
 8008b3c:	9342      	str	r3, [sp, #264]	; 0x108
 8008b3e:	e075      	b.n	8008c2c <__ssvfiscanf_r+0x1e4>
 8008b40:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008b42:	4655      	mov	r5, sl
 8008b44:	fb02 1103 	mla	r1, r2, r3, r1
 8008b48:	3930      	subs	r1, #48	; 0x30
 8008b4a:	9143      	str	r1, [sp, #268]	; 0x10c
 8008b4c:	e7d4      	b.n	8008af8 <__ssvfiscanf_r+0xb0>
 8008b4e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008b52:	2a20      	cmp	r2, #32
 8008b54:	d8ef      	bhi.n	8008b36 <__ssvfiscanf_r+0xee>
 8008b56:	a101      	add	r1, pc, #4	; (adr r1, 8008b5c <__ssvfiscanf_r+0x114>)
 8008b58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b5c:	08008c0f 	.word	0x08008c0f
 8008b60:	08008b37 	.word	0x08008b37
 8008b64:	08008b37 	.word	0x08008b37
 8008b68:	08008c6d 	.word	0x08008c6d
 8008b6c:	08008b37 	.word	0x08008b37
 8008b70:	08008b37 	.word	0x08008b37
 8008b74:	08008b37 	.word	0x08008b37
 8008b78:	08008b37 	.word	0x08008b37
 8008b7c:	08008b37 	.word	0x08008b37
 8008b80:	08008b37 	.word	0x08008b37
 8008b84:	08008b37 	.word	0x08008b37
 8008b88:	08008c83 	.word	0x08008c83
 8008b8c:	08008c69 	.word	0x08008c69
 8008b90:	08008be7 	.word	0x08008be7
 8008b94:	08008be7 	.word	0x08008be7
 8008b98:	08008be7 	.word	0x08008be7
 8008b9c:	08008b37 	.word	0x08008b37
 8008ba0:	08008c25 	.word	0x08008c25
 8008ba4:	08008b37 	.word	0x08008b37
 8008ba8:	08008b37 	.word	0x08008b37
 8008bac:	08008b37 	.word	0x08008b37
 8008bb0:	08008b37 	.word	0x08008b37
 8008bb4:	08008c93 	.word	0x08008c93
 8008bb8:	08008c61 	.word	0x08008c61
 8008bbc:	08008c07 	.word	0x08008c07
 8008bc0:	08008b37 	.word	0x08008b37
 8008bc4:	08008b37 	.word	0x08008b37
 8008bc8:	08008c8f 	.word	0x08008c8f
 8008bcc:	08008b37 	.word	0x08008b37
 8008bd0:	08008c69 	.word	0x08008c69
 8008bd4:	08008b37 	.word	0x08008b37
 8008bd8:	08008b37 	.word	0x08008b37
 8008bdc:	08008c0f 	.word	0x08008c0f
 8008be0:	3b45      	subs	r3, #69	; 0x45
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d8a7      	bhi.n	8008b36 <__ssvfiscanf_r+0xee>
 8008be6:	2305      	movs	r3, #5
 8008be8:	e01f      	b.n	8008c2a <__ssvfiscanf_r+0x1e2>
 8008bea:	4621      	mov	r1, r4
 8008bec:	4630      	mov	r0, r6
 8008bee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008bf0:	4798      	blx	r3
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	f43f af67 	beq.w	8008ac6 <__ssvfiscanf_r+0x7e>
 8008bf8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	f040 808d 	bne.w	8008d1a <__ssvfiscanf_r+0x2d2>
 8008c00:	f04f 30ff 	mov.w	r0, #4294967295
 8008c04:	e08f      	b.n	8008d26 <__ssvfiscanf_r+0x2de>
 8008c06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c08:	f042 0220 	orr.w	r2, r2, #32
 8008c0c:	9241      	str	r2, [sp, #260]	; 0x104
 8008c0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c14:	9241      	str	r2, [sp, #260]	; 0x104
 8008c16:	2210      	movs	r2, #16
 8008c18:	2b6f      	cmp	r3, #111	; 0x6f
 8008c1a:	bf34      	ite	cc
 8008c1c:	2303      	movcc	r3, #3
 8008c1e:	2304      	movcs	r3, #4
 8008c20:	9242      	str	r2, [sp, #264]	; 0x108
 8008c22:	e002      	b.n	8008c2a <__ssvfiscanf_r+0x1e2>
 8008c24:	2300      	movs	r3, #0
 8008c26:	9342      	str	r3, [sp, #264]	; 0x108
 8008c28:	2303      	movs	r3, #3
 8008c2a:	9347      	str	r3, [sp, #284]	; 0x11c
 8008c2c:	6863      	ldr	r3, [r4, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dd3d      	ble.n	8008cae <__ssvfiscanf_r+0x266>
 8008c32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c34:	0659      	lsls	r1, r3, #25
 8008c36:	d404      	bmi.n	8008c42 <__ssvfiscanf_r+0x1fa>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	5cba      	ldrb	r2, [r7, r2]
 8008c3e:	0712      	lsls	r2, r2, #28
 8008c40:	d43c      	bmi.n	8008cbc <__ssvfiscanf_r+0x274>
 8008c42:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	dc4b      	bgt.n	8008ce0 <__ssvfiscanf_r+0x298>
 8008c48:	466b      	mov	r3, sp
 8008c4a:	4622      	mov	r2, r4
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	a941      	add	r1, sp, #260	; 0x104
 8008c50:	f000 f872 	bl	8008d38 <_scanf_chars>
 8008c54:	2801      	cmp	r0, #1
 8008c56:	d06a      	beq.n	8008d2e <__ssvfiscanf_r+0x2e6>
 8008c58:	2802      	cmp	r0, #2
 8008c5a:	f47f af1b 	bne.w	8008a94 <__ssvfiscanf_r+0x4c>
 8008c5e:	e7cb      	b.n	8008bf8 <__ssvfiscanf_r+0x1b0>
 8008c60:	2308      	movs	r3, #8
 8008c62:	9342      	str	r3, [sp, #264]	; 0x108
 8008c64:	2304      	movs	r3, #4
 8008c66:	e7e0      	b.n	8008c2a <__ssvfiscanf_r+0x1e2>
 8008c68:	220a      	movs	r2, #10
 8008c6a:	e7d5      	b.n	8008c18 <__ssvfiscanf_r+0x1d0>
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	4640      	mov	r0, r8
 8008c70:	f000 fa58 	bl	8009124 <__sccl>
 8008c74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c76:	4605      	mov	r5, r0
 8008c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c7c:	9341      	str	r3, [sp, #260]	; 0x104
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e7d3      	b.n	8008c2a <__ssvfiscanf_r+0x1e2>
 8008c82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c88:	9341      	str	r3, [sp, #260]	; 0x104
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e7cd      	b.n	8008c2a <__ssvfiscanf_r+0x1e2>
 8008c8e:	2302      	movs	r3, #2
 8008c90:	e7cb      	b.n	8008c2a <__ssvfiscanf_r+0x1e2>
 8008c92:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008c94:	06c3      	lsls	r3, r0, #27
 8008c96:	f53f aefd 	bmi.w	8008a94 <__ssvfiscanf_r+0x4c>
 8008c9a:	9b00      	ldr	r3, [sp, #0]
 8008c9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c9e:	1d19      	adds	r1, r3, #4
 8008ca0:	9100      	str	r1, [sp, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	07c0      	lsls	r0, r0, #31
 8008ca6:	bf4c      	ite	mi
 8008ca8:	801a      	strhmi	r2, [r3, #0]
 8008caa:	601a      	strpl	r2, [r3, #0]
 8008cac:	e6f2      	b.n	8008a94 <__ssvfiscanf_r+0x4c>
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cb4:	4798      	blx	r3
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d0bb      	beq.n	8008c32 <__ssvfiscanf_r+0x1ea>
 8008cba:	e79d      	b.n	8008bf8 <__ssvfiscanf_r+0x1b0>
 8008cbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008cbe:	3201      	adds	r2, #1
 8008cc0:	9245      	str	r2, [sp, #276]	; 0x114
 8008cc2:	6862      	ldr	r2, [r4, #4]
 8008cc4:	3a01      	subs	r2, #1
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	6062      	str	r2, [r4, #4]
 8008cca:	dd02      	ble.n	8008cd2 <__ssvfiscanf_r+0x28a>
 8008ccc:	3301      	adds	r3, #1
 8008cce:	6023      	str	r3, [r4, #0]
 8008cd0:	e7b2      	b.n	8008c38 <__ssvfiscanf_r+0x1f0>
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cd8:	4798      	blx	r3
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d0ac      	beq.n	8008c38 <__ssvfiscanf_r+0x1f0>
 8008cde:	e78b      	b.n	8008bf8 <__ssvfiscanf_r+0x1b0>
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	dc0f      	bgt.n	8008d04 <__ssvfiscanf_r+0x2bc>
 8008ce4:	466b      	mov	r3, sp
 8008ce6:	4622      	mov	r2, r4
 8008ce8:	4630      	mov	r0, r6
 8008cea:	a941      	add	r1, sp, #260	; 0x104
 8008cec:	f000 f87e 	bl	8008dec <_scanf_i>
 8008cf0:	e7b0      	b.n	8008c54 <__ssvfiscanf_r+0x20c>
 8008cf2:	bf00      	nop
 8008cf4:	08008995 	.word	0x08008995
 8008cf8:	08008a0f 	.word	0x08008a0f
 8008cfc:	0800a3c9 	.word	0x0800a3c9
 8008d00:	0800a4cf 	.word	0x0800a4cf
 8008d04:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <__ssvfiscanf_r+0x2ec>)
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f43f aec4 	beq.w	8008a94 <__ssvfiscanf_r+0x4c>
 8008d0c:	466b      	mov	r3, sp
 8008d0e:	4622      	mov	r2, r4
 8008d10:	4630      	mov	r0, r6
 8008d12:	a941      	add	r1, sp, #260	; 0x104
 8008d14:	f7fc fe04 	bl	8005920 <_scanf_float>
 8008d18:	e79c      	b.n	8008c54 <__ssvfiscanf_r+0x20c>
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d20:	bf18      	it	ne
 8008d22:	f04f 30ff 	movne.w	r0, #4294967295
 8008d26:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d30:	e7f9      	b.n	8008d26 <__ssvfiscanf_r+0x2de>
 8008d32:	bf00      	nop
 8008d34:	08005921 	.word	0x08005921

08008d38 <_scanf_chars>:
 8008d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d3c:	4615      	mov	r5, r2
 8008d3e:	688a      	ldr	r2, [r1, #8]
 8008d40:	4680      	mov	r8, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	b932      	cbnz	r2, 8008d54 <_scanf_chars+0x1c>
 8008d46:	698a      	ldr	r2, [r1, #24]
 8008d48:	2a00      	cmp	r2, #0
 8008d4a:	bf0c      	ite	eq
 8008d4c:	2201      	moveq	r2, #1
 8008d4e:	f04f 32ff 	movne.w	r2, #4294967295
 8008d52:	608a      	str	r2, [r1, #8]
 8008d54:	2700      	movs	r7, #0
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008de8 <_scanf_chars+0xb0>
 8008d5c:	06d1      	lsls	r1, r2, #27
 8008d5e:	bf5f      	itttt	pl
 8008d60:	681a      	ldrpl	r2, [r3, #0]
 8008d62:	1d11      	addpl	r1, r2, #4
 8008d64:	6019      	strpl	r1, [r3, #0]
 8008d66:	6816      	ldrpl	r6, [r2, #0]
 8008d68:	69a0      	ldr	r0, [r4, #24]
 8008d6a:	b188      	cbz	r0, 8008d90 <_scanf_chars+0x58>
 8008d6c:	2801      	cmp	r0, #1
 8008d6e:	d107      	bne.n	8008d80 <_scanf_chars+0x48>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	6963      	ldr	r3, [r4, #20]
 8008d76:	5c9b      	ldrb	r3, [r3, r2]
 8008d78:	b953      	cbnz	r3, 8008d90 <_scanf_chars+0x58>
 8008d7a:	2f00      	cmp	r7, #0
 8008d7c:	d031      	beq.n	8008de2 <_scanf_chars+0xaa>
 8008d7e:	e022      	b.n	8008dc6 <_scanf_chars+0x8e>
 8008d80:	2802      	cmp	r0, #2
 8008d82:	d120      	bne.n	8008dc6 <_scanf_chars+0x8e>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008d8c:	071b      	lsls	r3, r3, #28
 8008d8e:	d41a      	bmi.n	8008dc6 <_scanf_chars+0x8e>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	3701      	adds	r7, #1
 8008d94:	06da      	lsls	r2, r3, #27
 8008d96:	bf5e      	ittt	pl
 8008d98:	682b      	ldrpl	r3, [r5, #0]
 8008d9a:	781b      	ldrbpl	r3, [r3, #0]
 8008d9c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008da0:	682a      	ldr	r2, [r5, #0]
 8008da2:	686b      	ldr	r3, [r5, #4]
 8008da4:	3201      	adds	r2, #1
 8008da6:	602a      	str	r2, [r5, #0]
 8008da8:	68a2      	ldr	r2, [r4, #8]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	3a01      	subs	r2, #1
 8008dae:	606b      	str	r3, [r5, #4]
 8008db0:	60a2      	str	r2, [r4, #8]
 8008db2:	b142      	cbz	r2, 8008dc6 <_scanf_chars+0x8e>
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	dcd7      	bgt.n	8008d68 <_scanf_chars+0x30>
 8008db8:	4629      	mov	r1, r5
 8008dba:	4640      	mov	r0, r8
 8008dbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008dc0:	4798      	blx	r3
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d0d0      	beq.n	8008d68 <_scanf_chars+0x30>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	f013 0310 	ands.w	r3, r3, #16
 8008dcc:	d105      	bne.n	8008dda <_scanf_chars+0xa2>
 8008dce:	68e2      	ldr	r2, [r4, #12]
 8008dd0:	3201      	adds	r2, #1
 8008dd2:	60e2      	str	r2, [r4, #12]
 8008dd4:	69a2      	ldr	r2, [r4, #24]
 8008dd6:	b102      	cbz	r2, 8008dda <_scanf_chars+0xa2>
 8008dd8:	7033      	strb	r3, [r6, #0]
 8008dda:	2000      	movs	r0, #0
 8008ddc:	6923      	ldr	r3, [r4, #16]
 8008dde:	443b      	add	r3, r7
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de6:	bf00      	nop
 8008de8:	0800a3c9 	.word	0x0800a3c9

08008dec <_scanf_i>:
 8008dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df0:	460c      	mov	r4, r1
 8008df2:	4698      	mov	r8, r3
 8008df4:	4b72      	ldr	r3, [pc, #456]	; (8008fc0 <_scanf_i+0x1d4>)
 8008df6:	b087      	sub	sp, #28
 8008df8:	4682      	mov	sl, r0
 8008dfa:	4616      	mov	r6, r2
 8008dfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e00:	ab03      	add	r3, sp, #12
 8008e02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008e06:	4b6f      	ldr	r3, [pc, #444]	; (8008fc4 <_scanf_i+0x1d8>)
 8008e08:	69a1      	ldr	r1, [r4, #24]
 8008e0a:	4a6f      	ldr	r2, [pc, #444]	; (8008fc8 <_scanf_i+0x1dc>)
 8008e0c:	4627      	mov	r7, r4
 8008e0e:	2903      	cmp	r1, #3
 8008e10:	bf18      	it	ne
 8008e12:	461a      	movne	r2, r3
 8008e14:	68a3      	ldr	r3, [r4, #8]
 8008e16:	9201      	str	r2, [sp, #4]
 8008e18:	1e5a      	subs	r2, r3, #1
 8008e1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e1e:	bf81      	itttt	hi
 8008e20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e24:	eb03 0905 	addhi.w	r9, r3, r5
 8008e28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e2c:	60a3      	strhi	r3, [r4, #8]
 8008e2e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008e32:	bf98      	it	ls
 8008e34:	f04f 0900 	movls.w	r9, #0
 8008e38:	463d      	mov	r5, r7
 8008e3a:	f04f 0b00 	mov.w	fp, #0
 8008e3e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	6831      	ldr	r1, [r6, #0]
 8008e46:	ab03      	add	r3, sp, #12
 8008e48:	2202      	movs	r2, #2
 8008e4a:	7809      	ldrb	r1, [r1, #0]
 8008e4c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008e50:	f7fd f98f 	bl	8006172 <memchr>
 8008e54:	b328      	cbz	r0, 8008ea2 <_scanf_i+0xb6>
 8008e56:	f1bb 0f01 	cmp.w	fp, #1
 8008e5a:	d159      	bne.n	8008f10 <_scanf_i+0x124>
 8008e5c:	6862      	ldr	r2, [r4, #4]
 8008e5e:	b92a      	cbnz	r2, 8008e6c <_scanf_i+0x80>
 8008e60:	2308      	movs	r3, #8
 8008e62:	6822      	ldr	r2, [r4, #0]
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e6a:	6022      	str	r2, [r4, #0]
 8008e6c:	6822      	ldr	r2, [r4, #0]
 8008e6e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008e72:	6022      	str	r2, [r4, #0]
 8008e74:	68a2      	ldr	r2, [r4, #8]
 8008e76:	1e51      	subs	r1, r2, #1
 8008e78:	60a1      	str	r1, [r4, #8]
 8008e7a:	b192      	cbz	r2, 8008ea2 <_scanf_i+0xb6>
 8008e7c:	6832      	ldr	r2, [r6, #0]
 8008e7e:	1c51      	adds	r1, r2, #1
 8008e80:	6031      	str	r1, [r6, #0]
 8008e82:	7812      	ldrb	r2, [r2, #0]
 8008e84:	f805 2b01 	strb.w	r2, [r5], #1
 8008e88:	6872      	ldr	r2, [r6, #4]
 8008e8a:	3a01      	subs	r2, #1
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	6072      	str	r2, [r6, #4]
 8008e90:	dc07      	bgt.n	8008ea2 <_scanf_i+0xb6>
 8008e92:	4631      	mov	r1, r6
 8008e94:	4650      	mov	r0, sl
 8008e96:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008e9a:	4790      	blx	r2
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	f040 8085 	bne.w	8008fac <_scanf_i+0x1c0>
 8008ea2:	f10b 0b01 	add.w	fp, fp, #1
 8008ea6:	f1bb 0f03 	cmp.w	fp, #3
 8008eaa:	d1cb      	bne.n	8008e44 <_scanf_i+0x58>
 8008eac:	6863      	ldr	r3, [r4, #4]
 8008eae:	b90b      	cbnz	r3, 8008eb4 <_scanf_i+0xc8>
 8008eb0:	230a      	movs	r3, #10
 8008eb2:	6063      	str	r3, [r4, #4]
 8008eb4:	6863      	ldr	r3, [r4, #4]
 8008eb6:	4945      	ldr	r1, [pc, #276]	; (8008fcc <_scanf_i+0x1e0>)
 8008eb8:	6960      	ldr	r0, [r4, #20]
 8008eba:	1ac9      	subs	r1, r1, r3
 8008ebc:	f000 f932 	bl	8009124 <__sccl>
 8008ec0:	f04f 0b00 	mov.w	fp, #0
 8008ec4:	68a3      	ldr	r3, [r4, #8]
 8008ec6:	6822      	ldr	r2, [r4, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d03d      	beq.n	8008f48 <_scanf_i+0x15c>
 8008ecc:	6831      	ldr	r1, [r6, #0]
 8008ece:	6960      	ldr	r0, [r4, #20]
 8008ed0:	f891 c000 	ldrb.w	ip, [r1]
 8008ed4:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d035      	beq.n	8008f48 <_scanf_i+0x15c>
 8008edc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008ee0:	d124      	bne.n	8008f2c <_scanf_i+0x140>
 8008ee2:	0510      	lsls	r0, r2, #20
 8008ee4:	d522      	bpl.n	8008f2c <_scanf_i+0x140>
 8008ee6:	f10b 0b01 	add.w	fp, fp, #1
 8008eea:	f1b9 0f00 	cmp.w	r9, #0
 8008eee:	d003      	beq.n	8008ef8 <_scanf_i+0x10c>
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	f109 39ff 	add.w	r9, r9, #4294967295
 8008ef6:	60a3      	str	r3, [r4, #8]
 8008ef8:	6873      	ldr	r3, [r6, #4]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	6073      	str	r3, [r6, #4]
 8008f00:	dd1b      	ble.n	8008f3a <_scanf_i+0x14e>
 8008f02:	6833      	ldr	r3, [r6, #0]
 8008f04:	3301      	adds	r3, #1
 8008f06:	6033      	str	r3, [r6, #0]
 8008f08:	68a3      	ldr	r3, [r4, #8]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	e7d9      	b.n	8008ec4 <_scanf_i+0xd8>
 8008f10:	f1bb 0f02 	cmp.w	fp, #2
 8008f14:	d1ae      	bne.n	8008e74 <_scanf_i+0x88>
 8008f16:	6822      	ldr	r2, [r4, #0]
 8008f18:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008f1c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008f20:	d1bf      	bne.n	8008ea2 <_scanf_i+0xb6>
 8008f22:	2310      	movs	r3, #16
 8008f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f28:	6063      	str	r3, [r4, #4]
 8008f2a:	e7a2      	b.n	8008e72 <_scanf_i+0x86>
 8008f2c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008f30:	6022      	str	r2, [r4, #0]
 8008f32:	780b      	ldrb	r3, [r1, #0]
 8008f34:	f805 3b01 	strb.w	r3, [r5], #1
 8008f38:	e7de      	b.n	8008ef8 <_scanf_i+0x10c>
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	4650      	mov	r0, sl
 8008f3e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f42:	4798      	blx	r3
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d0df      	beq.n	8008f08 <_scanf_i+0x11c>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	05d9      	lsls	r1, r3, #23
 8008f4c:	d50d      	bpl.n	8008f6a <_scanf_i+0x17e>
 8008f4e:	42bd      	cmp	r5, r7
 8008f50:	d909      	bls.n	8008f66 <_scanf_i+0x17a>
 8008f52:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008f56:	4632      	mov	r2, r6
 8008f58:	4650      	mov	r0, sl
 8008f5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f5e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008f62:	4798      	blx	r3
 8008f64:	464d      	mov	r5, r9
 8008f66:	42bd      	cmp	r5, r7
 8008f68:	d028      	beq.n	8008fbc <_scanf_i+0x1d0>
 8008f6a:	6822      	ldr	r2, [r4, #0]
 8008f6c:	f012 0210 	ands.w	r2, r2, #16
 8008f70:	d113      	bne.n	8008f9a <_scanf_i+0x1ae>
 8008f72:	702a      	strb	r2, [r5, #0]
 8008f74:	4639      	mov	r1, r7
 8008f76:	6863      	ldr	r3, [r4, #4]
 8008f78:	4650      	mov	r0, sl
 8008f7a:	9e01      	ldr	r6, [sp, #4]
 8008f7c:	47b0      	blx	r6
 8008f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f82:	6821      	ldr	r1, [r4, #0]
 8008f84:	1d1a      	adds	r2, r3, #4
 8008f86:	f8c8 2000 	str.w	r2, [r8]
 8008f8a:	f011 0f20 	tst.w	r1, #32
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	d00f      	beq.n	8008fb2 <_scanf_i+0x1c6>
 8008f92:	6018      	str	r0, [r3, #0]
 8008f94:	68e3      	ldr	r3, [r4, #12]
 8008f96:	3301      	adds	r3, #1
 8008f98:	60e3      	str	r3, [r4, #12]
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	6923      	ldr	r3, [r4, #16]
 8008f9e:	1bed      	subs	r5, r5, r7
 8008fa0:	445d      	add	r5, fp
 8008fa2:	442b      	add	r3, r5
 8008fa4:	6123      	str	r3, [r4, #16]
 8008fa6:	b007      	add	sp, #28
 8008fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fac:	f04f 0b00 	mov.w	fp, #0
 8008fb0:	e7ca      	b.n	8008f48 <_scanf_i+0x15c>
 8008fb2:	07ca      	lsls	r2, r1, #31
 8008fb4:	bf4c      	ite	mi
 8008fb6:	8018      	strhmi	r0, [r3, #0]
 8008fb8:	6018      	strpl	r0, [r3, #0]
 8008fba:	e7eb      	b.n	8008f94 <_scanf_i+0x1a8>
 8008fbc:	2001      	movs	r0, #1
 8008fbe:	e7f2      	b.n	8008fa6 <_scanf_i+0x1ba>
 8008fc0:	0800a124 	.word	0x0800a124
 8008fc4:	08009b25 	.word	0x08009b25
 8008fc8:	080086e1 	.word	0x080086e1
 8008fcc:	0800a4ea 	.word	0x0800a4ea

08008fd0 <__sflush_r>:
 8008fd0:	898a      	ldrh	r2, [r1, #12]
 8008fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	0710      	lsls	r0, r2, #28
 8008fd8:	460c      	mov	r4, r1
 8008fda:	d457      	bmi.n	800908c <__sflush_r+0xbc>
 8008fdc:	684b      	ldr	r3, [r1, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	dc04      	bgt.n	8008fec <__sflush_r+0x1c>
 8008fe2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dc01      	bgt.n	8008fec <__sflush_r+0x1c>
 8008fe8:	2000      	movs	r0, #0
 8008fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fee:	2e00      	cmp	r6, #0
 8008ff0:	d0fa      	beq.n	8008fe8 <__sflush_r+0x18>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ff8:	682f      	ldr	r7, [r5, #0]
 8008ffa:	6a21      	ldr	r1, [r4, #32]
 8008ffc:	602b      	str	r3, [r5, #0]
 8008ffe:	d032      	beq.n	8009066 <__sflush_r+0x96>
 8009000:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	075a      	lsls	r2, r3, #29
 8009006:	d505      	bpl.n	8009014 <__sflush_r+0x44>
 8009008:	6863      	ldr	r3, [r4, #4]
 800900a:	1ac0      	subs	r0, r0, r3
 800900c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800900e:	b10b      	cbz	r3, 8009014 <__sflush_r+0x44>
 8009010:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009012:	1ac0      	subs	r0, r0, r3
 8009014:	2300      	movs	r3, #0
 8009016:	4602      	mov	r2, r0
 8009018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800901a:	4628      	mov	r0, r5
 800901c:	6a21      	ldr	r1, [r4, #32]
 800901e:	47b0      	blx	r6
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	d106      	bne.n	8009034 <__sflush_r+0x64>
 8009026:	6829      	ldr	r1, [r5, #0]
 8009028:	291d      	cmp	r1, #29
 800902a:	d82b      	bhi.n	8009084 <__sflush_r+0xb4>
 800902c:	4a28      	ldr	r2, [pc, #160]	; (80090d0 <__sflush_r+0x100>)
 800902e:	410a      	asrs	r2, r1
 8009030:	07d6      	lsls	r6, r2, #31
 8009032:	d427      	bmi.n	8009084 <__sflush_r+0xb4>
 8009034:	2200      	movs	r2, #0
 8009036:	6062      	str	r2, [r4, #4]
 8009038:	6922      	ldr	r2, [r4, #16]
 800903a:	04d9      	lsls	r1, r3, #19
 800903c:	6022      	str	r2, [r4, #0]
 800903e:	d504      	bpl.n	800904a <__sflush_r+0x7a>
 8009040:	1c42      	adds	r2, r0, #1
 8009042:	d101      	bne.n	8009048 <__sflush_r+0x78>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	b903      	cbnz	r3, 800904a <__sflush_r+0x7a>
 8009048:	6560      	str	r0, [r4, #84]	; 0x54
 800904a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800904c:	602f      	str	r7, [r5, #0]
 800904e:	2900      	cmp	r1, #0
 8009050:	d0ca      	beq.n	8008fe8 <__sflush_r+0x18>
 8009052:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009056:	4299      	cmp	r1, r3
 8009058:	d002      	beq.n	8009060 <__sflush_r+0x90>
 800905a:	4628      	mov	r0, r5
 800905c:	f7fd ff0c 	bl	8006e78 <_free_r>
 8009060:	2000      	movs	r0, #0
 8009062:	6360      	str	r0, [r4, #52]	; 0x34
 8009064:	e7c1      	b.n	8008fea <__sflush_r+0x1a>
 8009066:	2301      	movs	r3, #1
 8009068:	4628      	mov	r0, r5
 800906a:	47b0      	blx	r6
 800906c:	1c41      	adds	r1, r0, #1
 800906e:	d1c8      	bne.n	8009002 <__sflush_r+0x32>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0c5      	beq.n	8009002 <__sflush_r+0x32>
 8009076:	2b1d      	cmp	r3, #29
 8009078:	d001      	beq.n	800907e <__sflush_r+0xae>
 800907a:	2b16      	cmp	r3, #22
 800907c:	d101      	bne.n	8009082 <__sflush_r+0xb2>
 800907e:	602f      	str	r7, [r5, #0]
 8009080:	e7b2      	b.n	8008fe8 <__sflush_r+0x18>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009088:	81a3      	strh	r3, [r4, #12]
 800908a:	e7ae      	b.n	8008fea <__sflush_r+0x1a>
 800908c:	690f      	ldr	r7, [r1, #16]
 800908e:	2f00      	cmp	r7, #0
 8009090:	d0aa      	beq.n	8008fe8 <__sflush_r+0x18>
 8009092:	0793      	lsls	r3, r2, #30
 8009094:	bf18      	it	ne
 8009096:	2300      	movne	r3, #0
 8009098:	680e      	ldr	r6, [r1, #0]
 800909a:	bf08      	it	eq
 800909c:	694b      	ldreq	r3, [r1, #20]
 800909e:	1bf6      	subs	r6, r6, r7
 80090a0:	600f      	str	r7, [r1, #0]
 80090a2:	608b      	str	r3, [r1, #8]
 80090a4:	2e00      	cmp	r6, #0
 80090a6:	dd9f      	ble.n	8008fe8 <__sflush_r+0x18>
 80090a8:	4633      	mov	r3, r6
 80090aa:	463a      	mov	r2, r7
 80090ac:	4628      	mov	r0, r5
 80090ae:	6a21      	ldr	r1, [r4, #32]
 80090b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80090b4:	47e0      	blx	ip
 80090b6:	2800      	cmp	r0, #0
 80090b8:	dc06      	bgt.n	80090c8 <__sflush_r+0xf8>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295
 80090c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c4:	81a3      	strh	r3, [r4, #12]
 80090c6:	e790      	b.n	8008fea <__sflush_r+0x1a>
 80090c8:	4407      	add	r7, r0
 80090ca:	1a36      	subs	r6, r6, r0
 80090cc:	e7ea      	b.n	80090a4 <__sflush_r+0xd4>
 80090ce:	bf00      	nop
 80090d0:	dfbffffe 	.word	0xdfbffffe

080090d4 <_fflush_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	690b      	ldr	r3, [r1, #16]
 80090d8:	4605      	mov	r5, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	b913      	cbnz	r3, 80090e4 <_fflush_r+0x10>
 80090de:	2500      	movs	r5, #0
 80090e0:	4628      	mov	r0, r5
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	b118      	cbz	r0, 80090ee <_fflush_r+0x1a>
 80090e6:	6a03      	ldr	r3, [r0, #32]
 80090e8:	b90b      	cbnz	r3, 80090ee <_fflush_r+0x1a>
 80090ea:	f7fc feb3 	bl	8005e54 <__sinit>
 80090ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0f3      	beq.n	80090de <_fflush_r+0xa>
 80090f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090f8:	07d0      	lsls	r0, r2, #31
 80090fa:	d404      	bmi.n	8009106 <_fflush_r+0x32>
 80090fc:	0599      	lsls	r1, r3, #22
 80090fe:	d402      	bmi.n	8009106 <_fflush_r+0x32>
 8009100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009102:	f7fd f82c 	bl	800615e <__retarget_lock_acquire_recursive>
 8009106:	4628      	mov	r0, r5
 8009108:	4621      	mov	r1, r4
 800910a:	f7ff ff61 	bl	8008fd0 <__sflush_r>
 800910e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009110:	4605      	mov	r5, r0
 8009112:	07da      	lsls	r2, r3, #31
 8009114:	d4e4      	bmi.n	80090e0 <_fflush_r+0xc>
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	059b      	lsls	r3, r3, #22
 800911a:	d4e1      	bmi.n	80090e0 <_fflush_r+0xc>
 800911c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800911e:	f7fd f81f 	bl	8006160 <__retarget_lock_release_recursive>
 8009122:	e7dd      	b.n	80090e0 <_fflush_r+0xc>

08009124 <__sccl>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	780b      	ldrb	r3, [r1, #0]
 8009128:	4604      	mov	r4, r0
 800912a:	2b5e      	cmp	r3, #94	; 0x5e
 800912c:	bf0b      	itete	eq
 800912e:	784b      	ldrbeq	r3, [r1, #1]
 8009130:	1c4a      	addne	r2, r1, #1
 8009132:	1c8a      	addeq	r2, r1, #2
 8009134:	2100      	movne	r1, #0
 8009136:	bf08      	it	eq
 8009138:	2101      	moveq	r1, #1
 800913a:	3801      	subs	r0, #1
 800913c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009140:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009144:	42a8      	cmp	r0, r5
 8009146:	d1fb      	bne.n	8009140 <__sccl+0x1c>
 8009148:	b90b      	cbnz	r3, 800914e <__sccl+0x2a>
 800914a:	1e50      	subs	r0, r2, #1
 800914c:	bd70      	pop	{r4, r5, r6, pc}
 800914e:	f081 0101 	eor.w	r1, r1, #1
 8009152:	4610      	mov	r0, r2
 8009154:	54e1      	strb	r1, [r4, r3]
 8009156:	4602      	mov	r2, r0
 8009158:	f812 5b01 	ldrb.w	r5, [r2], #1
 800915c:	2d2d      	cmp	r5, #45	; 0x2d
 800915e:	d005      	beq.n	800916c <__sccl+0x48>
 8009160:	2d5d      	cmp	r5, #93	; 0x5d
 8009162:	d016      	beq.n	8009192 <__sccl+0x6e>
 8009164:	2d00      	cmp	r5, #0
 8009166:	d0f1      	beq.n	800914c <__sccl+0x28>
 8009168:	462b      	mov	r3, r5
 800916a:	e7f2      	b.n	8009152 <__sccl+0x2e>
 800916c:	7846      	ldrb	r6, [r0, #1]
 800916e:	2e5d      	cmp	r6, #93	; 0x5d
 8009170:	d0fa      	beq.n	8009168 <__sccl+0x44>
 8009172:	42b3      	cmp	r3, r6
 8009174:	dcf8      	bgt.n	8009168 <__sccl+0x44>
 8009176:	461a      	mov	r2, r3
 8009178:	3002      	adds	r0, #2
 800917a:	3201      	adds	r2, #1
 800917c:	4296      	cmp	r6, r2
 800917e:	54a1      	strb	r1, [r4, r2]
 8009180:	dcfb      	bgt.n	800917a <__sccl+0x56>
 8009182:	1af2      	subs	r2, r6, r3
 8009184:	3a01      	subs	r2, #1
 8009186:	42b3      	cmp	r3, r6
 8009188:	bfa8      	it	ge
 800918a:	2200      	movge	r2, #0
 800918c:	1c5d      	adds	r5, r3, #1
 800918e:	18ab      	adds	r3, r5, r2
 8009190:	e7e1      	b.n	8009156 <__sccl+0x32>
 8009192:	4610      	mov	r0, r2
 8009194:	e7da      	b.n	800914c <__sccl+0x28>

08009196 <__submore>:
 8009196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919a:	460c      	mov	r4, r1
 800919c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800919e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091a2:	4299      	cmp	r1, r3
 80091a4:	d11b      	bne.n	80091de <__submore+0x48>
 80091a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091aa:	f7fd fed5 	bl	8006f58 <_malloc_r>
 80091ae:	b918      	cbnz	r0, 80091b8 <__submore+0x22>
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295
 80091b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80091be:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80091c2:	6360      	str	r0, [r4, #52]	; 0x34
 80091c4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80091c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80091cc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80091d0:	7043      	strb	r3, [r0, #1]
 80091d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80091d6:	7003      	strb	r3, [r0, #0]
 80091d8:	6020      	str	r0, [r4, #0]
 80091da:	2000      	movs	r0, #0
 80091dc:	e7ea      	b.n	80091b4 <__submore+0x1e>
 80091de:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80091e0:	0077      	lsls	r7, r6, #1
 80091e2:	463a      	mov	r2, r7
 80091e4:	f000 fbfd 	bl	80099e2 <_realloc_r>
 80091e8:	4605      	mov	r5, r0
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d0e0      	beq.n	80091b0 <__submore+0x1a>
 80091ee:	eb00 0806 	add.w	r8, r0, r6
 80091f2:	4601      	mov	r1, r0
 80091f4:	4632      	mov	r2, r6
 80091f6:	4640      	mov	r0, r8
 80091f8:	f000 f842 	bl	8009280 <memcpy>
 80091fc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009200:	f8c4 8000 	str.w	r8, [r4]
 8009204:	e7e9      	b.n	80091da <__submore+0x44>

08009206 <memmove>:
 8009206:	4288      	cmp	r0, r1
 8009208:	b510      	push	{r4, lr}
 800920a:	eb01 0402 	add.w	r4, r1, r2
 800920e:	d902      	bls.n	8009216 <memmove+0x10>
 8009210:	4284      	cmp	r4, r0
 8009212:	4623      	mov	r3, r4
 8009214:	d807      	bhi.n	8009226 <memmove+0x20>
 8009216:	1e43      	subs	r3, r0, #1
 8009218:	42a1      	cmp	r1, r4
 800921a:	d008      	beq.n	800922e <memmove+0x28>
 800921c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009220:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009224:	e7f8      	b.n	8009218 <memmove+0x12>
 8009226:	4601      	mov	r1, r0
 8009228:	4402      	add	r2, r0
 800922a:	428a      	cmp	r2, r1
 800922c:	d100      	bne.n	8009230 <memmove+0x2a>
 800922e:	bd10      	pop	{r4, pc}
 8009230:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009234:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009238:	e7f7      	b.n	800922a <memmove+0x24>

0800923a <strncmp>:
 800923a:	b510      	push	{r4, lr}
 800923c:	b16a      	cbz	r2, 800925a <strncmp+0x20>
 800923e:	3901      	subs	r1, #1
 8009240:	1884      	adds	r4, r0, r2
 8009242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009246:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800924a:	429a      	cmp	r2, r3
 800924c:	d103      	bne.n	8009256 <strncmp+0x1c>
 800924e:	42a0      	cmp	r0, r4
 8009250:	d001      	beq.n	8009256 <strncmp+0x1c>
 8009252:	2a00      	cmp	r2, #0
 8009254:	d1f5      	bne.n	8009242 <strncmp+0x8>
 8009256:	1ad0      	subs	r0, r2, r3
 8009258:	bd10      	pop	{r4, pc}
 800925a:	4610      	mov	r0, r2
 800925c:	e7fc      	b.n	8009258 <strncmp+0x1e>
	...

08009260 <_sbrk_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	2300      	movs	r3, #0
 8009264:	4d05      	ldr	r5, [pc, #20]	; (800927c <_sbrk_r+0x1c>)
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	602b      	str	r3, [r5, #0]
 800926c:	f7f8 fa48 	bl	8001700 <_sbrk>
 8009270:	1c43      	adds	r3, r0, #1
 8009272:	d102      	bne.n	800927a <_sbrk_r+0x1a>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	b103      	cbz	r3, 800927a <_sbrk_r+0x1a>
 8009278:	6023      	str	r3, [r4, #0]
 800927a:	bd38      	pop	{r3, r4, r5, pc}
 800927c:	2000058c 	.word	0x2000058c

08009280 <memcpy>:
 8009280:	440a      	add	r2, r1
 8009282:	4291      	cmp	r1, r2
 8009284:	f100 33ff 	add.w	r3, r0, #4294967295
 8009288:	d100      	bne.n	800928c <memcpy+0xc>
 800928a:	4770      	bx	lr
 800928c:	b510      	push	{r4, lr}
 800928e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009292:	4291      	cmp	r1, r2
 8009294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009298:	d1f9      	bne.n	800928e <memcpy+0xe>
 800929a:	bd10      	pop	{r4, pc}

0800929c <nan>:
 800929c:	2000      	movs	r0, #0
 800929e:	4901      	ldr	r1, [pc, #4]	; (80092a4 <nan+0x8>)
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	7ff80000 	.word	0x7ff80000

080092a8 <__assert_func>:
 80092a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092aa:	4614      	mov	r4, r2
 80092ac:	461a      	mov	r2, r3
 80092ae:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <__assert_func+0x2c>)
 80092b0:	4605      	mov	r5, r0
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68d8      	ldr	r0, [r3, #12]
 80092b6:	b14c      	cbz	r4, 80092cc <__assert_func+0x24>
 80092b8:	4b07      	ldr	r3, [pc, #28]	; (80092d8 <__assert_func+0x30>)
 80092ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092be:	9100      	str	r1, [sp, #0]
 80092c0:	462b      	mov	r3, r5
 80092c2:	4906      	ldr	r1, [pc, #24]	; (80092dc <__assert_func+0x34>)
 80092c4:	f000 fc3e 	bl	8009b44 <fiprintf>
 80092c8:	f000 fc4e 	bl	8009b68 <abort>
 80092cc:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <__assert_func+0x38>)
 80092ce:	461c      	mov	r4, r3
 80092d0:	e7f3      	b.n	80092ba <__assert_func+0x12>
 80092d2:	bf00      	nop
 80092d4:	20000064 	.word	0x20000064
 80092d8:	0800a4fd 	.word	0x0800a4fd
 80092dc:	0800a50a 	.word	0x0800a50a
 80092e0:	0800a538 	.word	0x0800a538

080092e4 <_calloc_r>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	fba1 5402 	umull	r5, r4, r1, r2
 80092ea:	b934      	cbnz	r4, 80092fa <_calloc_r+0x16>
 80092ec:	4629      	mov	r1, r5
 80092ee:	f7fd fe33 	bl	8006f58 <_malloc_r>
 80092f2:	4606      	mov	r6, r0
 80092f4:	b928      	cbnz	r0, 8009302 <_calloc_r+0x1e>
 80092f6:	4630      	mov	r0, r6
 80092f8:	bd70      	pop	{r4, r5, r6, pc}
 80092fa:	220c      	movs	r2, #12
 80092fc:	2600      	movs	r6, #0
 80092fe:	6002      	str	r2, [r0, #0]
 8009300:	e7f9      	b.n	80092f6 <_calloc_r+0x12>
 8009302:	462a      	mov	r2, r5
 8009304:	4621      	mov	r1, r4
 8009306:	f7fc fe9e 	bl	8006046 <memset>
 800930a:	e7f4      	b.n	80092f6 <_calloc_r+0x12>

0800930c <rshift>:
 800930c:	6903      	ldr	r3, [r0, #16]
 800930e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009312:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009316:	f100 0414 	add.w	r4, r0, #20
 800931a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800931e:	dd46      	ble.n	80093ae <rshift+0xa2>
 8009320:	f011 011f 	ands.w	r1, r1, #31
 8009324:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009328:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800932c:	d10c      	bne.n	8009348 <rshift+0x3c>
 800932e:	4629      	mov	r1, r5
 8009330:	f100 0710 	add.w	r7, r0, #16
 8009334:	42b1      	cmp	r1, r6
 8009336:	d335      	bcc.n	80093a4 <rshift+0x98>
 8009338:	1a9b      	subs	r3, r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	1eea      	subs	r2, r5, #3
 800933e:	4296      	cmp	r6, r2
 8009340:	bf38      	it	cc
 8009342:	2300      	movcc	r3, #0
 8009344:	4423      	add	r3, r4
 8009346:	e015      	b.n	8009374 <rshift+0x68>
 8009348:	46a1      	mov	r9, r4
 800934a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800934e:	f1c1 0820 	rsb	r8, r1, #32
 8009352:	40cf      	lsrs	r7, r1
 8009354:	f105 0e04 	add.w	lr, r5, #4
 8009358:	4576      	cmp	r6, lr
 800935a:	46f4      	mov	ip, lr
 800935c:	d816      	bhi.n	800938c <rshift+0x80>
 800935e:	1a9a      	subs	r2, r3, r2
 8009360:	0092      	lsls	r2, r2, #2
 8009362:	3a04      	subs	r2, #4
 8009364:	3501      	adds	r5, #1
 8009366:	42ae      	cmp	r6, r5
 8009368:	bf38      	it	cc
 800936a:	2200      	movcc	r2, #0
 800936c:	18a3      	adds	r3, r4, r2
 800936e:	50a7      	str	r7, [r4, r2]
 8009370:	b107      	cbz	r7, 8009374 <rshift+0x68>
 8009372:	3304      	adds	r3, #4
 8009374:	42a3      	cmp	r3, r4
 8009376:	eba3 0204 	sub.w	r2, r3, r4
 800937a:	bf08      	it	eq
 800937c:	2300      	moveq	r3, #0
 800937e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009382:	6102      	str	r2, [r0, #16]
 8009384:	bf08      	it	eq
 8009386:	6143      	streq	r3, [r0, #20]
 8009388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800938c:	f8dc c000 	ldr.w	ip, [ip]
 8009390:	fa0c fc08 	lsl.w	ip, ip, r8
 8009394:	ea4c 0707 	orr.w	r7, ip, r7
 8009398:	f849 7b04 	str.w	r7, [r9], #4
 800939c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093a0:	40cf      	lsrs	r7, r1
 80093a2:	e7d9      	b.n	8009358 <rshift+0x4c>
 80093a4:	f851 cb04 	ldr.w	ip, [r1], #4
 80093a8:	f847 cf04 	str.w	ip, [r7, #4]!
 80093ac:	e7c2      	b.n	8009334 <rshift+0x28>
 80093ae:	4623      	mov	r3, r4
 80093b0:	e7e0      	b.n	8009374 <rshift+0x68>

080093b2 <__hexdig_fun>:
 80093b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	d802      	bhi.n	80093c0 <__hexdig_fun+0xe>
 80093ba:	3820      	subs	r0, #32
 80093bc:	b2c0      	uxtb	r0, r0
 80093be:	4770      	bx	lr
 80093c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80093c4:	2b05      	cmp	r3, #5
 80093c6:	d801      	bhi.n	80093cc <__hexdig_fun+0x1a>
 80093c8:	3847      	subs	r0, #71	; 0x47
 80093ca:	e7f7      	b.n	80093bc <__hexdig_fun+0xa>
 80093cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80093d0:	2b05      	cmp	r3, #5
 80093d2:	d801      	bhi.n	80093d8 <__hexdig_fun+0x26>
 80093d4:	3827      	subs	r0, #39	; 0x27
 80093d6:	e7f1      	b.n	80093bc <__hexdig_fun+0xa>
 80093d8:	2000      	movs	r0, #0
 80093da:	4770      	bx	lr

080093dc <__gethex>:
 80093dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e0:	4681      	mov	r9, r0
 80093e2:	468a      	mov	sl, r1
 80093e4:	4617      	mov	r7, r2
 80093e6:	680a      	ldr	r2, [r1, #0]
 80093e8:	b085      	sub	sp, #20
 80093ea:	f102 0b02 	add.w	fp, r2, #2
 80093ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80093f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80093f6:	9302      	str	r3, [sp, #8]
 80093f8:	32fe      	adds	r2, #254	; 0xfe
 80093fa:	eb02 030b 	add.w	r3, r2, fp
 80093fe:	46d8      	mov	r8, fp
 8009400:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	2830      	cmp	r0, #48	; 0x30
 8009408:	d0f7      	beq.n	80093fa <__gethex+0x1e>
 800940a:	f7ff ffd2 	bl	80093b2 <__hexdig_fun>
 800940e:	4604      	mov	r4, r0
 8009410:	2800      	cmp	r0, #0
 8009412:	d138      	bne.n	8009486 <__gethex+0xaa>
 8009414:	2201      	movs	r2, #1
 8009416:	4640      	mov	r0, r8
 8009418:	49a7      	ldr	r1, [pc, #668]	; (80096b8 <__gethex+0x2dc>)
 800941a:	f7ff ff0e 	bl	800923a <strncmp>
 800941e:	4606      	mov	r6, r0
 8009420:	2800      	cmp	r0, #0
 8009422:	d169      	bne.n	80094f8 <__gethex+0x11c>
 8009424:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009428:	465d      	mov	r5, fp
 800942a:	f7ff ffc2 	bl	80093b2 <__hexdig_fun>
 800942e:	2800      	cmp	r0, #0
 8009430:	d064      	beq.n	80094fc <__gethex+0x120>
 8009432:	465a      	mov	r2, fp
 8009434:	7810      	ldrb	r0, [r2, #0]
 8009436:	4690      	mov	r8, r2
 8009438:	2830      	cmp	r0, #48	; 0x30
 800943a:	f102 0201 	add.w	r2, r2, #1
 800943e:	d0f9      	beq.n	8009434 <__gethex+0x58>
 8009440:	f7ff ffb7 	bl	80093b2 <__hexdig_fun>
 8009444:	2301      	movs	r3, #1
 8009446:	fab0 f480 	clz	r4, r0
 800944a:	465e      	mov	r6, fp
 800944c:	0964      	lsrs	r4, r4, #5
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	4642      	mov	r2, r8
 8009452:	4615      	mov	r5, r2
 8009454:	7828      	ldrb	r0, [r5, #0]
 8009456:	3201      	adds	r2, #1
 8009458:	f7ff ffab 	bl	80093b2 <__hexdig_fun>
 800945c:	2800      	cmp	r0, #0
 800945e:	d1f8      	bne.n	8009452 <__gethex+0x76>
 8009460:	2201      	movs	r2, #1
 8009462:	4628      	mov	r0, r5
 8009464:	4994      	ldr	r1, [pc, #592]	; (80096b8 <__gethex+0x2dc>)
 8009466:	f7ff fee8 	bl	800923a <strncmp>
 800946a:	b978      	cbnz	r0, 800948c <__gethex+0xb0>
 800946c:	b946      	cbnz	r6, 8009480 <__gethex+0xa4>
 800946e:	1c6e      	adds	r6, r5, #1
 8009470:	4632      	mov	r2, r6
 8009472:	4615      	mov	r5, r2
 8009474:	7828      	ldrb	r0, [r5, #0]
 8009476:	3201      	adds	r2, #1
 8009478:	f7ff ff9b 	bl	80093b2 <__hexdig_fun>
 800947c:	2800      	cmp	r0, #0
 800947e:	d1f8      	bne.n	8009472 <__gethex+0x96>
 8009480:	1b73      	subs	r3, r6, r5
 8009482:	009e      	lsls	r6, r3, #2
 8009484:	e004      	b.n	8009490 <__gethex+0xb4>
 8009486:	2400      	movs	r4, #0
 8009488:	4626      	mov	r6, r4
 800948a:	e7e1      	b.n	8009450 <__gethex+0x74>
 800948c:	2e00      	cmp	r6, #0
 800948e:	d1f7      	bne.n	8009480 <__gethex+0xa4>
 8009490:	782b      	ldrb	r3, [r5, #0]
 8009492:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009496:	2b50      	cmp	r3, #80	; 0x50
 8009498:	d13d      	bne.n	8009516 <__gethex+0x13a>
 800949a:	786b      	ldrb	r3, [r5, #1]
 800949c:	2b2b      	cmp	r3, #43	; 0x2b
 800949e:	d02f      	beq.n	8009500 <__gethex+0x124>
 80094a0:	2b2d      	cmp	r3, #45	; 0x2d
 80094a2:	d031      	beq.n	8009508 <__gethex+0x12c>
 80094a4:	f04f 0b00 	mov.w	fp, #0
 80094a8:	1c69      	adds	r1, r5, #1
 80094aa:	7808      	ldrb	r0, [r1, #0]
 80094ac:	f7ff ff81 	bl	80093b2 <__hexdig_fun>
 80094b0:	1e42      	subs	r2, r0, #1
 80094b2:	b2d2      	uxtb	r2, r2
 80094b4:	2a18      	cmp	r2, #24
 80094b6:	d82e      	bhi.n	8009516 <__gethex+0x13a>
 80094b8:	f1a0 0210 	sub.w	r2, r0, #16
 80094bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80094c0:	f7ff ff77 	bl	80093b2 <__hexdig_fun>
 80094c4:	f100 3cff 	add.w	ip, r0, #4294967295
 80094c8:	fa5f fc8c 	uxtb.w	ip, ip
 80094cc:	f1bc 0f18 	cmp.w	ip, #24
 80094d0:	d91d      	bls.n	800950e <__gethex+0x132>
 80094d2:	f1bb 0f00 	cmp.w	fp, #0
 80094d6:	d000      	beq.n	80094da <__gethex+0xfe>
 80094d8:	4252      	negs	r2, r2
 80094da:	4416      	add	r6, r2
 80094dc:	f8ca 1000 	str.w	r1, [sl]
 80094e0:	b1dc      	cbz	r4, 800951a <__gethex+0x13e>
 80094e2:	9b01      	ldr	r3, [sp, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	bf14      	ite	ne
 80094e8:	f04f 0800 	movne.w	r8, #0
 80094ec:	f04f 0806 	moveq.w	r8, #6
 80094f0:	4640      	mov	r0, r8
 80094f2:	b005      	add	sp, #20
 80094f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f8:	4645      	mov	r5, r8
 80094fa:	4626      	mov	r6, r4
 80094fc:	2401      	movs	r4, #1
 80094fe:	e7c7      	b.n	8009490 <__gethex+0xb4>
 8009500:	f04f 0b00 	mov.w	fp, #0
 8009504:	1ca9      	adds	r1, r5, #2
 8009506:	e7d0      	b.n	80094aa <__gethex+0xce>
 8009508:	f04f 0b01 	mov.w	fp, #1
 800950c:	e7fa      	b.n	8009504 <__gethex+0x128>
 800950e:	230a      	movs	r3, #10
 8009510:	fb03 0002 	mla	r0, r3, r2, r0
 8009514:	e7d0      	b.n	80094b8 <__gethex+0xdc>
 8009516:	4629      	mov	r1, r5
 8009518:	e7e0      	b.n	80094dc <__gethex+0x100>
 800951a:	4621      	mov	r1, r4
 800951c:	eba5 0308 	sub.w	r3, r5, r8
 8009520:	3b01      	subs	r3, #1
 8009522:	2b07      	cmp	r3, #7
 8009524:	dc0a      	bgt.n	800953c <__gethex+0x160>
 8009526:	4648      	mov	r0, r9
 8009528:	f7fd fda2 	bl	8007070 <_Balloc>
 800952c:	4604      	mov	r4, r0
 800952e:	b940      	cbnz	r0, 8009542 <__gethex+0x166>
 8009530:	4602      	mov	r2, r0
 8009532:	21e4      	movs	r1, #228	; 0xe4
 8009534:	4b61      	ldr	r3, [pc, #388]	; (80096bc <__gethex+0x2e0>)
 8009536:	4862      	ldr	r0, [pc, #392]	; (80096c0 <__gethex+0x2e4>)
 8009538:	f7ff feb6 	bl	80092a8 <__assert_func>
 800953c:	3101      	adds	r1, #1
 800953e:	105b      	asrs	r3, r3, #1
 8009540:	e7ef      	b.n	8009522 <__gethex+0x146>
 8009542:	2300      	movs	r3, #0
 8009544:	469b      	mov	fp, r3
 8009546:	f100 0a14 	add.w	sl, r0, #20
 800954a:	f8cd a004 	str.w	sl, [sp, #4]
 800954e:	45a8      	cmp	r8, r5
 8009550:	d344      	bcc.n	80095dc <__gethex+0x200>
 8009552:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009556:	4658      	mov	r0, fp
 8009558:	f848 bb04 	str.w	fp, [r8], #4
 800955c:	eba8 080a 	sub.w	r8, r8, sl
 8009560:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009564:	6122      	str	r2, [r4, #16]
 8009566:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800956a:	f7fd fe73 	bl	8007254 <__hi0bits>
 800956e:	683d      	ldr	r5, [r7, #0]
 8009570:	eba8 0800 	sub.w	r8, r8, r0
 8009574:	45a8      	cmp	r8, r5
 8009576:	dd59      	ble.n	800962c <__gethex+0x250>
 8009578:	eba8 0805 	sub.w	r8, r8, r5
 800957c:	4641      	mov	r1, r8
 800957e:	4620      	mov	r0, r4
 8009580:	f7fe f9f1 	bl	8007966 <__any_on>
 8009584:	4683      	mov	fp, r0
 8009586:	b1b8      	cbz	r0, 80095b8 <__gethex+0x1dc>
 8009588:	f04f 0b01 	mov.w	fp, #1
 800958c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009590:	1159      	asrs	r1, r3, #5
 8009592:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009596:	f003 021f 	and.w	r2, r3, #31
 800959a:	fa0b f202 	lsl.w	r2, fp, r2
 800959e:	420a      	tst	r2, r1
 80095a0:	d00a      	beq.n	80095b8 <__gethex+0x1dc>
 80095a2:	455b      	cmp	r3, fp
 80095a4:	dd06      	ble.n	80095b4 <__gethex+0x1d8>
 80095a6:	4620      	mov	r0, r4
 80095a8:	f1a8 0102 	sub.w	r1, r8, #2
 80095ac:	f7fe f9db 	bl	8007966 <__any_on>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d138      	bne.n	8009626 <__gethex+0x24a>
 80095b4:	f04f 0b02 	mov.w	fp, #2
 80095b8:	4641      	mov	r1, r8
 80095ba:	4620      	mov	r0, r4
 80095bc:	f7ff fea6 	bl	800930c <rshift>
 80095c0:	4446      	add	r6, r8
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	42b3      	cmp	r3, r6
 80095c6:	da41      	bge.n	800964c <__gethex+0x270>
 80095c8:	4621      	mov	r1, r4
 80095ca:	4648      	mov	r0, r9
 80095cc:	f7fd fd90 	bl	80070f0 <_Bfree>
 80095d0:	2300      	movs	r3, #0
 80095d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095d4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	e789      	b.n	80094f0 <__gethex+0x114>
 80095dc:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80095e0:	2a2e      	cmp	r2, #46	; 0x2e
 80095e2:	d014      	beq.n	800960e <__gethex+0x232>
 80095e4:	2b20      	cmp	r3, #32
 80095e6:	d106      	bne.n	80095f6 <__gethex+0x21a>
 80095e8:	9b01      	ldr	r3, [sp, #4]
 80095ea:	f843 bb04 	str.w	fp, [r3], #4
 80095ee:	f04f 0b00 	mov.w	fp, #0
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	465b      	mov	r3, fp
 80095f6:	7828      	ldrb	r0, [r5, #0]
 80095f8:	9303      	str	r3, [sp, #12]
 80095fa:	f7ff feda 	bl	80093b2 <__hexdig_fun>
 80095fe:	9b03      	ldr	r3, [sp, #12]
 8009600:	f000 000f 	and.w	r0, r0, #15
 8009604:	4098      	lsls	r0, r3
 8009606:	ea4b 0b00 	orr.w	fp, fp, r0
 800960a:	3304      	adds	r3, #4
 800960c:	e79f      	b.n	800954e <__gethex+0x172>
 800960e:	45a8      	cmp	r8, r5
 8009610:	d8e8      	bhi.n	80095e4 <__gethex+0x208>
 8009612:	2201      	movs	r2, #1
 8009614:	4628      	mov	r0, r5
 8009616:	4928      	ldr	r1, [pc, #160]	; (80096b8 <__gethex+0x2dc>)
 8009618:	9303      	str	r3, [sp, #12]
 800961a:	f7ff fe0e 	bl	800923a <strncmp>
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	2800      	cmp	r0, #0
 8009622:	d1df      	bne.n	80095e4 <__gethex+0x208>
 8009624:	e793      	b.n	800954e <__gethex+0x172>
 8009626:	f04f 0b03 	mov.w	fp, #3
 800962a:	e7c5      	b.n	80095b8 <__gethex+0x1dc>
 800962c:	da0b      	bge.n	8009646 <__gethex+0x26a>
 800962e:	eba5 0808 	sub.w	r8, r5, r8
 8009632:	4621      	mov	r1, r4
 8009634:	4642      	mov	r2, r8
 8009636:	4648      	mov	r0, r9
 8009638:	f7fd ff72 	bl	8007520 <__lshift>
 800963c:	4604      	mov	r4, r0
 800963e:	eba6 0608 	sub.w	r6, r6, r8
 8009642:	f100 0a14 	add.w	sl, r0, #20
 8009646:	f04f 0b00 	mov.w	fp, #0
 800964a:	e7ba      	b.n	80095c2 <__gethex+0x1e6>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	42b3      	cmp	r3, r6
 8009650:	dd74      	ble.n	800973c <__gethex+0x360>
 8009652:	1b9e      	subs	r6, r3, r6
 8009654:	42b5      	cmp	r5, r6
 8009656:	dc35      	bgt.n	80096c4 <__gethex+0x2e8>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2b02      	cmp	r3, #2
 800965c:	d023      	beq.n	80096a6 <__gethex+0x2ca>
 800965e:	2b03      	cmp	r3, #3
 8009660:	d025      	beq.n	80096ae <__gethex+0x2d2>
 8009662:	2b01      	cmp	r3, #1
 8009664:	d115      	bne.n	8009692 <__gethex+0x2b6>
 8009666:	42b5      	cmp	r5, r6
 8009668:	d113      	bne.n	8009692 <__gethex+0x2b6>
 800966a:	2d01      	cmp	r5, #1
 800966c:	d10b      	bne.n	8009686 <__gethex+0x2aa>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	9a02      	ldr	r2, [sp, #8]
 8009672:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	2301      	movs	r3, #1
 800967a:	6123      	str	r3, [r4, #16]
 800967c:	f8ca 3000 	str.w	r3, [sl]
 8009680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009682:	601c      	str	r4, [r3, #0]
 8009684:	e734      	b.n	80094f0 <__gethex+0x114>
 8009686:	4620      	mov	r0, r4
 8009688:	1e69      	subs	r1, r5, #1
 800968a:	f7fe f96c 	bl	8007966 <__any_on>
 800968e:	2800      	cmp	r0, #0
 8009690:	d1ed      	bne.n	800966e <__gethex+0x292>
 8009692:	4621      	mov	r1, r4
 8009694:	4648      	mov	r0, r9
 8009696:	f7fd fd2b 	bl	80070f0 <_Bfree>
 800969a:	2300      	movs	r3, #0
 800969c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800969e:	f04f 0850 	mov.w	r8, #80	; 0x50
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	e724      	b.n	80094f0 <__gethex+0x114>
 80096a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1f2      	bne.n	8009692 <__gethex+0x2b6>
 80096ac:	e7df      	b.n	800966e <__gethex+0x292>
 80096ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1dc      	bne.n	800966e <__gethex+0x292>
 80096b4:	e7ed      	b.n	8009692 <__gethex+0x2b6>
 80096b6:	bf00      	nop
 80096b8:	0800a374 	.word	0x0800a374
 80096bc:	0800a20d 	.word	0x0800a20d
 80096c0:	0800a539 	.word	0x0800a539
 80096c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80096c8:	f1bb 0f00 	cmp.w	fp, #0
 80096cc:	d133      	bne.n	8009736 <__gethex+0x35a>
 80096ce:	f1b8 0f00 	cmp.w	r8, #0
 80096d2:	d004      	beq.n	80096de <__gethex+0x302>
 80096d4:	4641      	mov	r1, r8
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7fe f945 	bl	8007966 <__any_on>
 80096dc:	4683      	mov	fp, r0
 80096de:	2301      	movs	r3, #1
 80096e0:	ea4f 1268 	mov.w	r2, r8, asr #5
 80096e4:	f008 081f 	and.w	r8, r8, #31
 80096e8:	fa03 f308 	lsl.w	r3, r3, r8
 80096ec:	f04f 0802 	mov.w	r8, #2
 80096f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80096f4:	4631      	mov	r1, r6
 80096f6:	4213      	tst	r3, r2
 80096f8:	4620      	mov	r0, r4
 80096fa:	bf18      	it	ne
 80096fc:	f04b 0b02 	orrne.w	fp, fp, #2
 8009700:	1bad      	subs	r5, r5, r6
 8009702:	f7ff fe03 	bl	800930c <rshift>
 8009706:	687e      	ldr	r6, [r7, #4]
 8009708:	f1bb 0f00 	cmp.w	fp, #0
 800970c:	d04a      	beq.n	80097a4 <__gethex+0x3c8>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d016      	beq.n	8009742 <__gethex+0x366>
 8009714:	2b03      	cmp	r3, #3
 8009716:	d018      	beq.n	800974a <__gethex+0x36e>
 8009718:	2b01      	cmp	r3, #1
 800971a:	d109      	bne.n	8009730 <__gethex+0x354>
 800971c:	f01b 0f02 	tst.w	fp, #2
 8009720:	d006      	beq.n	8009730 <__gethex+0x354>
 8009722:	f8da 3000 	ldr.w	r3, [sl]
 8009726:	ea4b 0b03 	orr.w	fp, fp, r3
 800972a:	f01b 0f01 	tst.w	fp, #1
 800972e:	d10f      	bne.n	8009750 <__gethex+0x374>
 8009730:	f048 0810 	orr.w	r8, r8, #16
 8009734:	e036      	b.n	80097a4 <__gethex+0x3c8>
 8009736:	f04f 0b01 	mov.w	fp, #1
 800973a:	e7d0      	b.n	80096de <__gethex+0x302>
 800973c:	f04f 0801 	mov.w	r8, #1
 8009740:	e7e2      	b.n	8009708 <__gethex+0x32c>
 8009742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009744:	f1c3 0301 	rsb	r3, r3, #1
 8009748:	930f      	str	r3, [sp, #60]	; 0x3c
 800974a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d0ef      	beq.n	8009730 <__gethex+0x354>
 8009750:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009754:	f104 0214 	add.w	r2, r4, #20
 8009758:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	2300      	movs	r3, #0
 8009760:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009764:	4694      	mov	ip, r2
 8009766:	f852 1b04 	ldr.w	r1, [r2], #4
 800976a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800976e:	d01e      	beq.n	80097ae <__gethex+0x3d2>
 8009770:	3101      	adds	r1, #1
 8009772:	f8cc 1000 	str.w	r1, [ip]
 8009776:	f1b8 0f02 	cmp.w	r8, #2
 800977a:	f104 0214 	add.w	r2, r4, #20
 800977e:	d13d      	bne.n	80097fc <__gethex+0x420>
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	3b01      	subs	r3, #1
 8009784:	42ab      	cmp	r3, r5
 8009786:	d10b      	bne.n	80097a0 <__gethex+0x3c4>
 8009788:	2301      	movs	r3, #1
 800978a:	1169      	asrs	r1, r5, #5
 800978c:	f005 051f 	and.w	r5, r5, #31
 8009790:	fa03 f505 	lsl.w	r5, r3, r5
 8009794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009798:	421d      	tst	r5, r3
 800979a:	bf18      	it	ne
 800979c:	f04f 0801 	movne.w	r8, #1
 80097a0:	f048 0820 	orr.w	r8, r8, #32
 80097a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097a6:	601c      	str	r4, [r3, #0]
 80097a8:	9b02      	ldr	r3, [sp, #8]
 80097aa:	601e      	str	r6, [r3, #0]
 80097ac:	e6a0      	b.n	80094f0 <__gethex+0x114>
 80097ae:	4290      	cmp	r0, r2
 80097b0:	f842 3c04 	str.w	r3, [r2, #-4]
 80097b4:	d8d6      	bhi.n	8009764 <__gethex+0x388>
 80097b6:	68a2      	ldr	r2, [r4, #8]
 80097b8:	4593      	cmp	fp, r2
 80097ba:	db17      	blt.n	80097ec <__gethex+0x410>
 80097bc:	6861      	ldr	r1, [r4, #4]
 80097be:	4648      	mov	r0, r9
 80097c0:	3101      	adds	r1, #1
 80097c2:	f7fd fc55 	bl	8007070 <_Balloc>
 80097c6:	4682      	mov	sl, r0
 80097c8:	b918      	cbnz	r0, 80097d2 <__gethex+0x3f6>
 80097ca:	4602      	mov	r2, r0
 80097cc:	2184      	movs	r1, #132	; 0x84
 80097ce:	4b1a      	ldr	r3, [pc, #104]	; (8009838 <__gethex+0x45c>)
 80097d0:	e6b1      	b.n	8009536 <__gethex+0x15a>
 80097d2:	6922      	ldr	r2, [r4, #16]
 80097d4:	f104 010c 	add.w	r1, r4, #12
 80097d8:	3202      	adds	r2, #2
 80097da:	0092      	lsls	r2, r2, #2
 80097dc:	300c      	adds	r0, #12
 80097de:	f7ff fd4f 	bl	8009280 <memcpy>
 80097e2:	4621      	mov	r1, r4
 80097e4:	4648      	mov	r0, r9
 80097e6:	f7fd fc83 	bl	80070f0 <_Bfree>
 80097ea:	4654      	mov	r4, sl
 80097ec:	6922      	ldr	r2, [r4, #16]
 80097ee:	1c51      	adds	r1, r2, #1
 80097f0:	6121      	str	r1, [r4, #16]
 80097f2:	2101      	movs	r1, #1
 80097f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80097f8:	6151      	str	r1, [r2, #20]
 80097fa:	e7bc      	b.n	8009776 <__gethex+0x39a>
 80097fc:	6921      	ldr	r1, [r4, #16]
 80097fe:	4559      	cmp	r1, fp
 8009800:	dd0b      	ble.n	800981a <__gethex+0x43e>
 8009802:	2101      	movs	r1, #1
 8009804:	4620      	mov	r0, r4
 8009806:	f7ff fd81 	bl	800930c <rshift>
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	3601      	adds	r6, #1
 800980e:	42b3      	cmp	r3, r6
 8009810:	f6ff aeda 	blt.w	80095c8 <__gethex+0x1ec>
 8009814:	f04f 0801 	mov.w	r8, #1
 8009818:	e7c2      	b.n	80097a0 <__gethex+0x3c4>
 800981a:	f015 051f 	ands.w	r5, r5, #31
 800981e:	d0f9      	beq.n	8009814 <__gethex+0x438>
 8009820:	9b01      	ldr	r3, [sp, #4]
 8009822:	f1c5 0520 	rsb	r5, r5, #32
 8009826:	441a      	add	r2, r3
 8009828:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800982c:	f7fd fd12 	bl	8007254 <__hi0bits>
 8009830:	42a8      	cmp	r0, r5
 8009832:	dbe6      	blt.n	8009802 <__gethex+0x426>
 8009834:	e7ee      	b.n	8009814 <__gethex+0x438>
 8009836:	bf00      	nop
 8009838:	0800a20d 	.word	0x0800a20d

0800983c <L_shift>:
 800983c:	f1c2 0208 	rsb	r2, r2, #8
 8009840:	0092      	lsls	r2, r2, #2
 8009842:	b570      	push	{r4, r5, r6, lr}
 8009844:	f1c2 0620 	rsb	r6, r2, #32
 8009848:	6843      	ldr	r3, [r0, #4]
 800984a:	6804      	ldr	r4, [r0, #0]
 800984c:	fa03 f506 	lsl.w	r5, r3, r6
 8009850:	432c      	orrs	r4, r5
 8009852:	40d3      	lsrs	r3, r2
 8009854:	6004      	str	r4, [r0, #0]
 8009856:	f840 3f04 	str.w	r3, [r0, #4]!
 800985a:	4288      	cmp	r0, r1
 800985c:	d3f4      	bcc.n	8009848 <L_shift+0xc>
 800985e:	bd70      	pop	{r4, r5, r6, pc}

08009860 <__match>:
 8009860:	b530      	push	{r4, r5, lr}
 8009862:	6803      	ldr	r3, [r0, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800986a:	b914      	cbnz	r4, 8009872 <__match+0x12>
 800986c:	6003      	str	r3, [r0, #0]
 800986e:	2001      	movs	r0, #1
 8009870:	bd30      	pop	{r4, r5, pc}
 8009872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009876:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800987a:	2d19      	cmp	r5, #25
 800987c:	bf98      	it	ls
 800987e:	3220      	addls	r2, #32
 8009880:	42a2      	cmp	r2, r4
 8009882:	d0f0      	beq.n	8009866 <__match+0x6>
 8009884:	2000      	movs	r0, #0
 8009886:	e7f3      	b.n	8009870 <__match+0x10>

08009888 <__hexnan>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	2500      	movs	r5, #0
 800988e:	680b      	ldr	r3, [r1, #0]
 8009890:	4682      	mov	sl, r0
 8009892:	115e      	asrs	r6, r3, #5
 8009894:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009898:	f013 031f 	ands.w	r3, r3, #31
 800989c:	bf18      	it	ne
 800989e:	3604      	addne	r6, #4
 80098a0:	1f37      	subs	r7, r6, #4
 80098a2:	4690      	mov	r8, r2
 80098a4:	46b9      	mov	r9, r7
 80098a6:	463c      	mov	r4, r7
 80098a8:	46ab      	mov	fp, r5
 80098aa:	b087      	sub	sp, #28
 80098ac:	6801      	ldr	r1, [r0, #0]
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	f846 5c04 	str.w	r5, [r6, #-4]
 80098b4:	9502      	str	r5, [sp, #8]
 80098b6:	784a      	ldrb	r2, [r1, #1]
 80098b8:	1c4b      	adds	r3, r1, #1
 80098ba:	9303      	str	r3, [sp, #12]
 80098bc:	b342      	cbz	r2, 8009910 <__hexnan+0x88>
 80098be:	4610      	mov	r0, r2
 80098c0:	9105      	str	r1, [sp, #20]
 80098c2:	9204      	str	r2, [sp, #16]
 80098c4:	f7ff fd75 	bl	80093b2 <__hexdig_fun>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d14f      	bne.n	800996c <__hexnan+0xe4>
 80098cc:	9a04      	ldr	r2, [sp, #16]
 80098ce:	9905      	ldr	r1, [sp, #20]
 80098d0:	2a20      	cmp	r2, #32
 80098d2:	d818      	bhi.n	8009906 <__hexnan+0x7e>
 80098d4:	9b02      	ldr	r3, [sp, #8]
 80098d6:	459b      	cmp	fp, r3
 80098d8:	dd13      	ble.n	8009902 <__hexnan+0x7a>
 80098da:	454c      	cmp	r4, r9
 80098dc:	d206      	bcs.n	80098ec <__hexnan+0x64>
 80098de:	2d07      	cmp	r5, #7
 80098e0:	dc04      	bgt.n	80098ec <__hexnan+0x64>
 80098e2:	462a      	mov	r2, r5
 80098e4:	4649      	mov	r1, r9
 80098e6:	4620      	mov	r0, r4
 80098e8:	f7ff ffa8 	bl	800983c <L_shift>
 80098ec:	4544      	cmp	r4, r8
 80098ee:	d950      	bls.n	8009992 <__hexnan+0x10a>
 80098f0:	2300      	movs	r3, #0
 80098f2:	f1a4 0904 	sub.w	r9, r4, #4
 80098f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80098fa:	461d      	mov	r5, r3
 80098fc:	464c      	mov	r4, r9
 80098fe:	f8cd b008 	str.w	fp, [sp, #8]
 8009902:	9903      	ldr	r1, [sp, #12]
 8009904:	e7d7      	b.n	80098b6 <__hexnan+0x2e>
 8009906:	2a29      	cmp	r2, #41	; 0x29
 8009908:	d155      	bne.n	80099b6 <__hexnan+0x12e>
 800990a:	3102      	adds	r1, #2
 800990c:	f8ca 1000 	str.w	r1, [sl]
 8009910:	f1bb 0f00 	cmp.w	fp, #0
 8009914:	d04f      	beq.n	80099b6 <__hexnan+0x12e>
 8009916:	454c      	cmp	r4, r9
 8009918:	d206      	bcs.n	8009928 <__hexnan+0xa0>
 800991a:	2d07      	cmp	r5, #7
 800991c:	dc04      	bgt.n	8009928 <__hexnan+0xa0>
 800991e:	462a      	mov	r2, r5
 8009920:	4649      	mov	r1, r9
 8009922:	4620      	mov	r0, r4
 8009924:	f7ff ff8a 	bl	800983c <L_shift>
 8009928:	4544      	cmp	r4, r8
 800992a:	d934      	bls.n	8009996 <__hexnan+0x10e>
 800992c:	4623      	mov	r3, r4
 800992e:	f1a8 0204 	sub.w	r2, r8, #4
 8009932:	f853 1b04 	ldr.w	r1, [r3], #4
 8009936:	429f      	cmp	r7, r3
 8009938:	f842 1f04 	str.w	r1, [r2, #4]!
 800993c:	d2f9      	bcs.n	8009932 <__hexnan+0xaa>
 800993e:	1b3b      	subs	r3, r7, r4
 8009940:	f023 0303 	bic.w	r3, r3, #3
 8009944:	3304      	adds	r3, #4
 8009946:	3e03      	subs	r6, #3
 8009948:	3401      	adds	r4, #1
 800994a:	42a6      	cmp	r6, r4
 800994c:	bf38      	it	cc
 800994e:	2304      	movcc	r3, #4
 8009950:	2200      	movs	r2, #0
 8009952:	4443      	add	r3, r8
 8009954:	f843 2b04 	str.w	r2, [r3], #4
 8009958:	429f      	cmp	r7, r3
 800995a:	d2fb      	bcs.n	8009954 <__hexnan+0xcc>
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	b91b      	cbnz	r3, 8009968 <__hexnan+0xe0>
 8009960:	4547      	cmp	r7, r8
 8009962:	d126      	bne.n	80099b2 <__hexnan+0x12a>
 8009964:	2301      	movs	r3, #1
 8009966:	603b      	str	r3, [r7, #0]
 8009968:	2005      	movs	r0, #5
 800996a:	e025      	b.n	80099b8 <__hexnan+0x130>
 800996c:	3501      	adds	r5, #1
 800996e:	2d08      	cmp	r5, #8
 8009970:	f10b 0b01 	add.w	fp, fp, #1
 8009974:	dd06      	ble.n	8009984 <__hexnan+0xfc>
 8009976:	4544      	cmp	r4, r8
 8009978:	d9c3      	bls.n	8009902 <__hexnan+0x7a>
 800997a:	2300      	movs	r3, #0
 800997c:	2501      	movs	r5, #1
 800997e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009982:	3c04      	subs	r4, #4
 8009984:	6822      	ldr	r2, [r4, #0]
 8009986:	f000 000f 	and.w	r0, r0, #15
 800998a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800998e:	6020      	str	r0, [r4, #0]
 8009990:	e7b7      	b.n	8009902 <__hexnan+0x7a>
 8009992:	2508      	movs	r5, #8
 8009994:	e7b5      	b.n	8009902 <__hexnan+0x7a>
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d0df      	beq.n	800995c <__hexnan+0xd4>
 800999c:	f04f 32ff 	mov.w	r2, #4294967295
 80099a0:	f1c3 0320 	rsb	r3, r3, #32
 80099a4:	40da      	lsrs	r2, r3
 80099a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80099aa:	4013      	ands	r3, r2
 80099ac:	f846 3c04 	str.w	r3, [r6, #-4]
 80099b0:	e7d4      	b.n	800995c <__hexnan+0xd4>
 80099b2:	3f04      	subs	r7, #4
 80099b4:	e7d2      	b.n	800995c <__hexnan+0xd4>
 80099b6:	2004      	movs	r0, #4
 80099b8:	b007      	add	sp, #28
 80099ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099be <__ascii_mbtowc>:
 80099be:	b082      	sub	sp, #8
 80099c0:	b901      	cbnz	r1, 80099c4 <__ascii_mbtowc+0x6>
 80099c2:	a901      	add	r1, sp, #4
 80099c4:	b142      	cbz	r2, 80099d8 <__ascii_mbtowc+0x1a>
 80099c6:	b14b      	cbz	r3, 80099dc <__ascii_mbtowc+0x1e>
 80099c8:	7813      	ldrb	r3, [r2, #0]
 80099ca:	600b      	str	r3, [r1, #0]
 80099cc:	7812      	ldrb	r2, [r2, #0]
 80099ce:	1e10      	subs	r0, r2, #0
 80099d0:	bf18      	it	ne
 80099d2:	2001      	movne	r0, #1
 80099d4:	b002      	add	sp, #8
 80099d6:	4770      	bx	lr
 80099d8:	4610      	mov	r0, r2
 80099da:	e7fb      	b.n	80099d4 <__ascii_mbtowc+0x16>
 80099dc:	f06f 0001 	mvn.w	r0, #1
 80099e0:	e7f8      	b.n	80099d4 <__ascii_mbtowc+0x16>

080099e2 <_realloc_r>:
 80099e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e6:	4680      	mov	r8, r0
 80099e8:	4614      	mov	r4, r2
 80099ea:	460e      	mov	r6, r1
 80099ec:	b921      	cbnz	r1, 80099f8 <_realloc_r+0x16>
 80099ee:	4611      	mov	r1, r2
 80099f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f4:	f7fd bab0 	b.w	8006f58 <_malloc_r>
 80099f8:	b92a      	cbnz	r2, 8009a06 <_realloc_r+0x24>
 80099fa:	f7fd fa3d 	bl	8006e78 <_free_r>
 80099fe:	4625      	mov	r5, r4
 8009a00:	4628      	mov	r0, r5
 8009a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a06:	f000 f8b6 	bl	8009b76 <_malloc_usable_size_r>
 8009a0a:	4284      	cmp	r4, r0
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	d802      	bhi.n	8009a16 <_realloc_r+0x34>
 8009a10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a14:	d812      	bhi.n	8009a3c <_realloc_r+0x5a>
 8009a16:	4621      	mov	r1, r4
 8009a18:	4640      	mov	r0, r8
 8009a1a:	f7fd fa9d 	bl	8006f58 <_malloc_r>
 8009a1e:	4605      	mov	r5, r0
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d0ed      	beq.n	8009a00 <_realloc_r+0x1e>
 8009a24:	42bc      	cmp	r4, r7
 8009a26:	4622      	mov	r2, r4
 8009a28:	4631      	mov	r1, r6
 8009a2a:	bf28      	it	cs
 8009a2c:	463a      	movcs	r2, r7
 8009a2e:	f7ff fc27 	bl	8009280 <memcpy>
 8009a32:	4631      	mov	r1, r6
 8009a34:	4640      	mov	r0, r8
 8009a36:	f7fd fa1f 	bl	8006e78 <_free_r>
 8009a3a:	e7e1      	b.n	8009a00 <_realloc_r+0x1e>
 8009a3c:	4635      	mov	r5, r6
 8009a3e:	e7df      	b.n	8009a00 <_realloc_r+0x1e>

08009a40 <_strtoul_l.constprop.0>:
 8009a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a44:	4686      	mov	lr, r0
 8009a46:	460d      	mov	r5, r1
 8009a48:	4f35      	ldr	r7, [pc, #212]	; (8009b20 <_strtoul_l.constprop.0+0xe0>)
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a50:	5d3e      	ldrb	r6, [r7, r4]
 8009a52:	f016 0608 	ands.w	r6, r6, #8
 8009a56:	d1f8      	bne.n	8009a4a <_strtoul_l.constprop.0+0xa>
 8009a58:	2c2d      	cmp	r4, #45	; 0x2d
 8009a5a:	d130      	bne.n	8009abe <_strtoul_l.constprop.0+0x7e>
 8009a5c:	2601      	movs	r6, #1
 8009a5e:	782c      	ldrb	r4, [r5, #0]
 8009a60:	1c85      	adds	r5, r0, #2
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d057      	beq.n	8009b16 <_strtoul_l.constprop.0+0xd6>
 8009a66:	2b10      	cmp	r3, #16
 8009a68:	d109      	bne.n	8009a7e <_strtoul_l.constprop.0+0x3e>
 8009a6a:	2c30      	cmp	r4, #48	; 0x30
 8009a6c:	d107      	bne.n	8009a7e <_strtoul_l.constprop.0+0x3e>
 8009a6e:	7828      	ldrb	r0, [r5, #0]
 8009a70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009a74:	2858      	cmp	r0, #88	; 0x58
 8009a76:	d149      	bne.n	8009b0c <_strtoul_l.constprop.0+0xcc>
 8009a78:	2310      	movs	r3, #16
 8009a7a:	786c      	ldrb	r4, [r5, #1]
 8009a7c:	3502      	adds	r5, #2
 8009a7e:	f04f 38ff 	mov.w	r8, #4294967295
 8009a82:	fbb8 f8f3 	udiv	r8, r8, r3
 8009a86:	2700      	movs	r7, #0
 8009a88:	fb03 f908 	mul.w	r9, r3, r8
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	ea6f 0909 	mvn.w	r9, r9
 8009a92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009a96:	f1bc 0f09 	cmp.w	ip, #9
 8009a9a:	d815      	bhi.n	8009ac8 <_strtoul_l.constprop.0+0x88>
 8009a9c:	4664      	mov	r4, ip
 8009a9e:	42a3      	cmp	r3, r4
 8009aa0:	dd23      	ble.n	8009aea <_strtoul_l.constprop.0+0xaa>
 8009aa2:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009aa6:	d007      	beq.n	8009ab8 <_strtoul_l.constprop.0+0x78>
 8009aa8:	4580      	cmp	r8, r0
 8009aaa:	d31b      	bcc.n	8009ae4 <_strtoul_l.constprop.0+0xa4>
 8009aac:	d101      	bne.n	8009ab2 <_strtoul_l.constprop.0+0x72>
 8009aae:	45a1      	cmp	r9, r4
 8009ab0:	db18      	blt.n	8009ae4 <_strtoul_l.constprop.0+0xa4>
 8009ab2:	2701      	movs	r7, #1
 8009ab4:	fb00 4003 	mla	r0, r0, r3, r4
 8009ab8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009abc:	e7e9      	b.n	8009a92 <_strtoul_l.constprop.0+0x52>
 8009abe:	2c2b      	cmp	r4, #43	; 0x2b
 8009ac0:	bf04      	itt	eq
 8009ac2:	782c      	ldrbeq	r4, [r5, #0]
 8009ac4:	1c85      	addeq	r5, r0, #2
 8009ac6:	e7cc      	b.n	8009a62 <_strtoul_l.constprop.0+0x22>
 8009ac8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009acc:	f1bc 0f19 	cmp.w	ip, #25
 8009ad0:	d801      	bhi.n	8009ad6 <_strtoul_l.constprop.0+0x96>
 8009ad2:	3c37      	subs	r4, #55	; 0x37
 8009ad4:	e7e3      	b.n	8009a9e <_strtoul_l.constprop.0+0x5e>
 8009ad6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009ada:	f1bc 0f19 	cmp.w	ip, #25
 8009ade:	d804      	bhi.n	8009aea <_strtoul_l.constprop.0+0xaa>
 8009ae0:	3c57      	subs	r4, #87	; 0x57
 8009ae2:	e7dc      	b.n	8009a9e <_strtoul_l.constprop.0+0x5e>
 8009ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ae8:	e7e6      	b.n	8009ab8 <_strtoul_l.constprop.0+0x78>
 8009aea:	1c7b      	adds	r3, r7, #1
 8009aec:	d106      	bne.n	8009afc <_strtoul_l.constprop.0+0xbc>
 8009aee:	2322      	movs	r3, #34	; 0x22
 8009af0:	4638      	mov	r0, r7
 8009af2:	f8ce 3000 	str.w	r3, [lr]
 8009af6:	b932      	cbnz	r2, 8009b06 <_strtoul_l.constprop.0+0xc6>
 8009af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009afc:	b106      	cbz	r6, 8009b00 <_strtoul_l.constprop.0+0xc0>
 8009afe:	4240      	negs	r0, r0
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	d0f9      	beq.n	8009af8 <_strtoul_l.constprop.0+0xb8>
 8009b04:	b107      	cbz	r7, 8009b08 <_strtoul_l.constprop.0+0xc8>
 8009b06:	1e69      	subs	r1, r5, #1
 8009b08:	6011      	str	r1, [r2, #0]
 8009b0a:	e7f5      	b.n	8009af8 <_strtoul_l.constprop.0+0xb8>
 8009b0c:	2430      	movs	r4, #48	; 0x30
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1b5      	bne.n	8009a7e <_strtoul_l.constprop.0+0x3e>
 8009b12:	2308      	movs	r3, #8
 8009b14:	e7b3      	b.n	8009a7e <_strtoul_l.constprop.0+0x3e>
 8009b16:	2c30      	cmp	r4, #48	; 0x30
 8009b18:	d0a9      	beq.n	8009a6e <_strtoul_l.constprop.0+0x2e>
 8009b1a:	230a      	movs	r3, #10
 8009b1c:	e7af      	b.n	8009a7e <_strtoul_l.constprop.0+0x3e>
 8009b1e:	bf00      	nop
 8009b20:	0800a3c9 	.word	0x0800a3c9

08009b24 <_strtoul_r>:
 8009b24:	f7ff bf8c 	b.w	8009a40 <_strtoul_l.constprop.0>

08009b28 <__ascii_wctomb>:
 8009b28:	4603      	mov	r3, r0
 8009b2a:	4608      	mov	r0, r1
 8009b2c:	b141      	cbz	r1, 8009b40 <__ascii_wctomb+0x18>
 8009b2e:	2aff      	cmp	r2, #255	; 0xff
 8009b30:	d904      	bls.n	8009b3c <__ascii_wctomb+0x14>
 8009b32:	228a      	movs	r2, #138	; 0x8a
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	4770      	bx	lr
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	700a      	strb	r2, [r1, #0]
 8009b40:	4770      	bx	lr
	...

08009b44 <fiprintf>:
 8009b44:	b40e      	push	{r1, r2, r3}
 8009b46:	b503      	push	{r0, r1, lr}
 8009b48:	4601      	mov	r1, r0
 8009b4a:	ab03      	add	r3, sp, #12
 8009b4c:	4805      	ldr	r0, [pc, #20]	; (8009b64 <fiprintf+0x20>)
 8009b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b52:	6800      	ldr	r0, [r0, #0]
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	f000 f83d 	bl	8009bd4 <_vfiprintf_r>
 8009b5a:	b002      	add	sp, #8
 8009b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b60:	b003      	add	sp, #12
 8009b62:	4770      	bx	lr
 8009b64:	20000064 	.word	0x20000064

08009b68 <abort>:
 8009b68:	2006      	movs	r0, #6
 8009b6a:	b508      	push	{r3, lr}
 8009b6c:	f000 fa0a 	bl	8009f84 <raise>
 8009b70:	2001      	movs	r0, #1
 8009b72:	f7f7 fd52 	bl	800161a <_exit>

08009b76 <_malloc_usable_size_r>:
 8009b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b7a:	1f18      	subs	r0, r3, #4
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bfbc      	itt	lt
 8009b80:	580b      	ldrlt	r3, [r1, r0]
 8009b82:	18c0      	addlt	r0, r0, r3
 8009b84:	4770      	bx	lr

08009b86 <__sfputc_r>:
 8009b86:	6893      	ldr	r3, [r2, #8]
 8009b88:	b410      	push	{r4}
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	6093      	str	r3, [r2, #8]
 8009b90:	da07      	bge.n	8009ba2 <__sfputc_r+0x1c>
 8009b92:	6994      	ldr	r4, [r2, #24]
 8009b94:	42a3      	cmp	r3, r4
 8009b96:	db01      	blt.n	8009b9c <__sfputc_r+0x16>
 8009b98:	290a      	cmp	r1, #10
 8009b9a:	d102      	bne.n	8009ba2 <__sfputc_r+0x1c>
 8009b9c:	bc10      	pop	{r4}
 8009b9e:	f000 b933 	b.w	8009e08 <__swbuf_r>
 8009ba2:	6813      	ldr	r3, [r2, #0]
 8009ba4:	1c58      	adds	r0, r3, #1
 8009ba6:	6010      	str	r0, [r2, #0]
 8009ba8:	7019      	strb	r1, [r3, #0]
 8009baa:	4608      	mov	r0, r1
 8009bac:	bc10      	pop	{r4}
 8009bae:	4770      	bx	lr

08009bb0 <__sfputs_r>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	460f      	mov	r7, r1
 8009bb6:	4614      	mov	r4, r2
 8009bb8:	18d5      	adds	r5, r2, r3
 8009bba:	42ac      	cmp	r4, r5
 8009bbc:	d101      	bne.n	8009bc2 <__sfputs_r+0x12>
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	e007      	b.n	8009bd2 <__sfputs_r+0x22>
 8009bc2:	463a      	mov	r2, r7
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bca:	f7ff ffdc 	bl	8009b86 <__sfputc_r>
 8009bce:	1c43      	adds	r3, r0, #1
 8009bd0:	d1f3      	bne.n	8009bba <__sfputs_r+0xa>
 8009bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bd4 <_vfiprintf_r>:
 8009bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd8:	460d      	mov	r5, r1
 8009bda:	4614      	mov	r4, r2
 8009bdc:	4698      	mov	r8, r3
 8009bde:	4606      	mov	r6, r0
 8009be0:	b09d      	sub	sp, #116	; 0x74
 8009be2:	b118      	cbz	r0, 8009bec <_vfiprintf_r+0x18>
 8009be4:	6a03      	ldr	r3, [r0, #32]
 8009be6:	b90b      	cbnz	r3, 8009bec <_vfiprintf_r+0x18>
 8009be8:	f7fc f934 	bl	8005e54 <__sinit>
 8009bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bee:	07d9      	lsls	r1, r3, #31
 8009bf0:	d405      	bmi.n	8009bfe <_vfiprintf_r+0x2a>
 8009bf2:	89ab      	ldrh	r3, [r5, #12]
 8009bf4:	059a      	lsls	r2, r3, #22
 8009bf6:	d402      	bmi.n	8009bfe <_vfiprintf_r+0x2a>
 8009bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bfa:	f7fc fab0 	bl	800615e <__retarget_lock_acquire_recursive>
 8009bfe:	89ab      	ldrh	r3, [r5, #12]
 8009c00:	071b      	lsls	r3, r3, #28
 8009c02:	d501      	bpl.n	8009c08 <_vfiprintf_r+0x34>
 8009c04:	692b      	ldr	r3, [r5, #16]
 8009c06:	b99b      	cbnz	r3, 8009c30 <_vfiprintf_r+0x5c>
 8009c08:	4629      	mov	r1, r5
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f000 f93a 	bl	8009e84 <__swsetup_r>
 8009c10:	b170      	cbz	r0, 8009c30 <_vfiprintf_r+0x5c>
 8009c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c14:	07dc      	lsls	r4, r3, #31
 8009c16:	d504      	bpl.n	8009c22 <_vfiprintf_r+0x4e>
 8009c18:	f04f 30ff 	mov.w	r0, #4294967295
 8009c1c:	b01d      	add	sp, #116	; 0x74
 8009c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c22:	89ab      	ldrh	r3, [r5, #12]
 8009c24:	0598      	lsls	r0, r3, #22
 8009c26:	d4f7      	bmi.n	8009c18 <_vfiprintf_r+0x44>
 8009c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c2a:	f7fc fa99 	bl	8006160 <__retarget_lock_release_recursive>
 8009c2e:	e7f3      	b.n	8009c18 <_vfiprintf_r+0x44>
 8009c30:	2300      	movs	r3, #0
 8009c32:	9309      	str	r3, [sp, #36]	; 0x24
 8009c34:	2320      	movs	r3, #32
 8009c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c3a:	2330      	movs	r3, #48	; 0x30
 8009c3c:	f04f 0901 	mov.w	r9, #1
 8009c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009df4 <_vfiprintf_r+0x220>
 8009c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c4c:	4623      	mov	r3, r4
 8009c4e:	469a      	mov	sl, r3
 8009c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c54:	b10a      	cbz	r2, 8009c5a <_vfiprintf_r+0x86>
 8009c56:	2a25      	cmp	r2, #37	; 0x25
 8009c58:	d1f9      	bne.n	8009c4e <_vfiprintf_r+0x7a>
 8009c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8009c5e:	d00b      	beq.n	8009c78 <_vfiprintf_r+0xa4>
 8009c60:	465b      	mov	r3, fp
 8009c62:	4622      	mov	r2, r4
 8009c64:	4629      	mov	r1, r5
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff ffa2 	bl	8009bb0 <__sfputs_r>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	f000 80a9 	beq.w	8009dc4 <_vfiprintf_r+0x1f0>
 8009c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c74:	445a      	add	r2, fp
 8009c76:	9209      	str	r2, [sp, #36]	; 0x24
 8009c78:	f89a 3000 	ldrb.w	r3, [sl]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 80a1 	beq.w	8009dc4 <_vfiprintf_r+0x1f0>
 8009c82:	2300      	movs	r3, #0
 8009c84:	f04f 32ff 	mov.w	r2, #4294967295
 8009c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c8c:	f10a 0a01 	add.w	sl, sl, #1
 8009c90:	9304      	str	r3, [sp, #16]
 8009c92:	9307      	str	r3, [sp, #28]
 8009c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c98:	931a      	str	r3, [sp, #104]	; 0x68
 8009c9a:	4654      	mov	r4, sl
 8009c9c:	2205      	movs	r2, #5
 8009c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca2:	4854      	ldr	r0, [pc, #336]	; (8009df4 <_vfiprintf_r+0x220>)
 8009ca4:	f7fc fa65 	bl	8006172 <memchr>
 8009ca8:	9a04      	ldr	r2, [sp, #16]
 8009caa:	b9d8      	cbnz	r0, 8009ce4 <_vfiprintf_r+0x110>
 8009cac:	06d1      	lsls	r1, r2, #27
 8009cae:	bf44      	itt	mi
 8009cb0:	2320      	movmi	r3, #32
 8009cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cb6:	0713      	lsls	r3, r2, #28
 8009cb8:	bf44      	itt	mi
 8009cba:	232b      	movmi	r3, #43	; 0x2b
 8009cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8009cc6:	d015      	beq.n	8009cf4 <_vfiprintf_r+0x120>
 8009cc8:	4654      	mov	r4, sl
 8009cca:	2000      	movs	r0, #0
 8009ccc:	f04f 0c0a 	mov.w	ip, #10
 8009cd0:	9a07      	ldr	r2, [sp, #28]
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cd8:	3b30      	subs	r3, #48	; 0x30
 8009cda:	2b09      	cmp	r3, #9
 8009cdc:	d94d      	bls.n	8009d7a <_vfiprintf_r+0x1a6>
 8009cde:	b1b0      	cbz	r0, 8009d0e <_vfiprintf_r+0x13a>
 8009ce0:	9207      	str	r2, [sp, #28]
 8009ce2:	e014      	b.n	8009d0e <_vfiprintf_r+0x13a>
 8009ce4:	eba0 0308 	sub.w	r3, r0, r8
 8009ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8009cec:	4313      	orrs	r3, r2
 8009cee:	46a2      	mov	sl, r4
 8009cf0:	9304      	str	r3, [sp, #16]
 8009cf2:	e7d2      	b.n	8009c9a <_vfiprintf_r+0xc6>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	1d19      	adds	r1, r3, #4
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	9103      	str	r1, [sp, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	bfbb      	ittet	lt
 8009d00:	425b      	neglt	r3, r3
 8009d02:	f042 0202 	orrlt.w	r2, r2, #2
 8009d06:	9307      	strge	r3, [sp, #28]
 8009d08:	9307      	strlt	r3, [sp, #28]
 8009d0a:	bfb8      	it	lt
 8009d0c:	9204      	strlt	r2, [sp, #16]
 8009d0e:	7823      	ldrb	r3, [r4, #0]
 8009d10:	2b2e      	cmp	r3, #46	; 0x2e
 8009d12:	d10c      	bne.n	8009d2e <_vfiprintf_r+0x15a>
 8009d14:	7863      	ldrb	r3, [r4, #1]
 8009d16:	2b2a      	cmp	r3, #42	; 0x2a
 8009d18:	d134      	bne.n	8009d84 <_vfiprintf_r+0x1b0>
 8009d1a:	9b03      	ldr	r3, [sp, #12]
 8009d1c:	3402      	adds	r4, #2
 8009d1e:	1d1a      	adds	r2, r3, #4
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	9203      	str	r2, [sp, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bfb8      	it	lt
 8009d28:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d2c:	9305      	str	r3, [sp, #20]
 8009d2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009df8 <_vfiprintf_r+0x224>
 8009d32:	2203      	movs	r2, #3
 8009d34:	4650      	mov	r0, sl
 8009d36:	7821      	ldrb	r1, [r4, #0]
 8009d38:	f7fc fa1b 	bl	8006172 <memchr>
 8009d3c:	b138      	cbz	r0, 8009d4e <_vfiprintf_r+0x17a>
 8009d3e:	2240      	movs	r2, #64	; 0x40
 8009d40:	9b04      	ldr	r3, [sp, #16]
 8009d42:	eba0 000a 	sub.w	r0, r0, sl
 8009d46:	4082      	lsls	r2, r0
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	3401      	adds	r4, #1
 8009d4c:	9304      	str	r3, [sp, #16]
 8009d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d52:	2206      	movs	r2, #6
 8009d54:	4829      	ldr	r0, [pc, #164]	; (8009dfc <_vfiprintf_r+0x228>)
 8009d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d5a:	f7fc fa0a 	bl	8006172 <memchr>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d03f      	beq.n	8009de2 <_vfiprintf_r+0x20e>
 8009d62:	4b27      	ldr	r3, [pc, #156]	; (8009e00 <_vfiprintf_r+0x22c>)
 8009d64:	bb1b      	cbnz	r3, 8009dae <_vfiprintf_r+0x1da>
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	3307      	adds	r3, #7
 8009d6a:	f023 0307 	bic.w	r3, r3, #7
 8009d6e:	3308      	adds	r3, #8
 8009d70:	9303      	str	r3, [sp, #12]
 8009d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d74:	443b      	add	r3, r7
 8009d76:	9309      	str	r3, [sp, #36]	; 0x24
 8009d78:	e768      	b.n	8009c4c <_vfiprintf_r+0x78>
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	2001      	movs	r0, #1
 8009d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d82:	e7a6      	b.n	8009cd2 <_vfiprintf_r+0xfe>
 8009d84:	2300      	movs	r3, #0
 8009d86:	f04f 0c0a 	mov.w	ip, #10
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	3401      	adds	r4, #1
 8009d8e:	9305      	str	r3, [sp, #20]
 8009d90:	4620      	mov	r0, r4
 8009d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d96:	3a30      	subs	r2, #48	; 0x30
 8009d98:	2a09      	cmp	r2, #9
 8009d9a:	d903      	bls.n	8009da4 <_vfiprintf_r+0x1d0>
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d0c6      	beq.n	8009d2e <_vfiprintf_r+0x15a>
 8009da0:	9105      	str	r1, [sp, #20]
 8009da2:	e7c4      	b.n	8009d2e <_vfiprintf_r+0x15a>
 8009da4:	4604      	mov	r4, r0
 8009da6:	2301      	movs	r3, #1
 8009da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dac:	e7f0      	b.n	8009d90 <_vfiprintf_r+0x1bc>
 8009dae:	ab03      	add	r3, sp, #12
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	462a      	mov	r2, r5
 8009db4:	4630      	mov	r0, r6
 8009db6:	4b13      	ldr	r3, [pc, #76]	; (8009e04 <_vfiprintf_r+0x230>)
 8009db8:	a904      	add	r1, sp, #16
 8009dba:	f7fb f9ef 	bl	800519c <_printf_float>
 8009dbe:	4607      	mov	r7, r0
 8009dc0:	1c78      	adds	r0, r7, #1
 8009dc2:	d1d6      	bne.n	8009d72 <_vfiprintf_r+0x19e>
 8009dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dc6:	07d9      	lsls	r1, r3, #31
 8009dc8:	d405      	bmi.n	8009dd6 <_vfiprintf_r+0x202>
 8009dca:	89ab      	ldrh	r3, [r5, #12]
 8009dcc:	059a      	lsls	r2, r3, #22
 8009dce:	d402      	bmi.n	8009dd6 <_vfiprintf_r+0x202>
 8009dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dd2:	f7fc f9c5 	bl	8006160 <__retarget_lock_release_recursive>
 8009dd6:	89ab      	ldrh	r3, [r5, #12]
 8009dd8:	065b      	lsls	r3, r3, #25
 8009dda:	f53f af1d 	bmi.w	8009c18 <_vfiprintf_r+0x44>
 8009dde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009de0:	e71c      	b.n	8009c1c <_vfiprintf_r+0x48>
 8009de2:	ab03      	add	r3, sp, #12
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	462a      	mov	r2, r5
 8009de8:	4630      	mov	r0, r6
 8009dea:	4b06      	ldr	r3, [pc, #24]	; (8009e04 <_vfiprintf_r+0x230>)
 8009dec:	a904      	add	r1, sp, #16
 8009dee:	f7fb fc75 	bl	80056dc <_printf_i>
 8009df2:	e7e4      	b.n	8009dbe <_vfiprintf_r+0x1ea>
 8009df4:	0800a4c9 	.word	0x0800a4c9
 8009df8:	0800a4cf 	.word	0x0800a4cf
 8009dfc:	0800a4d3 	.word	0x0800a4d3
 8009e00:	0800519d 	.word	0x0800519d
 8009e04:	08009bb1 	.word	0x08009bb1

08009e08 <__swbuf_r>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	460e      	mov	r6, r1
 8009e0c:	4614      	mov	r4, r2
 8009e0e:	4605      	mov	r5, r0
 8009e10:	b118      	cbz	r0, 8009e1a <__swbuf_r+0x12>
 8009e12:	6a03      	ldr	r3, [r0, #32]
 8009e14:	b90b      	cbnz	r3, 8009e1a <__swbuf_r+0x12>
 8009e16:	f7fc f81d 	bl	8005e54 <__sinit>
 8009e1a:	69a3      	ldr	r3, [r4, #24]
 8009e1c:	60a3      	str	r3, [r4, #8]
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	071a      	lsls	r2, r3, #28
 8009e22:	d525      	bpl.n	8009e70 <__swbuf_r+0x68>
 8009e24:	6923      	ldr	r3, [r4, #16]
 8009e26:	b31b      	cbz	r3, 8009e70 <__swbuf_r+0x68>
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	6922      	ldr	r2, [r4, #16]
 8009e2c:	b2f6      	uxtb	r6, r6
 8009e2e:	1a98      	subs	r0, r3, r2
 8009e30:	6963      	ldr	r3, [r4, #20]
 8009e32:	4637      	mov	r7, r6
 8009e34:	4283      	cmp	r3, r0
 8009e36:	dc04      	bgt.n	8009e42 <__swbuf_r+0x3a>
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	f7ff f94a 	bl	80090d4 <_fflush_r>
 8009e40:	b9e0      	cbnz	r0, 8009e7c <__swbuf_r+0x74>
 8009e42:	68a3      	ldr	r3, [r4, #8]
 8009e44:	3b01      	subs	r3, #1
 8009e46:	60a3      	str	r3, [r4, #8]
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	6022      	str	r2, [r4, #0]
 8009e4e:	701e      	strb	r6, [r3, #0]
 8009e50:	6962      	ldr	r2, [r4, #20]
 8009e52:	1c43      	adds	r3, r0, #1
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d004      	beq.n	8009e62 <__swbuf_r+0x5a>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	07db      	lsls	r3, r3, #31
 8009e5c:	d506      	bpl.n	8009e6c <__swbuf_r+0x64>
 8009e5e:	2e0a      	cmp	r6, #10
 8009e60:	d104      	bne.n	8009e6c <__swbuf_r+0x64>
 8009e62:	4621      	mov	r1, r4
 8009e64:	4628      	mov	r0, r5
 8009e66:	f7ff f935 	bl	80090d4 <_fflush_r>
 8009e6a:	b938      	cbnz	r0, 8009e7c <__swbuf_r+0x74>
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e70:	4621      	mov	r1, r4
 8009e72:	4628      	mov	r0, r5
 8009e74:	f000 f806 	bl	8009e84 <__swsetup_r>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d0d5      	beq.n	8009e28 <__swbuf_r+0x20>
 8009e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8009e80:	e7f4      	b.n	8009e6c <__swbuf_r+0x64>
	...

08009e84 <__swsetup_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4b2a      	ldr	r3, [pc, #168]	; (8009f30 <__swsetup_r+0xac>)
 8009e88:	4605      	mov	r5, r0
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	b118      	cbz	r0, 8009e98 <__swsetup_r+0x14>
 8009e90:	6a03      	ldr	r3, [r0, #32]
 8009e92:	b90b      	cbnz	r3, 8009e98 <__swsetup_r+0x14>
 8009e94:	f7fb ffde 	bl	8005e54 <__sinit>
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e9e:	0718      	lsls	r0, r3, #28
 8009ea0:	d422      	bmi.n	8009ee8 <__swsetup_r+0x64>
 8009ea2:	06d9      	lsls	r1, r3, #27
 8009ea4:	d407      	bmi.n	8009eb6 <__swsetup_r+0x32>
 8009ea6:	2309      	movs	r3, #9
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009eae:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb2:	81a3      	strh	r3, [r4, #12]
 8009eb4:	e034      	b.n	8009f20 <__swsetup_r+0x9c>
 8009eb6:	0758      	lsls	r0, r3, #29
 8009eb8:	d512      	bpl.n	8009ee0 <__swsetup_r+0x5c>
 8009eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ebc:	b141      	cbz	r1, 8009ed0 <__swsetup_r+0x4c>
 8009ebe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ec2:	4299      	cmp	r1, r3
 8009ec4:	d002      	beq.n	8009ecc <__swsetup_r+0x48>
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f7fc ffd6 	bl	8006e78 <_free_r>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	6363      	str	r3, [r4, #52]	; 0x34
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	6063      	str	r3, [r4, #4]
 8009edc:	6923      	ldr	r3, [r4, #16]
 8009ede:	6023      	str	r3, [r4, #0]
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	f043 0308 	orr.w	r3, r3, #8
 8009ee6:	81a3      	strh	r3, [r4, #12]
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	b94b      	cbnz	r3, 8009f00 <__swsetup_r+0x7c>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ef6:	d003      	beq.n	8009f00 <__swsetup_r+0x7c>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 f883 	bl	800a006 <__smakebuf_r>
 8009f00:	89a0      	ldrh	r0, [r4, #12]
 8009f02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f06:	f010 0301 	ands.w	r3, r0, #1
 8009f0a:	d00a      	beq.n	8009f22 <__swsetup_r+0x9e>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60a3      	str	r3, [r4, #8]
 8009f10:	6963      	ldr	r3, [r4, #20]
 8009f12:	425b      	negs	r3, r3
 8009f14:	61a3      	str	r3, [r4, #24]
 8009f16:	6923      	ldr	r3, [r4, #16]
 8009f18:	b943      	cbnz	r3, 8009f2c <__swsetup_r+0xa8>
 8009f1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f1e:	d1c4      	bne.n	8009eaa <__swsetup_r+0x26>
 8009f20:	bd38      	pop	{r3, r4, r5, pc}
 8009f22:	0781      	lsls	r1, r0, #30
 8009f24:	bf58      	it	pl
 8009f26:	6963      	ldrpl	r3, [r4, #20]
 8009f28:	60a3      	str	r3, [r4, #8]
 8009f2a:	e7f4      	b.n	8009f16 <__swsetup_r+0x92>
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	e7f7      	b.n	8009f20 <__swsetup_r+0x9c>
 8009f30:	20000064 	.word	0x20000064

08009f34 <_raise_r>:
 8009f34:	291f      	cmp	r1, #31
 8009f36:	b538      	push	{r3, r4, r5, lr}
 8009f38:	4604      	mov	r4, r0
 8009f3a:	460d      	mov	r5, r1
 8009f3c:	d904      	bls.n	8009f48 <_raise_r+0x14>
 8009f3e:	2316      	movs	r3, #22
 8009f40:	6003      	str	r3, [r0, #0]
 8009f42:	f04f 30ff 	mov.w	r0, #4294967295
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009f4a:	b112      	cbz	r2, 8009f52 <_raise_r+0x1e>
 8009f4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f50:	b94b      	cbnz	r3, 8009f66 <_raise_r+0x32>
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 f830 	bl	8009fb8 <_getpid_r>
 8009f58:	462a      	mov	r2, r5
 8009f5a:	4601      	mov	r1, r0
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f62:	f000 b817 	b.w	8009f94 <_kill_r>
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d00a      	beq.n	8009f80 <_raise_r+0x4c>
 8009f6a:	1c59      	adds	r1, r3, #1
 8009f6c:	d103      	bne.n	8009f76 <_raise_r+0x42>
 8009f6e:	2316      	movs	r3, #22
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	2001      	movs	r0, #1
 8009f74:	e7e7      	b.n	8009f46 <_raise_r+0x12>
 8009f76:	2400      	movs	r4, #0
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f7e:	4798      	blx	r3
 8009f80:	2000      	movs	r0, #0
 8009f82:	e7e0      	b.n	8009f46 <_raise_r+0x12>

08009f84 <raise>:
 8009f84:	4b02      	ldr	r3, [pc, #8]	; (8009f90 <raise+0xc>)
 8009f86:	4601      	mov	r1, r0
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	f7ff bfd3 	b.w	8009f34 <_raise_r>
 8009f8e:	bf00      	nop
 8009f90:	20000064 	.word	0x20000064

08009f94 <_kill_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	2300      	movs	r3, #0
 8009f98:	4d06      	ldr	r5, [pc, #24]	; (8009fb4 <_kill_r+0x20>)
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	602b      	str	r3, [r5, #0]
 8009fa2:	f7f7 fb2a 	bl	80015fa <_kill>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d102      	bne.n	8009fb0 <_kill_r+0x1c>
 8009faa:	682b      	ldr	r3, [r5, #0]
 8009fac:	b103      	cbz	r3, 8009fb0 <_kill_r+0x1c>
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	bd38      	pop	{r3, r4, r5, pc}
 8009fb2:	bf00      	nop
 8009fb4:	2000058c 	.word	0x2000058c

08009fb8 <_getpid_r>:
 8009fb8:	f7f7 bb18 	b.w	80015ec <_getpid>

08009fbc <__swhatbuf_r>:
 8009fbc:	b570      	push	{r4, r5, r6, lr}
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc4:	4615      	mov	r5, r2
 8009fc6:	2900      	cmp	r1, #0
 8009fc8:	461e      	mov	r6, r3
 8009fca:	b096      	sub	sp, #88	; 0x58
 8009fcc:	da0c      	bge.n	8009fe8 <__swhatbuf_r+0x2c>
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009fd6:	bf0c      	ite	eq
 8009fd8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009fdc:	2340      	movne	r3, #64	; 0x40
 8009fde:	2000      	movs	r0, #0
 8009fe0:	6031      	str	r1, [r6, #0]
 8009fe2:	602b      	str	r3, [r5, #0]
 8009fe4:	b016      	add	sp, #88	; 0x58
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}
 8009fe8:	466a      	mov	r2, sp
 8009fea:	f000 f849 	bl	800a080 <_fstat_r>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	dbed      	blt.n	8009fce <__swhatbuf_r+0x12>
 8009ff2:	9901      	ldr	r1, [sp, #4]
 8009ff4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009ff8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009ffc:	4259      	negs	r1, r3
 8009ffe:	4159      	adcs	r1, r3
 800a000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a004:	e7eb      	b.n	8009fde <__swhatbuf_r+0x22>

0800a006 <__smakebuf_r>:
 800a006:	898b      	ldrh	r3, [r1, #12]
 800a008:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a00a:	079d      	lsls	r5, r3, #30
 800a00c:	4606      	mov	r6, r0
 800a00e:	460c      	mov	r4, r1
 800a010:	d507      	bpl.n	800a022 <__smakebuf_r+0x1c>
 800a012:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a016:	6023      	str	r3, [r4, #0]
 800a018:	6123      	str	r3, [r4, #16]
 800a01a:	2301      	movs	r3, #1
 800a01c:	6163      	str	r3, [r4, #20]
 800a01e:	b002      	add	sp, #8
 800a020:	bd70      	pop	{r4, r5, r6, pc}
 800a022:	466a      	mov	r2, sp
 800a024:	ab01      	add	r3, sp, #4
 800a026:	f7ff ffc9 	bl	8009fbc <__swhatbuf_r>
 800a02a:	9900      	ldr	r1, [sp, #0]
 800a02c:	4605      	mov	r5, r0
 800a02e:	4630      	mov	r0, r6
 800a030:	f7fc ff92 	bl	8006f58 <_malloc_r>
 800a034:	b948      	cbnz	r0, 800a04a <__smakebuf_r+0x44>
 800a036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a03a:	059a      	lsls	r2, r3, #22
 800a03c:	d4ef      	bmi.n	800a01e <__smakebuf_r+0x18>
 800a03e:	f023 0303 	bic.w	r3, r3, #3
 800a042:	f043 0302 	orr.w	r3, r3, #2
 800a046:	81a3      	strh	r3, [r4, #12]
 800a048:	e7e3      	b.n	800a012 <__smakebuf_r+0xc>
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	6020      	str	r0, [r4, #0]
 800a04e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	9b00      	ldr	r3, [sp, #0]
 800a056:	6120      	str	r0, [r4, #16]
 800a058:	6163      	str	r3, [r4, #20]
 800a05a:	9b01      	ldr	r3, [sp, #4]
 800a05c:	b15b      	cbz	r3, 800a076 <__smakebuf_r+0x70>
 800a05e:	4630      	mov	r0, r6
 800a060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a064:	f000 f81e 	bl	800a0a4 <_isatty_r>
 800a068:	b128      	cbz	r0, 800a076 <__smakebuf_r+0x70>
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	f023 0303 	bic.w	r3, r3, #3
 800a070:	f043 0301 	orr.w	r3, r3, #1
 800a074:	81a3      	strh	r3, [r4, #12]
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	431d      	orrs	r5, r3
 800a07a:	81a5      	strh	r5, [r4, #12]
 800a07c:	e7cf      	b.n	800a01e <__smakebuf_r+0x18>
	...

0800a080 <_fstat_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	2300      	movs	r3, #0
 800a084:	4d06      	ldr	r5, [pc, #24]	; (800a0a0 <_fstat_r+0x20>)
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	4611      	mov	r1, r2
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	f7f7 fb12 	bl	80016b6 <_fstat>
 800a092:	1c43      	adds	r3, r0, #1
 800a094:	d102      	bne.n	800a09c <_fstat_r+0x1c>
 800a096:	682b      	ldr	r3, [r5, #0]
 800a098:	b103      	cbz	r3, 800a09c <_fstat_r+0x1c>
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	bd38      	pop	{r3, r4, r5, pc}
 800a09e:	bf00      	nop
 800a0a0:	2000058c 	.word	0x2000058c

0800a0a4 <_isatty_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	4d05      	ldr	r5, [pc, #20]	; (800a0c0 <_isatty_r+0x1c>)
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	602b      	str	r3, [r5, #0]
 800a0b0:	f7f7 fb10 	bl	80016d4 <_isatty>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d102      	bne.n	800a0be <_isatty_r+0x1a>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	b103      	cbz	r3, 800a0be <_isatty_r+0x1a>
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	2000058c 	.word	0x2000058c

0800a0c4 <_init>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	bf00      	nop
 800a0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ca:	bc08      	pop	{r3}
 800a0cc:	469e      	mov	lr, r3
 800a0ce:	4770      	bx	lr

0800a0d0 <_fini>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	bf00      	nop
 800a0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d6:	bc08      	pop	{r3}
 800a0d8:	469e      	mov	lr, r3
 800a0da:	4770      	bx	lr
